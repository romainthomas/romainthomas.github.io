<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1" xmlns:content="http://purl.org/rss/1.0/modules/content" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Blog Post | Romain Thomas</title><link>https://www.romainthomas.fr/post/</link><atom:link href="https://www.romainthomas.fr/post/index.xml" rel="self" type="application/rss+xml"/><description>Lastest blog post</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate><item><title>A Journey in iOS App Obfuscation</title><dc:creator>Romain Thomas</dc:creator><link>https://www.romainthomas.fr/post/22-08-ios-obfuscation/</link><pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/22-08-ios-obfuscation/</guid><description>This series of blog posts details how obfuscators can protect iOS applications from reverse engineering</description><content:encoded><![CDATA[<p>Back in July 2021, I had a look at the protections provided by Arxan to detect jailbroken devices in PokemonGO for iOS
(<a href="https://www.romainthomas.fr/post/21-07-pokemongo-anti-frida-jailbreak-bypass/"><em>Gotta Catch &lsquo;Em All: Frida &amp; jailbreak detection</em></a>).</p>
<p>To continue walking along the path of iOS reverse engineering, I recently had a look at two iOS applications
protected by a solution providing both native code obfuscation and RASP (<em>Runtime Application Self Protection</em>) protections.</p>
<p>I ended up with two blog posts:</p>
<ul>
<li>Part 1 &ndash; SingPass RASP Analysis</li>
<li>Part 2 &ndash; Native Code Obfuscation and RASP Syscalls Bypass</li>
</ul>
<p>The first part is an in-depth analysis of RASP detections methods on iOS while the second part details
native code obfuscation and a new technique to bypass inlined syscalls (without Frida/Frida&rsquo;s stalker and without a disassembler)</p>
<div class="col-12 col-md-12 mb-4 mb-lg-4 mt-4">
  <div class="p-4 rounded col-12 alert alert-info" style="border: none !important; background-color: #f2fcf5">
  <div class="d-flex px-3"><div>
    <div class="icon icon-sm icon-secondary">
      <span class="fas fa-shield-check" style="color: #17642e" ></span>
    </div>
  </div>
  <div class="ps-4" style="color: #17642e">
    <h3 class="h5 m-0 mb-1" style="color: #17642e">Disclaimer</h3>
    <p>The obfuscator mentioned in these blog posts provides strong and state-of-the-art protections to hinder reverse engineering.
When dealing with obfuscation, saying that something is broken does not make really sense
as if an attacker is skilled and <strong>strongly motivated</strong>, he will very likely achieve his goal.</p>
<p>Moreover, this series of blog posts do not (and can&rsquo;t) <strong>exhaustively</strong> evaluate the strength of this commercial
solution because:</p>
<ol>
<li>The applications analyzed might not use the latest version of the obfuscator.</li>
<li>All the obfuscation features might not have been enabled by the developers (e.g. for performance reasons).</li>
<li>The developers might have weakened the obfuscation scheme (unintentionally).</li>
</ol>
<p>In summary, these blog posts aim at sharing &ndash; from a technical point of view &ndash; what RASP and native code
obfuscation look like on iOS. The scripts/code associated with these blog posts will not be published as it
does not really bring more information.</p>
<p>The commercial solution not mentioned in the blog posts is and remains a good choice for protecting assets from
reverse engineering. If you have doubts I would be very happy to discuss it.</p>
  </div>
  </div>
  </div>
</div>
<p>The first part will be published next week. Stay tuned :)</p>
]]></content:encoded><media:content medium="image" width="918" height="517" url="https://www.romainthomas.fr/post/22-08-ios-obfuscation/featured.png"/></item><item><title>PGSharp: Analysis of a Cheating App for PokemonGO</title><dc:creator>Romain Thomas</dc:creator><link>https://www.romainthomas.fr/post/21-11-pgsharp-analysis/</link><pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/21-11-pgsharp-analysis/</guid><description>This blog post is about the internal mechanisms of PGSharp, a cheat engine for PokemonGO.</description><content:encoded><![CDATA[<style>
  .green {
    color:green;
    font-family: 'Fira Code', monospace;
  }

  .blue {
    color: blue;
    font-family: 'Fira Code', monospace;
  }
  .orange {
    color: #FF6347;
    font-family: 'Fira Code', monospace;
  }

  .red {
    color: #c02032;
    font-family: 'Fira Code', monospace;
  }

  a.ul {
    color: #c02032 !important;
  }

  .hl-comment {
    color: #df2b04;
    font-family: 'Fira Code', monospace;
  }

  .hl-keyword {
    color: #A90D91;
    font-family: 'Fira Code', monospace;
  }

  .hl-literal {
    color: #1C01CE;
    font-family: 'Fira Code', monospace;
  }

  .hl-preproc {
    color: #633820;
    font-family: 'Fira Code', monospace;
  }

  .hl-strings {
    color: #C41A16;
    font-family: 'Fira Code', monospace;
  }
  .yellow {
    color: #CC7000;
    font-family: 'Fira Code', monospace;
  }


</style>
<h2 id="introduction">Introduction</h2>
<p>A few days after the release of the blog post <a href="https://www.romainthomas.fr/post/21-07-pokemongo-anti-frida-jailbreak-bypass/"><em>Gotta Catch &lsquo;Em All: Frida &amp; jailbreak detection</em></a>, someone on <a href="https://www.reddit.com/r/ReverseEngineering/comments/on6ya9/comment/h5rhkoc/">reddit - r/ReverseEngineering</a>
caught my attention on a cheating app for the Android version of PokemonGO:</p>
<p><img src="reddit.png" alt="reddit comment about PGSharp"></p>
<p>So here it is!</p>
<p>PGSharp belongs to the family of PokemonGO&rsquo;s cheating app that is not (yet) banned by Niantic.
This cheat provides an <em>enhanced</em> game experience with interesting functionalities such as:</p>
<ul>
<li>GPS Spoofing</li>
<li>Quick Catch</li>
<li>Pokemon Feed</li>
<li>Nearby Radar</li>
<li>&hellip;</li>
</ul>
<p>Last but not least, PGSharp runs on regular devices, <strong>rooted or not</strong>.</p>
<p>This cheat made my weekends for the last 4 months and, from a technical point of view, it was worth it.
As will be discussed through this blog post, PGSharp uses several interesting tricks.</p>
<div class="col-12 col-md-12 mb-4 mb-lg-4 mt-4">
  <div class="p-4 rounded col-12 alert alert-info" style="border: none !important; background-color: #FAFCFF">
  <div class="d-flex px-3"><div>
    <div class="icon icon-sm icon-secondary">
      <span class="fas fa-circle-info" style="color: #084298" ></span>
    </div>
  </div>
  <div class="ps-4" style="color: #084298">
    <h3 class="h5 m-0 mb-1" style="color: #084298">Note</h3>
    <p>The content of this blog post is based on <strong>PGSharp 1.33.0</strong> which is related to the following APKs:</p>
<p><i class="fas fa-gamepad"></i> <a href="https://data.romainthomas.fr/21-09-pgsharp/pgs1.33.0.apk">PGSharp v1.33.0</a></p>
<p><i class="fas fa-gamepad"></i> <a href="https://data.romainthomas.fr/21-09-pgsharp/com.nianticlabs.pokemongo_0.221.0-2021093001.apk">PokemonGO v0.221.0</a></p>
  </div>
  </div>
  </div>
</div>
<p>This blog post is quite <strong>long</strong> but the different parts are
more or less independents, so feel free to jump on them depending on your interests:</p>
<p><span id="toc"></span></p>
<ul>
<li><a href="#code-protection"><i class='fas fa-shield-alt'></i>  Code Protection</a>
<ul>
<li><a href="#lua-vm">Lua VM</a></li>
<li><a href="#java-obfuscation">Java Obfuscation</a></li>
</ul>
</li>
<li><a href="#cheat-mechanisms"><i class='fas fa-cogs'></i>  Cheat Mechanisms</a>
<ul>
<li><a href="#dex-files-diff">DEX Files Comparison</a></li>
<li><a href="#libmain">libmain.so</a></li>
<li><a href="#signature-bypass">Signature Bypass</a></li>
<li><a href="#dynamic-apk-loading">Dynamic APK Loading</a></li>
<li><a href="#gps-spoofing">GPS Spoofing</a></li>
<li><a href="#jnienv-proxifier">JNIEnv Proxifier</a></li>
<li><a href="#unity-hooks">Unity Hooks</a></li>
<li><a href="#network">Network Communications</a></li>
<li><a href="#safetynet">SafetyNet</a></li>
<li><a href="#pgsharp-signature-check">When PGSharp avoids PokemonGO pitfalls</a></li>
</ul>
</li>
<li><a href="#final-words"><i class='fas fa-power-off'></i>  Final Words</a></li>
<li><a href="#acknowledgments"><i class='fas fa-stream'></i>  Acknowledgments</a></li>
<li><a href="#annexes"><i class='fas fa-clipboard'></i>  Annexes</a></li>
</ul>
<p>You can also check the slides to get an overview of the content:</p>
<div class="pdfpreview shortcode shortcode--pdfpreview mb-4">
<embed src="/publication/21-ekoparty-mobile-hacking-space-pgsharp/21-10-ekoparty-mobile-hacking-space-pgsharp.pdf" type="application/pdf" width="100%" height=450px />
</div>

<center>
<br /><br />
<p><b>Enjoy!</b></p>
</center>
<h2 id="code-protection"><a href="#toc"><i class='fas fa-angle-up'></i>  Code Protection</a></h2>
<p>PokemonGO is a target of choice for reverse engineers and some critical functionalities are protected by a commercial solution.
It is worth mentioning that only a subset of the game is obfuscated. For instance, the &ldquo;Java&rdquo; part of the
game is absolutely not protected, such as we have the original class and method names.
The Unity part is &ldquo;compiled&rdquo; into <code>libil2cpp.so</code> but we can recover some metadata with <a href="https://github.com/Perfare/Il2CppDumper">Perfare/Il2CppDumper</a>.</p>
<p>All the obfuscation is focused on <code>libNianticLabsPlugin.so</code> (c.f. <a href="https://www.romainthomas.fr/post/21-07-pokemongo-anti-frida-jailbreak-bypass/"><em>Gotta Catch &lsquo;Em All: Frida &amp; jailbreak detection</em></a>),
and since only this part of the game is heavily obfuscated, it gives a hint about where the critical functionalities are.</p>
<p>On the other hand, PGSharp uses different layers of obfuscation to prevent its analysis.
First of all, it uses O-LLVM to obfuscate the native code that includes, at least, control-flow flattening and
string encryption. Nevertheless, the obfuscation is <em>relatively</em> weak against emulation and static analysis<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<h3 id="lua-vm"><a href="#toc"><i class='fas fa-angle-up'></i>  Lua VM</a></h3>
<p>Some obfuscation techniques are based on transforming the original code through a VM (like <a href="https://vmpsoft.com/">VMProtect</a>).
It adds another layer to reverse, as we need to understand the VM architecture before being able to understand the original semantic of the code.</p>
<center>
<b><p>
But what about using an interpreted language (like Python) and obfuscate its VM or its interpreter with O-LLVM?
</p></b><br />
</center>
<p>This is what PGSharp does with Lua. Some parts of the cheat are written in Lua whose VM has been modified to:</p>
<ol>
<li>Fake the version: try to make believe <code>Lua 5.1</code> while it&rsquo;s <code>Lua 5.3</code></li>
<li>Add new opcodes (<code>OP_RUN</code>, <code>OP_GETDOWNVAL</code>, <code>OP_OLDTABLE</code>, and <code>OP_XXOR</code>) to break decompilation and
common Lua tools.</li>
</ol>
<p>The native library that implements the cheat functionalities and that contains the Lua VM being stripped, one of the
challenges lies in recognizing the Lua C API among the library&rsquo;s functions<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. For instance,
here is a basic block of a native function that uses the Lua API:</p>
<p><img src="lua_func_re.png" alt="Stripped PGSharp function"></p>
<p>Among all the Lua C functions, some of them are worth identifying to ease reverse engineering:</p>
<ul>
<li>
<dl>
<dt><code>luaL_loadbuffer</code></dt>
<dd><blockquote>
<p><em>&ldquo;Load a buffer as a Lua chunk.&rdquo;</em>.</p>
</blockquote>
</dd>
<dd>
<p>Basically, it loads a Lua bytecode from a buffer given in parameter.
This Lua bytecode is the result of the <em>compilation</em> of the original script with <a href="https://www.lua.org/manual/5.3/luac.html">luac</a>.
By hooking this function, we can recover the following files:</p>
<ul>
<li><span class="orange">base64.luac</span></li>
<li><span class="green">class.luac</span></li>
<li><span class="green">global.luac</span></li>
<li><span class="green">init.luac</span></li>
<li><span class="orange">json.luac - from <a href="https://github.com/rxi/json.lua">https://github.com/rxi/json.lua</a></span></li>
<li><span class="green">location.luac</span></li>
<li><span class="orange">md5.luac - from <a href="https://github.com/kikito/md5.lua">https://github.com/kikito/md5.lua</a></span></li>
<li><span class="green">pgo.luac</span></li>
<li><span class="green">pgodump.luac</span></li>
<li><span class="green">plugin.luac</span></li>
<li><span class="green">reflect.luac</span></li>
</ul>
</dd>
</dl>
<p>The <span class="orange">orange files</span> are utilities, while the <span class="green">green ones</span>
contain cheat mechanisms.</p>
</li>
<li>
<dl>
<dt><code>luaD_precall</code></dt>
<dd>Function that is involved when calling a C native function or a pure Lua function.
Since its prototype is <span class="blue">(lua_State *L, StkId func, int nresults)</span>,
it can help to dynamically identify which function is called:</dd>
</dl>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0x6776a8 luaD_precall(&#39;gamehelper&#39;)
</span></span><span style="display:flex;"><span>0x6776a8 luaD_precall(&#39;@./app/arm64-v8a/luac/global.lua:0 - sub_71733ea5d0&#39;) {
</span></span><span style="display:flex;"><span>0x694d90 luaD_precall(&#39;@./app/arm64-v8a/luac/global.lua:246 - sub_71733f7b50&#39;) {
</span></span><span style="display:flex;"><span>0x6776a8 luaD_precall(&#39;@./app/arm64-v8a/luac/location.lua:38 - sub_717346d650&#39;) {
</span></span></code></pre></div></li>
<li>
<dl>
<dt><code>lua_pushcclosure</code></dt>
<dd><blockquote>
<p>Pushes a new C closure onto the stack.</p>
</blockquote>
</dd>
<dd>
<p>This function is particularly interesting to recover
native C functions linked to Lua function:</p>
</dd>
</dl>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0x0e9cc0: lua_pushcclosure(&#39;initil2cppmethods&#39;)
</span></span><span style="display:flex;"><span>0x0e9cd4: lua_setfield(-2, &#39;initil2cppmethods&#39;, &#39;func_0xedaa0&#39;)
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>0x0e9d10: lua_pushcclosure(&#39;nar&#39;)
</span></span><span style="display:flex;"><span>0x0e9d24: lua_setfield(-2, &#39;nar&#39;, &#39;func_0xeddbc&#39;)
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>0x0ea020: lua_pushcclosure(&#39;ipf&#39;)
</span></span><span style="display:flex;"><span>0x0ea034: lua_setfield(-2, &#39;ipf&#39;, &#39;func_0x1318b0&#39;)
</span></span></code></pre></div></li>
<li>
<dl>
<dt><code>lua_pushstring</code></dt>
<dd><blockquote>
<p><em>&ldquo;Pushes the zero-terminated string pointed to by s onto the stack.&rdquo;</em></p>
</blockquote>
</dd>
<dd>
<p>This function enables to dynamically recover strings that might not be present
in the native code or somehow encoded:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0x0ebdfc: lua_pushstring(&#39;https://tens.pgsharp.com/v1/scc-2-[...]/&#39;)
</span></span><span style="display:flex;"><span>0x0ebe28: lua_pushstring(&#39;me.uw.hela.pref&#39;)
</span></span><span style="display:flex;"><span>0x0c56ac: lua_pushstring(&#39;AIza[...]XhM4&#39;)
</span></span><span style="display:flex;"><span>0x0e15b4: lua_pushstring(&#39;token=[Redacted]&#39;)
</span></span></code></pre></div></dd>
</dl>
</li>
</ul>



<div class="alert alert-info" role="alert"  style="border: none !important; background-color: #FAFCFF">
  <p>To dynamically understand the behavior of the Lua VM, we can compile the Frida Gum SDK along with Lua v5.3.</p>
<p>It enables to hook Lua functions with Frida and to leverage the compiled Lua v5.3 to inspect the parameters:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">extern</span> <span style="color:#ba2121">&#34;C&#34;</span> {
</span></span><span style="display:flex;"><span><span style="color:#bc7a00">#include</span> <span style="color:#bc7a00">&#34;lua.h&#34;</span><span style="color:#bc7a00">
</span></span></span><span style="display:flex;"><span><span style="color:#bc7a00">#include</span> <span style="color:#bc7a00">&#34;ldo.h&#34;</span><span style="color:#bc7a00">
</span></span></span><span style="display:flex;"><span><span style="color:#bc7a00">#include</span> <span style="color:#bc7a00">&#34;ldebug.h&#34;</span><span style="color:#bc7a00">
</span></span></span><span style="display:flex;"><span><span style="color:#bc7a00"></span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gum_interceptor_attach(listener_<span style="color:#666">-&gt;</span>interceptor,
</span></span><span style="display:flex;"><span>                       luaD_precall_addr, listener_ luaD_precall_addr);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#b00040">void</span> <span style="color:#00f">native_listener_on_enter</span>(GumInvocationListener <span style="color:#666">*</span>listener, GumInvocationContext<span style="color:#666">*</span> ic) {
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">auto</span><span style="color:#666">*</span> L <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span>lua_State<span style="color:#666">*&gt;</span>(ic<span style="color:#666">-&gt;</span>cpu_context<span style="color:#666">-&gt;</span>x[<span style="color:#666">0</span>]);
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">auto</span> func <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span>StkId<span style="color:#666">&gt;</span>(ic<span style="color:#666">-&gt;</span>cpu_context<span style="color:#666">-&gt;</span>x[<span style="color:#666">1</span>]);
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">auto</span> narg <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">static_cast</span><span style="color:#666">&lt;</span><span style="color:#b00040">int</span><span style="color:#666">&gt;</span>(ic<span style="color:#666">-&gt;</span>cpu_context<span style="color:#666">-&gt;</span>x[<span style="color:#666">2</span>]);
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">if</span> (ttype(func) <span style="color:#666">!=</span> LUA_TLCL) {
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">return</span> log(<span style="color:#ba2121">&#34;sub_{:x}&#34;</span>, ptr);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  Proto <span style="color:#666">*</span>p <span style="color:#666">=</span> clLvalue(func)<span style="color:#666">-&gt;</span>p;
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span> log(<span style="color:#ba2121">&#34;{}:{:d} - sub_{:x}&#34;</span>, getstr(p<span style="color:#666">-&gt;</span>source), p<span style="color:#666">-&gt;</span>linedefined, ptr);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>
</div>





<h3 id="java-obfuscation"><a href="#toc"><i class='fas fa-angle-up'></i>  Java Obfuscation</a></h3>
<p>Contrary to the PokemonGO&rsquo;s Java layer, PGSharp protects its Java code with Proguard and the strings are xored
with the hardcoded key:</p>
<center>
<p><b class="orange"><p>vqGqQWCVnDRrNXTR</b></p><br />
</center>
<p>This key seems to not change across the different versions of PGSharp and the encoded strings look
like this:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">public</span> <span style="color:#b00040">void</span> <span style="color:#00f">q</span><span style="color:#666">()</span> <span style="color:#666">{</span>
</span></span><span style="display:flex;"><span>  String a <span style="color:#666">=</span> GL<span style="color:#666">.</span><span style="color:#7d9029">a</span><span style="color:#666">(</span>r3<span style="color:#666">.</span><span style="color:#7d9029">a</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;FAQgLiQlLw==&#34;</span><span style="color:#666">),</span> <span style="color:#666">(</span>String<span style="color:#666">)</span> <span style="color:#008000;font-weight:bold">null</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">if</span> <span style="color:#666">(</span>a <span style="color:#666">!=</span> <span style="color:#008000;font-weight:bold">null</span><span style="color:#666">)</span> <span style="color:#666">{</span>
</span></span><span style="display:flex;"><span>    JSONObject jSONObject <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">new</span> JSONObject<span style="color:#666">();</span>
</span></span><span style="display:flex;"><span>    Context context <span style="color:#666">=</span> GL<span style="color:#666">.</span><span style="color:#7d9029">c</span><span style="color:#666">;</span>
</span></span><span style="display:flex;"><span>    jSONObject<span style="color:#666">.</span><span style="color:#7d9029">put</span><span style="color:#666">(</span>r3<span style="color:#666">.</span><span style="color:#7d9029">a</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;Agg3FA==&#34;</span><span style="color:#666">),</span> r3<span style="color:#666">.</span><span style="color:#7d9029">a</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;Axg=&#34;</span><span style="color:#666">));</span>
</span></span><span style="display:flex;"><span>    jSONObject<span style="color:#666">.</span><span style="color:#7d9029">put</span><span style="color:#666">(</span>r3<span style="color:#666">.</span><span style="color:#7d9029">a</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;Axgj&#34;</span><span style="color:#666">),</span> UI<span style="color:#666">.</span><span style="color:#7d9029">g</span><span style="color:#666">(</span>context<span style="color:#666">));</span>
</span></span><span style="display:flex;"><span>    jSONObject<span style="color:#666">.</span><span style="color:#7d9029">put</span><span style="color:#666">(</span>r3<span style="color:#666">.</span><span style="color:#7d9029">a</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;BQUmBTQ=&#34;</span><span style="color:#666">),</span> <span style="color:#008000;font-weight:bold">this</span><span style="color:#666">.</span><span style="color:#7d9029">s</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>    jSONObject<span style="color:#666">.</span><span style="color:#7d9029">put</span><span style="color:#666">(</span>r3<span style="color:#666">.</span><span style="color:#7d9029">a</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;BQEoHjc+LTE=&#34;</span><span style="color:#666">),</span> <span style="color:#666">((</span>Boolean<span style="color:#666">)</span> <span style="color:#666">...);</span>
</span></span><span style="display:flex;"><span>    jSONObject<span style="color:#666">.</span><span style="color:#7d9029">put</span><span style="color:#666">(</span>r3<span style="color:#666">.</span><span style="color:#7d9029">a</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;BAUr&#34;</span><span style="color:#666">),</span> UI<span style="color:#666">.</span><span style="color:#7d9029">f</span><span style="color:#666">());</span>
</span></span><span style="display:flex;"><span>    jSONObject<span style="color:#666">.</span><span style="color:#7d9029">put</span><span style="color:#666">(</span>r3<span style="color:#666">.</span><span style="color:#7d9029">a</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;Gh8g&#34;</span><span style="color:#666">),</span> Locale<span style="color:#666">.</span><span style="color:#7d9029">getDefault</span><span style="color:#666">().</span><span style="color:#7d9029">getDisplayLanguage</span><span style="color:#666">());</span>
</span></span><span style="display:flex;"><span>    jSONObject<span style="color:#666">.</span><span style="color:#7d9029">put</span><span style="color:#666">(</span>r3<span style="color:#666">.</span><span style="color:#7d9029">a</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;FxMu&#34;</span><span style="color:#666">),</span> UI<span style="color:#666">.</span><span style="color:#7d9029">a</span><span style="color:#666">());</span>
</span></span><span style="display:flex;"><span>    jSONObject<span style="color:#666">.</span><span style="color:#7d9029">put</span><span style="color:#666">(</span>r3<span style="color:#666">.</span><span style="color:#7d9029">a</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;FBA1&#34;</span><span style="color:#666">),</span> LayoutInflater$Factory2o<span style="color:#666">.</span><span style="color:#7d9029">i</span><span style="color:#666">.</span><span style="color:#7d9029">e</span><span style="color:#666">(</span>context<span style="color:#666">));</span>
</span></span><span style="display:flex;"><span>    jSONObject<span style="color:#666">.</span><span style="color:#7d9029">put</span><span style="color:#666">(</span>r3<span style="color:#666">.</span><span style="color:#7d9029">a</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;Gx4j&#34;</span><span style="color:#666">),</span> Build<span style="color:#666">.</span><span style="color:#7d9029">MODEL</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>    String str <span style="color:#666">=</span> Build<span style="color:#666">.</span><span style="color:#7d9029">VERSION</span><span style="color:#666">.</span><span style="color:#7d9029">RELEASE</span><span style="color:#666">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#666">}</span>
</span></span><span style="display:flex;"><span><span style="color:#666">}</span>
</span></span></code></pre></div><p>The string encoding routine being easy to reverse, we can create a Jadx plugin
that automatically decodes these strings:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#666">[...]</span>
</span></span><span style="display:flex;"><span>passes<span style="color:#666">.</span><span style="color:#7d9029">add</span><span style="color:#666">(</span><span style="color:#008000;font-weight:bold">new</span> SimplifyVisitor<span style="color:#666">());</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>passes<span style="color:#666">.</span><span style="color:#7d9029">add</span><span style="color:#666">(</span><span style="color:#008000;font-weight:bold">new</span> PGSharpString<span style="color:#666">());</span> <span style="color:#408080;font-style:italic">// Automatically decode the strings
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>
</span></span><span style="display:flex;"><span>passes<span style="color:#666">.</span><span style="color:#7d9029">add</span><span style="color:#666">(</span><span style="color:#008000;font-weight:bold">new</span> CheckRegions<span style="color:#666">());</span>
</span></span><span style="display:flex;"><span><span style="color:#666">[...]</span>
</span></span></code></pre></div><p>It results in this kind of output:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">public</span> <span style="color:#b00040">void</span> <span style="color:#00f">q</span><span style="color:#666">()</span> <span style="color:#666">{</span>
</span></span><span style="display:flex;"><span>  String a <span style="color:#666">=</span> GL<span style="color:#666">.</span><span style="color:#7d9029">a</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;bug_url&#34;</span><span style="color:#666">,</span> <span style="color:#666">(</span>String<span style="color:#666">)</span> <span style="color:#008000;font-weight:bold">null</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">if</span> <span style="color:#666">(</span>a <span style="color:#666">!=</span> <span style="color:#008000;font-weight:bold">null</span><span style="color:#666">)</span> <span style="color:#666">{</span>
</span></span><span style="display:flex;"><span>    JSONObject jSONObject <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">new</span> JSONObject<span style="color:#666">();</span>
</span></span><span style="display:flex;"><span>    Context context <span style="color:#666">=</span> GL<span style="color:#666">.</span><span style="color:#7d9029">c</span><span style="color:#666">;</span>
</span></span><span style="display:flex;"><span>    jSONObject<span style="color:#666">.</span><span style="color:#7d9029">put</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;type&#34;</span><span style="color:#666">,</span> <span style="color:#ba2121">&#34;ui&#34;</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>    jSONObject<span style="color:#666">.</span><span style="color:#7d9029">put</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;uid&#34;</span><span style="color:#666">,</span> UI<span style="color:#666">.</span><span style="color:#7d9029">g</span><span style="color:#666">(</span>context<span style="color:#666">));</span>
</span></span><span style="display:flex;"><span>    jSONObject<span style="color:#666">.</span><span style="color:#7d9029">put</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;state&#34;</span><span style="color:#666">,</span> <span style="color:#008000;font-weight:bold">this</span><span style="color:#666">.</span><span style="color:#7d9029">s</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>    jSONObject<span style="color:#666">.</span><span style="color:#7d9029">put</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;spoofing&#34;</span><span style="color:#666">,</span> <span style="color:#666">((</span>Boolean<span style="color:#666">)</span> PL<span style="color:#666">.</span><span style="color:#7d9029">a</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;hlspoofing&#34;</span><span style="color:#666">)).</span><span style="color:#7d9029">booleanValue</span><span style="color:#666">());</span>
</span></span><span style="display:flex;"><span>    jSONObject<span style="color:#666">.</span><span style="color:#7d9029">put</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;rtl&#34;</span><span style="color:#666">,</span> UI<span style="color:#666">.</span><span style="color:#7d9029">f</span><span style="color:#666">());</span>
</span></span><span style="display:flex;"><span>    jSONObject<span style="color:#666">.</span><span style="color:#7d9029">put</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;lng&#34;</span><span style="color:#666">,</span> Locale<span style="color:#666">.</span><span style="color:#7d9029">getDefault</span><span style="color:#666">().</span><span style="color:#7d9029">getDisplayLanguage</span><span style="color:#666">());</span>
</span></span><span style="display:flex;"><span>    jSONObject<span style="color:#666">.</span><span style="color:#7d9029">put</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;abi&#34;</span><span style="color:#666">,</span> UI<span style="color:#666">.</span><span style="color:#7d9029">a</span><span style="color:#666">());</span>
</span></span><span style="display:flex;"><span>    jSONObject<span style="color:#666">.</span><span style="color:#7d9029">put</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;bar&#34;</span><span style="color:#666">,</span> LayoutInflater$Factory2o<span style="color:#666">.</span><span style="color:#7d9029">i</span><span style="color:#666">.</span><span style="color:#7d9029">e</span><span style="color:#666">(</span>context<span style="color:#666">));</span>
</span></span><span style="display:flex;"><span>    jSONObject<span style="color:#666">.</span><span style="color:#7d9029">put</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;mod&#34;</span><span style="color:#666">,</span> Build<span style="color:#666">.</span><span style="color:#7d9029">MODEL</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>    String str <span style="color:#666">=</span> Build<span style="color:#666">.</span><span style="color:#7d9029">VERSION</span><span style="color:#666">.</span><span style="color:#7d9029">RELEASE</span><span style="color:#666">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#666">}</span>
</span></span><span style="display:flex;"><span><span style="color:#666">}</span>
</span></span></code></pre></div><p>You can find the whole Jadx <em>plugin</em> on Github: <a href="https://github.com/romainthomas/pgsharp/blob/9addafbb6672571d2b7fbba43899f662c21aac8e/jadx/PGSharpStrings.java">PGSharpStrings.java</a></p>
<hr width="50%" />
<h2 id="cheat-mechanisms"><a href="#toc"><i class='fas fa-angle-up'></i>  Cheat Mechanisms</a></h2>
<p>One <del>disruptive</del> feature of PGSharp is that it does not require a rooted device. Until recently,
most of the PokemonGO cheating apps required a jailbroken or a rooted device which raises a barrier
for people who are not familiar with rooting.</p>
<blockquote>
<p>But wait, how <em>hell</em> they do that?</p>
</blockquote>
<p>The structure of the PGSharp APK is <strong>very</strong> close to the genuine PokemonGO
application, which leads identifying which parts of the game have been tampered with.</p>
<p>A naive comparison (cf. <a href="https://github.com/romainthomas/pgsharp/blob/9addafbb6672571d2b7fbba43899f662c21aac8e/zip_diff.py">zip_diff.py</a>) raises mismatches on the following files:</p>
<table>
<thead>
<tr>
<th style="text-align:left">File</th>
<th style="text-align:left">Size in PGSharp</th>
<th style="text-align:left">Size in PGO</th>
<th style="text-align:left">Delta</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">classes.dex</td>
<td style="text-align:left">9057844</td>
<td style="text-align:left">8953000</td>
<td style="text-align:left">+1.17%</td>
</tr>
<tr>
<td style="text-align:left">classes2.dex</td>
<td style="text-align:left">7131864</td>
<td style="text-align:left">7107296</td>
<td style="text-align:left">+0.34%</td>
</tr>
<tr>
<td style="text-align:left">lib/arm64-v8a/libmain.so</td>
<td style="text-align:left">21278480</td>
<td style="text-align:left">6424</td>
<td style="text-align:left">+331134%</td>
</tr>
<tr>
<td style="text-align:left">META-INF/MANIFEST.MF</td>
<td style="text-align:left">351045</td>
<td style="text-align:left">355533</td>
<td style="text-align:left">-1.26%</td>
</tr>
</tbody>
</table>
<p>The high level of similarity between the two applications, associated with a different signature
confirms that PGSharp repackaged the original application.</p>
<h4 id="dex-files-diff"><a href="#toc"><i class='fas fa-angle-up'></i>  DEX Files Comparison</a></h4>
<p>To figure out which parts of the DEX files have been modified, we can use LIEF (yes, LIEF can <u><b>read</b></u> the DEX format).
Basically, the idea is to check which method(s) has a bytecode whose size is different from the real PokemonGO
application:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">import</span> <span style="color:#00f;font-weight:bold">zipfile</span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">import</span> <span style="color:#00f;font-weight:bold">lief</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">with</span> zipfile<span style="color:#666">.</span>ZipFile(CHEAT_FILE) <span style="color:#008000;font-weight:bold">as</span> zip_file:
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">with</span> zip_file<span style="color:#666">.</span>open(target) <span style="color:#008000;font-weight:bold">as</span> f:
</span></span><span style="display:flex;"><span>        hela_dex <span style="color:#666">=</span> f<span style="color:#666">.</span>read()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">with</span> zipfile<span style="color:#666">.</span>ZipFile(ORIG_FILE) <span style="color:#008000;font-weight:bold">as</span> zip_file:
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">with</span> zip_file<span style="color:#666">.</span>open(target) <span style="color:#008000;font-weight:bold">as</span> f:
</span></span><span style="display:flex;"><span>        pgo_dex <span style="color:#666">=</span> f<span style="color:#666">.</span>read()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>hela_dex <span style="color:#666">=</span> lief<span style="color:#666">.</span>DEX<span style="color:#666">.</span>parse(<span style="color:#008000">list</span>(hela_dex))
</span></span><span style="display:flex;"><span>pgo_dex  <span style="color:#666">=</span> lief<span style="color:#666">.</span>DEX<span style="color:#666">.</span>parse(<span style="color:#008000">list</span>(pgo_dex))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>hela <span style="color:#666">=</span> {<span style="color:#ba2121">f</span><span style="color:#ba2121">&#34;</span><span style="color:#b68;font-weight:bold">{</span>m<span style="color:#666">.</span>cls<span style="color:#666">.</span>pretty_name<span style="color:#b68;font-weight:bold">}</span><span style="color:#ba2121">.</span><span style="color:#b68;font-weight:bold">{</span>m<span style="color:#666">.</span>name<span style="color:#b68;font-weight:bold">}</span><span style="color:#ba2121">.</span><span style="color:#b68;font-weight:bold">{</span>m<span style="color:#666">.</span>prototype<span style="color:#b68;font-weight:bold">!s}</span><span style="color:#ba2121">&#34;</span>: <span style="color:#008000">len</span>(m<span style="color:#666">.</span>bytecode) \
</span></span><span style="display:flex;"><span>          <span style="color:#008000;font-weight:bold">for</span> m <span style="color:#a2f;font-weight:bold">in</span> hela_dex<span style="color:#666">.</span>methods}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pgo  <span style="color:#666">=</span> {<span style="color:#ba2121">f</span><span style="color:#ba2121">&#34;</span><span style="color:#b68;font-weight:bold">{</span>m<span style="color:#666">.</span>cls<span style="color:#666">.</span>pretty_name<span style="color:#b68;font-weight:bold">}</span><span style="color:#ba2121">.</span><span style="color:#b68;font-weight:bold">{</span>m<span style="color:#666">.</span>name<span style="color:#b68;font-weight:bold">}</span><span style="color:#ba2121">.</span><span style="color:#b68;font-weight:bold">{</span>m<span style="color:#666">.</span>prototype<span style="color:#b68;font-weight:bold">!s}</span><span style="color:#ba2121">&#34;</span>: <span style="color:#008000">len</span>(m<span style="color:#666">.</span>bytecode) \
</span></span><span style="display:flex;"><span>          <span style="color:#008000;font-weight:bold">for</span> m <span style="color:#a2f;font-weight:bold">in</span> pgo_dex<span style="color:#666">.</span>methods}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">for</span> k, size_hela <span style="color:#a2f;font-weight:bold">in</span> hela<span style="color:#666">.</span>items():
</span></span><span style="display:flex;"><span>    size_pgo <span style="color:#666">=</span> pgo[k]
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">if</span> size_pgo <span style="color:#666">!=</span> size_hela:
</span></span><span style="display:flex;"><span>        <span style="color:#008000">print</span>(<span style="color:#ba2121">f</span><span style="color:#ba2121">&#34;Mismatch: </span><span style="color:#b68;font-weight:bold">{</span>k<span style="color:#b68;font-weight:bold">}</span><span style="color:#ba2121">&#34;</span>)
</span></span></code></pre></div><p>By running this script on <code>classes.dex</code>, we don&rsquo;t find any difference.
Actually, the PGSharp authors tried to prevent <em>diffing</em> by changing the line number attribute of the DEX classes.
If we try to diff the two applications from the output of apktool or Jadx, we get a lot of noise as the line number is
used in the output. On the other hand, the size bytecode for this kind of repackaging is suitable<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>Running the same script on <code>classes2.dex</code> raises the following mismatches:</p>
<ul>
<li><code>holoholo.libholoholo.unity.UnityMainActivity.onActivityResult</code></li>
<li><code>holoholo.nativelib.Library.&lt;clinit&gt;</code></li>
</ul>
<p>In <code>UnityMainActivity.onActivityResult</code>, they changed this piece of code:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">public</span> <span style="color:#b00040">void</span> <span style="color:#00f">onActivityResult</span><span style="color:#666">(</span><span style="color:#b00040">int</span> i<span style="color:#666">,</span> <span style="color:#b00040">int</span> i2<span style="color:#666">,</span> Intent intent<span style="color:#666">)</span> <span style="color:#666">{</span>
</span></span><span style="display:flex;"><span>  UnityCallbackInfo unityCallbackInfo <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">this</span><span style="color:#666">.</span><span style="color:#7d9029">activityCallbacks</span><span style="color:#666">.</span><span style="color:#7d9029">get</span><span style="color:#666">(</span>Integer<span style="color:#666">.</span><span style="color:#7d9029">valueOf</span><span style="color:#666">(</span>i<span style="color:#666">));</span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">if</span> <span style="color:#666">(</span>unityCallbackInfo <span style="color:#666">!=</span> <span style="color:#008000;font-weight:bold">null</span><span style="color:#666">)</span> <span style="color:#666">{</span>
</span></span><span style="display:flex;"><span>    UnityPlayer<span style="color:#666">.</span><span style="color:#7d9029">UnitySendMessage</span><span style="color:#666">(</span>unityCallbackInfo<span style="color:#666">.</span><span style="color:#7d9029">mGameObjectName</span><span style="color:#666">,</span>
</span></span><span style="display:flex;"><span>                                 unityCallbackInfo<span style="color:#666">.</span><span style="color:#7d9029">mMethodName</span><span style="color:#666">,</span>
</span></span><span style="display:flex;"><span>                                 String<span style="color:#666">.</span><span style="color:#7d9029">valueOf</span><span style="color:#666">(</span>i2<span style="color:#666">));</span>
</span></span><span style="display:flex;"><span>  <span style="color:#666">}</span> <span style="color:#008000;font-weight:bold">else</span> <span style="color:#666">{</span>
</span></span><span style="display:flex;"><span>    Client<span style="color:#666">.</span><span style="color:#7d9029">handleActivityResult</span><span style="color:#666">(</span>i<span style="color:#666">,</span> intent<span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#666">}</span>
</span></span><span style="display:flex;"><span><span style="color:#666">}</span>
</span></span></code></pre></div><p>into:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">public</span> <span style="color:#b00040">void</span> <span style="color:#00f">onActivityResult</span><span style="color:#666">(</span><span style="color:#b00040">int</span> i<span style="color:#666">,</span> <span style="color:#b00040">int</span> i2<span style="color:#666">,</span> Intent intent<span style="color:#666">)</span> <span style="color:#666">{</span>
</span></span><span style="display:flex;"><span>  UnityCallbackInfo unityCallbackInfo <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">this</span><span style="color:#666">.</span><span style="color:#7d9029">activityCallbacks</span><span style="color:#666">.</span><span style="color:#7d9029">get</span><span style="color:#666">(</span>Integer<span style="color:#666">.</span><span style="color:#7d9029">valueOf</span><span style="color:#666">(</span>i<span style="color:#666">));</span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">if</span> <span style="color:#666">(</span>unityCallbackInfo <span style="color:#666">!=</span> <span style="color:#008000;font-weight:bold">null</span><span style="color:#666">)</span> <span style="color:#666">{</span>
</span></span><span style="display:flex;"><span>      String mGameObjectName <span style="color:#666">=</span> unityCallbackInfo<span style="color:#666">.</span><span style="color:#7d9029">mGameObjectName</span><span style="color:#666">;</span>
</span></span><span style="display:flex;"><span>      UnityPlayer<span style="color:#666">.</span><span style="color:#7d9029">UnitySendMessage</span><span style="color:#666">(</span>mGameObjectName<span style="color:#666">,</span> unityCallbackInfo<span style="color:#666">.</span><span style="color:#7d9029">mMethodName</span><span style="color:#666">,</span> <span style="color:#ba2121">&#34;HL.PL&#34;</span><span style="color:#666">.</span><span style="color:#7d9029">equals</span><span style="color:#666">(</span>mGameObjectName<span style="color:#666">)</span> <span style="color:#666">?</span> intent <span style="color:#666">==</span> <span style="color:#008000;font-weight:bold">null</span> <span style="color:#666">?</span> <span style="color:#ba2121">&#34;&#34;</span> <span style="color:#666">:</span> intent<span style="color:#666">.</span><span style="color:#7d9029">getData</span><span style="color:#666">().</span><span style="color:#7d9029">toString</span><span style="color:#666">()</span> <span style="color:#666">:</span> String<span style="color:#666">.</span><span style="color:#7d9029">valueOf</span><span style="color:#666">(</span>i2<span style="color:#666">));</span>
</span></span><span style="display:flex;"><span>      <span style="color:#008000;font-weight:bold">return</span><span style="color:#666">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#666">}</span>
</span></span><span style="display:flex;"><span>  Client<span style="color:#666">.</span><span style="color:#7d9029">handleActivityResult</span><span style="color:#666">(</span>i<span style="color:#666">,</span> intent<span style="color:#666">);</span>
</span></span><span style="display:flex;"><span><span style="color:#666">}</span>
</span></span></code></pre></div><p>While in the static constructor of the <code>Library</code> class, they force the loading of <b class="red">libmain.so</b>:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">static</span> <span style="color:#666">{</span>
</span></span><span style="display:flex;"><span>  System<span style="color:#666">.</span><span style="color:#7d9029">loadLibrary</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;main&#34;</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>  System<span style="color:#666">.</span><span style="color:#7d9029">loadLibrary</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;holoholo&#34;</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span><span style="color:#666">}</span>
</span></span></code></pre></div><p>Now, let&rsquo;s look at <b class="red">libmain.so</b></p>
<h4 id="libmain"><a href="#toc"><i class='fas fa-angle-up'></i>  libmain.so</a></h4>
<p>Compared to the original PokemonGO APK, <b class="red">libmain.so</b> in PGSharp is substantially larger. Moreover,
the ELF metadata leaks the original file name of the file:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> readelf -d libmain.so
</span></span><span style="display:flex;"><span><span style="color:#888">...
</span></span></span><span style="display:flex;"><span><span style="color:#888">0x000000000000000e (SONAME)             Library soname: [libhela.so]
</span></span></span><span style="display:flex;"><span><span style="color:#888">...
</span></span></span></code></pre></div><p>During the analysis of PGSharp, we find references to <a href="https://en.wikipedia.org/wiki/Hela_(comics)">Hela</a>
in different places, like the package name
of the dynamically-loaded APK: <code>me.underworld.helaplugin</code>.</p>
<p>Originally, the purpose of this library is to initialize some parts of the Unity engine but PGSharp
uses it to load its main payload.</p>
<p>In the cheating app, <b class="red">libmain.so</b> is responsible for:</p>
<ol>
<li>Initializing the Lua VM</li>
<li>Implementing Lua native C functions</li>
<li>Implementing JNI functions</li>
<li>Calling the Lua scripts</li>
</ol>
<p><b class="red">libmain.so</b> exposes <code>JNI_OnLoad</code> which is used as an entrypoint
to perform the actions listed above.</p>
<p>The JNI functions don&rsquo;t have a meaningful name but thanks to their callsites, we can figure out their purpose:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Description</th>
<th style="text-align:left">Rename</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">NRL</td>
<td style="text-align:left">Trigger Lua function from Java</td>
<td style="text-align:left">NativeRunLua</td>
</tr>
<tr>
<td style="text-align:left">NSMTC</td>
<td style="text-align:left">Trigger PGSharp Action</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">NOHRB</td>
<td style="text-align:left">OkHtttp callback</td>
<td style="text-align:left">NativeOkHttpResponseByte</td>
</tr>
<tr>
<td style="text-align:left">NOHR</td>
<td style="text-align:left">OkHtttp callback</td>
<td style="text-align:left">NativeOkHttpResponse</td>
</tr>
<tr>
<td style="text-align:left">NOHF</td>
<td style="text-align:left">OkHtttp callback</td>
<td style="text-align:left">NativeOkHttpFailure</td>
</tr>
<tr>
<td style="text-align:left">NIOS</td>
<td style="text-align:left">Google Signing?</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">NIOR</td>
<td style="text-align:left"><em>Seems not used</em></td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">NOT</td>
<td style="text-align:left">Perform periodic actions on Lua threads</td>
<td style="text-align:left">NativeOnTimer</td>
</tr>
<tr>
<td style="text-align:left">NIPE</td>
<td style="text-align:left">Related to PokemonGO Plus</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">NIOF</td>
<td style="text-align:left"><em>Seems to do nothing relevant</em></td>
<td style="text-align:left">-</td>
</tr>
</tbody>
</table>
<p>Similarly, for the Lua C closures, we get the following table:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Description</th>
<th style="text-align:left">Rename</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">callpgo</td>
<td style="text-align:left">Trigger Lua function from Java</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">add_unity_task</td>
<td style="text-align:left">Trigger PGSharp Action</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">initil2cppbase</td>
<td style="text-align:left">OkHtttp callback</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">initil2cpphooks</td>
<td style="text-align:left">OkHtttp callback</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">initil2cppmethods</td>
<td style="text-align:left">OkHtttp callback</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">newjbytearray</td>
<td style="text-align:left">Create a <em>Java</em> bytearray from Lua</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">nar</td>
<td style="text-align:left">-</td>
<td style="text-align:left">nativeAttestResponse</td>
</tr>
<tr>
<td style="text-align:left">ngak</td>
<td style="text-align:left">-</td>
<td style="text-align:left">nativeGetApiKey</td>
</tr>
<tr>
<td style="text-align:left">findclass</td>
<td style="text-align:left">Find a <em>Java</em> class from Lua</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">gettid</td>
<td style="text-align:left">Get Thread ID</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">logi</td>
<td style="text-align:left">Log info (empty)</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">logv</td>
<td style="text-align:left">Log verbose (empty)</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">init_plugin_natives</td>
<td style="text-align:left">Init Java layer (JNI + <code>nUSlwbRIjReLowOP</code>)</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">uf_whitelist</td>
<td style="text-align:left"><em>empty</em></td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">uf_forbid</td>
<td style="text-align:left"><em>empty</em></td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">uf_redirect</td>
<td style="text-align:left"><em>empty</em></td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">fkinitjni</td>
<td style="text-align:left">Lua wrapper<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></td>
<td style="text-align:left">FakeInitJNI</td>
</tr>
<tr>
<td style="text-align:left">fknalp</td>
<td style="text-align:left">Lua wrapper<sup id="fnref1:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></td>
<td style="text-align:left">FakeNativeAddLocationProvider</td>
</tr>
<tr>
<td style="text-align:left">fkngsu</td>
<td style="text-align:left">Lua wrapper<sup id="fnref2:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></td>
<td style="text-align:left">FakeNativeGpsStatusUpdate</td>
</tr>
<tr>
<td style="text-align:left">fknlu</td>
<td style="text-align:left">Lua wrapper<sup id="fnref3:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></td>
<td style="text-align:left">FakeNativeLocationUpdate</td>
</tr>
<tr>
<td style="text-align:left">getPoisFromCache</td>
<td style="text-align:left">Related to the autowalk feature</td>
<td style="text-align:left">-</td>
</tr>
</tbody>
</table>
<div class="accordion accordion-flush" id="spoiler-5">
  <div class="accordion-item">
    <h2 class="accordion-header" id="flush-heading-spoiler-5">
      <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapse-spoiler-5" aria-expanded="true" aria-controls="flush-collapse-spoiler-5">
        <i class='fas fa-table'></i>&nbsp;&nbsp;NRL Actions</button></h2>
    <div id="flush-collapse-spoiler-5" class="accordion-collapse collapse" aria-labelledby="flush-heading-spoiler-5" data-bs-parent="#spoiler-5">
      <div class="accordion-body">
        <table>
<thead>
<tr>
<th style="text-align:left">Action</th>
<th style="text-align:left">Event Task</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">plg.float.click</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">plg.float.remove</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">plg.map.tp</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">plg.setspeed</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">plg.randomwalk</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left">plg.enablespoof</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td style="text-align:left">plg.joystart</td>
</tr>
<tr>
<td style="text-align:left">8</td>
<td style="text-align:left">plg.joystop</td>
</tr>
<tr>
<td style="text-align:left">9</td>
<td style="text-align:left">plg.entergame</td>
</tr>
<tr>
<td style="text-align:left">10</td>
<td style="text-align:left">plg.pause</td>
</tr>
</tbody>
</table>

      </div>
    </div>
  </div>
</div>


<div class="alert alert-info" role="alert"  style="border: none !important; background-color: #FAFCFF">
  Long story short, PGSharp repackages the PokemonGO application and implements its payload in <b class="red">libmain.so</b>
</div>
<blockquote>
<p><em>But wait, since they repackage the application they have to re-sign the application and you won&rsquo;t tell me that PokemonGO does have
signature checks?</em></p>
</blockquote>
<center>
<p>And this is where the fun begins!</p>
<br />
</center>
<p>The functionalities of PGSharp heavily rely on hooking but not the hooking you might think of &hellip;</p>
<h3 id="signature-bypass"><a href="#toc"><i class='fas fa-angle-up'></i>  Signature Bypass</a></h3>
<p>As it is detailed in the next section, <b class="red">libmain.so</b> dynamically loads another APK. Within
this APK, and more precisely in the class <code>androidx.appcompat.app.AppCompatDelegateImpl</code><sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>, we can notice this method:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#408080;font-style:italic">/* renamed from: g */</span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">public</span> <span style="color:#008000;font-weight:bold">static</span> <span style="color:#b00040">void</span> <span style="color:#00f">proxifySignatureCheck</span><span style="color:#666">(</span>Context context<span style="color:#666">)</span> <span style="color:#666">{</span>
</span></span><span style="display:flex;"><span>  String packageName <span style="color:#666">=</span> context<span style="color:#666">.</span><span style="color:#7d9029">getPackageName</span><span style="color:#666">();</span>
</span></span><span style="display:flex;"><span>  Class<span style="color:#666">&lt;?&gt;</span> aThreadCls <span style="color:#666">=</span> Class<span style="color:#666">.</span><span style="color:#7d9029">forName</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;android.app.ActivityThread&#34;</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>  Object mCurrentActivityThread <span style="color:#666">=</span> aThreadCls<span style="color:#666">.</span><span style="color:#7d9029">getDeclaredMethod</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;currentActivityThread&#34;</span><span style="color:#666">,</span> <span style="color:#008000;font-weight:bold">new</span> Class<span style="color:#666">[</span>0<span style="color:#666">]).</span><span style="color:#7d9029">invoke</span><span style="color:#666">(</span><span style="color:#008000;font-weight:bold">null</span><span style="color:#666">,</span> <span style="color:#008000;font-weight:bold">new</span> Object<span style="color:#666">[</span>0<span style="color:#666">]);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  Field sPackageManager <span style="color:#666">=</span> aThreadCls<span style="color:#666">.</span><span style="color:#7d9029">getDeclaredField</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;sPackageManager&#34;</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>  sPackageManager<span style="color:#666">.</span><span style="color:#7d9029">setAccessible</span><span style="color:#666">(</span><span style="color:#008000;font-weight:bold">true</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  Object pm <span style="color:#666">=</span> sPackageManager<span style="color:#666">.</span><span style="color:#7d9029">get</span><span style="color:#666">(</span>mCurrentActivityThread<span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>  Class<span style="color:#666">&lt;?&gt;</span> IPackageManager <span style="color:#666">=</span> Class<span style="color:#666">.</span><span style="color:#7d9029">forName</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;android.content.pm.IPackageManager&#34;</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>  SignatureMock mock <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">new</span> SignatureMock<span style="color:#666">(</span>pm<span style="color:#666">,</span> <span style="color:#ba2121">&#34;30820 [ ... ] aa001f55&#34;</span><span style="color:#666">,</span> packageName<span style="color:#666">)</span>
</span></span><span style="display:flex;"><span>  Object newProxyInstance <span style="color:#666">=</span> Proxy<span style="color:#666">.</span><span style="color:#7d9029">newProxyInstance</span><span style="color:#666">(</span>IPackageManager<span style="color:#666">.</span><span style="color:#7d9029">getClassLoader</span><span style="color:#666">(),</span>
</span></span><span style="display:flex;"><span>                                                   <span style="color:#008000;font-weight:bold">new</span> Class<span style="color:#666">[]{</span>IPackageManager<span style="color:#666">},</span> mock<span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>  sPackageManager<span style="color:#666">.</span><span style="color:#7d9029">set</span><span style="color:#666">(</span>mCurrentActivityThread<span style="color:#666">,</span> newProxyInstance<span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>  PackageManager packageManager <span style="color:#666">=</span> context<span style="color:#666">.</span><span style="color:#7d9029">getPackageManager</span><span style="color:#666">();</span>
</span></span><span style="display:flex;"><span>  Field mPM <span style="color:#666">=</span> packageManager<span style="color:#666">.</span><span style="color:#7d9029">getClass</span><span style="color:#666">().</span><span style="color:#7d9029">getDeclaredField</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;mPM&#34;</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>  mPM<span style="color:#666">.</span><span style="color:#7d9029">setAccessible</span><span style="color:#666">(</span><span style="color:#008000;font-weight:bold">true</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>  mPM<span style="color:#666">.</span><span style="color:#7d9029">set</span><span style="color:#666">(</span>packageManager<span style="color:#666">,</span> newProxyInstance<span style="color:#666">);</span>
</span></span><span style="display:flex;"><span><span style="color:#666">}</span>
</span></span></code></pre></div><p>This code leverages the Java <em>hooking</em> API, <a href="https://developer.android.com/reference/java/lang/reflect/Proxy">java.lang.reflect.Proxy</a>,
to <em>proxify</em> the Android PackageManager ¯\_(ツ)_/¯.</p>
<p>The <em>mocked</em> PackageManager looks like this:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">public</span> <span style="color:#00f">SignatureMock</span><span style="color:#666">(</span>Object pm<span style="color:#666">,</span> String originalSignature<span style="color:#666">,</span> String packageName<span style="color:#666">)</span> <span style="color:#666">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">this</span><span style="color:#666">.</span><span style="color:#7d9029">mPackageManager</span> <span style="color:#666">=</span> pm<span style="color:#666">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">this</span><span style="color:#666">.</span><span style="color:#7d9029">mOriginalSignature</span> <span style="color:#666">=</span> originalSignature<span style="color:#666">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">this</span><span style="color:#666">.</span><span style="color:#7d9029">mPackageName</span> <span style="color:#666">=</span> packageName<span style="color:#666">;</span>
</span></span><span style="display:flex;"><span><span style="color:#666">}</span>
</span></span><span style="display:flex;"><span><span style="color:#a2f">@Override</span> <span style="color:#408080;font-style:italic">// java.lang.reflect.InvocationHandler
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span><span style="color:#008000;font-weight:bold">public</span> Object <span style="color:#00f">invoke</span><span style="color:#666">(</span>Object obj<span style="color:#666">,</span> Method inMeth<span style="color:#666">,</span> Object<span style="color:#666">[]</span> args<span style="color:#666">)</span> <span style="color:#666">{</span>
</span></span><span style="display:flex;"><span>  PackageInfo packageInfo<span style="color:#666">;</span>
</span></span><span style="display:flex;"><span>  SigningInfo signingInfo<span style="color:#666">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic">// Hook getPackageInfo
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  <span style="color:#008000;font-weight:bold">if</span> <span style="color:#666">(</span><span style="color:#ba2121">&#34;getPackageInfo&#34;</span><span style="color:#666">.</span><span style="color:#7d9029">equals</span><span style="color:#666">(</span>inMeth<span style="color:#666">.</span><span style="color:#7d9029">getName</span><span style="color:#666">()))</span> <span style="color:#666">{</span>
</span></span><span style="display:flex;"><span>    String pkgName <span style="color:#666">=</span> <span style="color:#666">(</span>String<span style="color:#666">)</span> args<span style="color:#666">[</span>0<span style="color:#666">];</span>
</span></span><span style="display:flex;"><span>    <span style="color:#b00040">int</span> flags <span style="color:#666">=</span> <span style="color:#666">((</span>Integer<span style="color:#666">)</span> args<span style="color:#666">[</span>1<span style="color:#666">]).</span><span style="color:#7d9029">intValue</span><span style="color:#666">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic">// Handle both
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>    <span style="color:#408080;font-style:italic">// GET_SIGNATURES           (0x00000040) - Deprecated in API 28
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>    <span style="color:#408080;font-style:italic">// GET_SIGNING_CERTIFICATES (0x08000000)
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>    <span style="color:#008000;font-weight:bold">if</span> <span style="color:#666">((</span>flags <span style="color:#666">&amp;</span> PackageManager<span style="color:#666">.</span><span style="color:#7d9029">GET_SIGNATURES</span><span style="color:#666">)</span> <span style="color:#666">!=</span> 0 <span style="color:#666">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#008000;font-weight:bold">this</span><span style="color:#666">.</span><span style="color:#7d9029">mPackageName</span><span style="color:#666">.</span><span style="color:#7d9029">equals</span><span style="color:#666">(</span>pkgName<span style="color:#666">))</span> <span style="color:#666">{</span>
</span></span><span style="display:flex;"><span>      PackageInfo fakePkgInfo <span style="color:#666">=</span> <span style="color:#666">(</span>PackageInfo<span style="color:#666">)</span> inMeth<span style="color:#666">.</span><span style="color:#7d9029">invoke</span><span style="color:#666">(</span><span style="color:#008000;font-weight:bold">this</span><span style="color:#666">.</span><span style="color:#7d9029">mPackageManager</span><span style="color:#666">,</span> args<span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#408080;font-style:italic">// Fake the signature
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>      fakePkgInfo<span style="color:#666">.</span><span style="color:#7d9029">signatures</span><span style="color:#666">[</span>0<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">new</span> Signature<span style="color:#666">(</span><span style="color:#008000;font-weight:bold">this</span><span style="color:#666">.</span><span style="color:#7d9029">mOriginalSignature</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#008000;font-weight:bold">return</span> fakePkgInfo<span style="color:#666">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#666">}</span> <span style="color:#008000;font-weight:bold">else</span> <span style="color:#008000;font-weight:bold">if</span> <span style="color:#666">(</span>Build<span style="color:#666">.</span><span style="color:#7d9029">VERSION</span><span style="color:#666">.</span><span style="color:#7d9029">SDK_INT</span> <span style="color:#666">&gt;=</span> 28 <span style="color:#666">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>              <span style="color:#666">(</span>flags <span style="color:#666">&amp;</span> GET_SIGNING_CERTIFICATES<span style="color:#666">)</span> <span style="color:#666">!=</span> 0 <span style="color:#666">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>              <span style="color:#008000;font-weight:bold">this</span><span style="color:#666">.</span><span style="color:#7d9029">mPackageName</span><span style="color:#666">.</span><span style="color:#7d9029">equals</span><span style="color:#666">(</span>pkgName<span style="color:#666">)</span> <span style="color:#666">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>              <span style="color:#666">(</span>signingInfo <span style="color:#666">=</span> <span style="color:#666">(</span>packageInfo <span style="color:#666">=</span> <span style="color:#666">(</span>PackageInfo<span style="color:#666">)</span> method<span style="color:#666">.</span><span style="color:#7d9029">invoke</span><span style="color:#666">(</span><span style="color:#008000;font-weight:bold">this</span><span style="color:#666">.</span><span style="color:#7d9029">mPackageManager</span><span style="color:#666">,</span> args<span style="color:#666">)).</span><span style="color:#7d9029">signingInfo</span><span style="color:#666">)</span> <span style="color:#666">!=</span> <span style="color:#008000;font-weight:bold">null</span><span style="color:#666">)</span> <span style="color:#666">{</span>
</span></span><span style="display:flex;"><span>      Field FieldSigningDetails <span style="color:#666">=</span> signingInfo<span style="color:#666">.</span><span style="color:#7d9029">getClass</span><span style="color:#666">().</span><span style="color:#7d9029">getDeclaredField</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;mSigningDetails&#34;</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>      FieldSigningDetails<span style="color:#666">.</span><span style="color:#7d9029">setAccessible</span><span style="color:#666">(</span><span style="color:#008000;font-weight:bold">true</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>      Object mSigningDetails <span style="color:#666">=</span> FieldSigningD<span style="color:#666">.</span><span style="color:#7d9029">get</span><span style="color:#666">(</span>packageInfo<span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>      Signature<span style="color:#666">[]</span> fakeSigArray <span style="color:#666">=</span> <span style="color:#666">{</span><span style="color:#008000;font-weight:bold">new</span> Signature<span style="color:#666">(</span><span style="color:#008000;font-weight:bold">this</span><span style="color:#666">.</span><span style="color:#7d9029">mOriginalSignature</span><span style="color:#666">)};</span>
</span></span><span style="display:flex;"><span>      Field FieldSignatures <span style="color:#666">=</span> mSigningDetails<span style="color:#666">.</span><span style="color:#7d9029">getClass</span><span style="color:#666">().</span><span style="color:#7d9029">getDeclaredField</span><span style="color:#666">(</span><span style="color:#ba2121">&#34;signatures&#34;</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>      FieldSignatures<span style="color:#666">.</span><span style="color:#7d9029">setAccessible</span><span style="color:#666">(</span><span style="color:#008000;font-weight:bold">true</span><span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>      FieldSignatures<span style="color:#666">.</span><span style="color:#7d9029">set</span><span style="color:#666">(</span>FieldSigningDetails<span style="color:#666">,</span> fakeSigArray<span style="color:#666">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#008000;font-weight:bold">return</span> packageInfo<span style="color:#666">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#666">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#666">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span> inMeth<span style="color:#666">.</span><span style="color:#7d9029">invoke</span><span style="color:#666">(</span><span style="color:#008000;font-weight:bold">this</span><span style="color:#666">.</span><span style="color:#7d9029">mPackageManager</span><span style="color:#666">,</span> args<span style="color:#666">);</span>
</span></span><span style="display:flex;"><span><span style="color:#666">}</span>
</span></span></code></pre></div><p>In doing so, when PokemonGO accesses the PackageManager, it gets a <em>mocked</em> version of the PackageManager
that is <strong>controlled</strong> by PGSharp.
PGSharp changes the behavior of <code>getPackageInfo()</code> to return the real PokemonGO signature instead of its own.</p>
<p>The following figure outlines the process:</p>
<p><img src="mock_signature.png" alt="Mock Android PackageManager"></p>
<h3 id="dynamic-apk-loading"><a href="#toc"><i class='fas fa-angle-up'></i>  Dynamic APK Loading</a></h3>
<p>In the Lua script <code>plugin.lua</code>, PGSharp defines an <code>init</code> function that performs the following
actions:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-lua" data-lang="lua"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">local</span> filesdir     <span style="color:#666">=</span> (ref.call_method)(runtime.app, <span style="color:#ba2121">&#34;getFilesDir&#34;</span>, <span style="color:#ba2121">&#34;()Ljava/io/File;&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">local</span> filesdirpath <span style="color:#666">=</span> (ref.call_method)(filesdir, <span style="color:#ba2121">&#34;getAbsolutePath&#34;</span>, <span style="color:#ba2121">&#34;()Ljava/lang/String;&#34;</span>)
</span></span><span style="display:flex;"><span>u_plugin_path      <span style="color:#666">=</span> (gh.ipf)(loadjstring(filesdirpath))
</span></span></code></pre></div><p><code>ipf</code> is a function that takes the output of <code>cxt.getFilesDir().getAbsolutePath()</code> as parameter,
in other words, the path of the <em>files</em> directory of PokemonGO: <code>/data/data/com.nianticlabs.pokemongo/files</code>,
and returns a <code>u_plugin_path</code> as a Lua string.</p>
<p>If we look for <code>ipf</code> in the Lua scripts, we don&rsquo;t find any implementation. Actually, this
function is referenced in the <code>gamehelper()</code> function of <b class="red">libmain.so</b> where it is
linked as follows:</p>
<p><img src="ipf.png" alt="Lua registering IPF"></p>
<p>So <code>ipf</code> is a native Lua C function registered with <code>lua_pushcclosure</code>.</p>
<p>Once we identified the location of <code>ipf</code>, the logic of the function can be summarized with this pseudo code:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// file_dir: /data/user/0/com.nianticlabs.pokemongo/files
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span><span style="color:#b00040">void</span> <span style="color:#00f">ipf</span>(lua_State <span style="color:#666">*</span>L) {
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic">// std::string ctor @0xA4F00
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  std<span style="color:#666">::</span>string outpath <span style="color:#666">=</span> lua_tostring(L, <span style="color:#666">-</span><span style="color:#666">1</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic">// std::string::append @0xD868C
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  outpath.append(<span style="color:#ba2121">&#34;/&#34;</span>);
</span></span><span style="display:flex;"><span>  outpath.append(<span style="color:#ba2121">&#34;LZZqoKpt.plg&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  FILE<span style="color:#666">*</span> fout <span style="color:#666">=</span> fopen(outpath.c_str(), <span style="color:#ba2121">&#34;wb&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic">// @0x634424
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  extract_apk_file(FILE<span style="color:#666">*</span> fout) {
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">for</span> (<span style="color:#a0a000">chunk</span> : chunks) {
</span></span><span style="display:flex;"><span>      decode(chunk, <span style="color:#666">0x2710</span>);
</span></span><span style="display:flex;"><span>      fwrite(chunk, <span style="color:#666">0x2710</span>, <span style="color:#666">1</span>, fout);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  fclose(fout);
</span></span><span style="display:flex;"><span>  lua_pushlstring(L, outpath.c_str(), outpath.size());
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#b00040">void</span> <span style="color:#00f">inline_decode</span>(<span style="color:#b00040">uint8_t</span><span style="color:#666">*</span> data, size_t size) {
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">for</span> (size_t i <span style="color:#666">=</span> <span style="color:#666">0</span>; i <span style="color:#666">&lt;</span> size; <span style="color:#666">++</span>i) {
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic">// Byte decoding
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>    data[i] <span style="color:#666">=</span> (<span style="color:#666">0xb3</span> <span style="color:#666">&amp;</span> <span style="color:#666">~</span>data[i]) <span style="color:#666">|</span> (data[i] <span style="color:#666">&amp;</span> <span style="color:#666">0x4c</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="alert alert-info" role="alert"  style="border: none !important; background-color: #FAFCFF">
  Since the decoded file is written in the <code>/data</code> partition,
one can also pull the file from the device (this file is not removed when PGSharp stops running).
</div>
<p>The written file, <code>LZZqoKpt.plg</code>, is actually an APK that is loaded with <code>PathClassLoader</code> in the Lua script:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-lua" data-lang="lua"><span style="display:flex;"><span>u_classloader <span style="color:#666">=</span> (ref.new_instance)(<span style="color:#ba2121">&#34;dalvik/system/PathClassLoader&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#ba2121">&#34;(Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;)V&#34;</span>,
</span></span><span style="display:flex;"><span>                (env.NewStringUTF)(u_plugin_path),
</span></span><span style="display:flex;"><span>                nativeLibraryDir,
</span></span><span style="display:flex;"><span>                gh.pgo_classloader);
</span></span></code></pre></div><div class="accordion accordion-flush" id="spoiler-8">
  <div class="accordion-item">
    <h2 class="accordion-header" id="flush-heading-spoiler-8">
      <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapse-spoiler-8" aria-expanded="true" aria-controls="flush-collapse-spoiler-8">
        <i class='fas fa-file-code'></i>&nbsp;&nbsp;Rest of the function</button></h2>
    <div id="flush-collapse-spoiler-8" class="accordion-collapse collapse" aria-labelledby="flush-heading-spoiler-8" data-bs-parent="#spoiler-8">
      <div class="accordion-body">
        <div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-lua" data-lang="lua"><span style="display:flex;"><span>u_plugin_cls                <span style="color:#666">=</span> findclass(<span style="color:#ba2121">&#34;me/underworld/helaplugin/PL&#34;</span>, u_classloader)
</span></span><span style="display:flex;"><span>u_global_cls                <span style="color:#666">=</span> findclass(<span style="color:#ba2121">&#34;me/underworld/helaplugin/GL&#34;</span>, u_classloader)
</span></span><span style="display:flex;"><span>u_runnable_cls              <span style="color:#666">=</span> findclass(<span style="color:#ba2121">&#34;me/underworld/helaplugin/HR&#34;</span>, u_classloader)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>u_global_cls                <span style="color:#666">=</span> (env.NewGlobalRef)(u_global_cls)
</span></span><span style="display:flex;"><span>u_plugin_cls                <span style="color:#666">=</span> (env.NewGlobalRef)(u_plugin_cls)
</span></span><span style="display:flex;"><span>u_classloader               <span style="color:#666">=</span> (env.NewGlobalRef)(u_classloader)
</span></span><span style="display:flex;"><span>u_runnable_cls              <span style="color:#666">=</span> (env.NewGlobalRef)(u_runnable_cls)
</span></span><span style="display:flex;"><span>u_runnable_init_mid         <span style="color:#666">=</span> (env.GetMethodID)(u_runnable_cls, <span style="color:#ba2121">&#34;&lt;init&gt;&#34;</span>, <span style="color:#ba2121">&#34;(ILjava/lang/Object;)V&#34;</span>)
</span></span><span style="display:flex;"><span>u_geturl_mid                <span style="color:#666">=</span> (env.GetStaticMethodID)(u_plugin_cls, <span style="color:#ba2121">&#34;GU&#34;</span>, <span style="color:#ba2121">&#34;(Ljava/lang/String;Ljava/lang/String;)I&#34;</span>)
</span></span><span style="display:flex;"><span>u_postString_mid            <span style="color:#666">=</span> (env.GetStaticMethodID)(u_plugin_cls, <span style="color:#ba2121">&#34;vtEdUZmWQYAgtGWs&#34;</span>, <span style="color:#ba2121">&#34;(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I&#34;</span>)
</span></span><span style="display:flex;"><span>u_postBytes_mid             <span style="color:#666">=</span> (env.GetStaticMethodID)(u_plugin_cls, <span style="color:#ba2121">&#34;BbTwaTXurePBxTDt&#34;</span>, <span style="color:#ba2121">&#34;(Ljava/lang/String;[BLjava/lang/String;)I&#34;</span>)
</span></span><span style="display:flex;"><span>u_onLuaMessage_mid          <span style="color:#666">=</span> (env.GetStaticMethodID)(u_plugin_cls, <span style="color:#ba2121">&#34;tFAxNZCNHOXBTYGM&#34;</span>, <span style="color:#ba2121">&#34;(ILjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;&#34;</span>)
</span></span><span style="display:flex;"><span>u_global_updatelocation_mid <span style="color:#666">=</span> (env.GetStaticMethodID)(u_global_cls, <span style="color:#ba2121">&#34;ul&#34;</span>, <span style="color:#ba2121">&#34;(DD)V&#34;</span>)
</span></span><span style="display:flex;"><span>u_global_savelocation_mid   <span style="color:#666">=</span> (env.GetStaticMethodID)(u_global_cls, <span style="color:#ba2121">&#34;sl&#34;</span>, <span style="color:#ba2121">&#34;()V&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(gh.init_plugin_natives)(u_classloader)
</span></span><span style="display:flex;"><span>(ref.call_static_method)(u_plugin_cls,
</span></span><span style="display:flex;"><span>                         <span style="color:#ba2121">&#34;rDymrMuxPIlIESFe&#34;</span>, <span style="color:#ba2121">&#34;(Landroid/app/Application;Ljava/lang/String;I)V&#34;</span>,
</span></span><span style="display:flex;"><span>                         runtime.app, (env.NewStringUTF)(u_plugin_path), runtime.log_level)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">local</span> cls              <span style="color:#666">=</span> (gh.findclass)(<span style="color:#ba2121">&#34;me.underworld.helaplugin.HLVM&#34;</span>, u_classloader)
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">local</span> hlviewmanagerref <span style="color:#666">=</span> (ref.call_static_method)(cls, <span style="color:#ba2121">&#34;getInstance&#34;</span>, <span style="color:#ba2121">&#34;()Lme/underworld/helaplugin/HLVM;&#34;</span>)
</span></span><span style="display:flex;"><span>u_sm_mid               <span style="color:#666">=</span> (env.GetMethodID)(cls, <span style="color:#ba2121">&#34;SM&#34;</span>, <span style="color:#ba2121">&#34;(Ljava/lang/String;I)V&#34;</span>)
</span></span><span style="display:flex;"><span>u_setviewshow_mid      <span style="color:#666">=</span> (env.GetMethodID)(cls, <span style="color:#ba2121">&#34;SVC&#34;</span>, <span style="color:#ba2121">&#34;(Ljava/lang/String;Z)V&#34;</span>)
</span></span><span style="display:flex;"><span>u_hlviewmanager        <span style="color:#666">=</span> (env.NewGlobalRef)(hlviewmanagerref)
</span></span><span style="display:flex;"><span>plugin.classloader     <span style="color:#666">=</span> u_classloader
</span></span></code></pre></div>
      </div>
    </div>
  </div>
</div>


<h3 id="gps-spoofing"><a href="#toc"><i class='fas fa-angle-up'></i>  GPS Spoofing</a></h3>
<p>Since PokemonGO heavily relies on the user&rsquo;s location, the must-have feature for the PokemonGO cheat engines
is to be able to spoof the GPS location.</p>
<p>The genuine PokemonGO application manages the user location through the Java class <code>NianticLocationManager</code>,
which exposes three natives functions:</p>
<ol>
<li><span class="blue">nativeAddLocationProviders(Context ctx)</span></li>
<li><span class="blue">nativeGpsStatusUpdate(int i, SatelliteInfo[] info)</span></li>
<li><span class="blue">nativeLocationUpdate(String providerName, Location location, &hellip;)</span></li>
</ol>
<p><code>nativeAddLocationProviders</code> aims at instantiating the different location providers as Java object:</p>
<ol>
<li>FusedLocationProvider</li>
<li>GnssLocationProvider</li>
<li>GpsLocationProvider</li>
<li>NetworkLocationProvider</li>
</ol>
<p>while <code>nativeLocationUpdate</code> and <code>nativeGpsStatusUpdate</code> are a kind of callbacks triggered when there is
a new user location to consider.</p>
<p>The implementation of <code>nativeLocationUpdate</code> checks natively if the location object given in the second parameter
is <em>mocked</em> (cf. <a href="https://developer.android.com/reference/android/location/Location#isMock()">isMock()</a> or <a href="https://developer.android.com/reference/android/location/Location#isFromMockProvider()">isFromMockProvider()</a>).</p>
<p>Actually PGSharp hooks two of these three native methods:</p>
<ol>
<li><span class="red"><i class="fas fa-cogs"> </i>nativeAddLocationProviders(Context ctx)</span></li>
<li><span class="blue">nativeGpsStatusUpdate(int i, SatelliteInfo[] info)</span></li>
<li><span class="red"><i class="fas fa-cogs"> </i>nativeLocationUpdate(String provider, Location location, &hellip;)</span></li>
</ol>
<p>By hooking <code>nativeLocationUpdate</code>, they can modify the value of the <code>Location</code> parameter to change
the real location.</p>
<blockquote>
<p><em>&ldquo;You assert that PGSharp hooks <code>nativeLocationUpdate</code> and <code>nativeAddLocationProviders</code> in
<code>libNianticLabsPlugin.so</code>, but this library is protected by a commercial obfuscator
which has anti-hooks features. How do they hook these functions?&rdquo;</em></p>
</blockquote>
<p>And this is where the fun reaches another level 🚀</p>
<h3 id="jnienv-proxifier"><a href="#toc"><i class='fas fa-angle-up'></i>  JNIEnv Proxifier</a></h3>
<p>I would assume that <code>nativeLocationUpdate</code> and <code>nativeAddLocationProviders</code> are critical
enough to be protected against hooking. It turns out that PGSharp embeds a hooking framework to hook
Unity functions, but they don&rsquo;t use it on these functions.</p>
<center>
<p><b>
The authors of PGSharp found a subtle trick to circumvent the anti-hook protection.<br />
</b></p>
</center>
<p><code>nativeLocationUpdate</code> and <code>nativeAddLocationProviders</code> are JNI functions
that are <strong>dynamically</strong> registered by <code>Java_com_nianticlabs_nia_unity_UnityUtil_nativeInit</code>:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>Java_com_nianticlabs_nia_unity_UnityUtil_nativeInit(env, ...) {
</span></span><span style="display:flex;"><span>  env<span style="color:#666">-&gt;</span>RegisterNatives(...);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>env</code> parameter refers to the JNIEnv structure which is an array of function pointers:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">struct</span> <span style="color:#00f;font-weight:bold">JNINativeInterface</span> {
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  jclass      (<span style="color:#666">*</span>GetObjectClass)(JNIEnv<span style="color:#666">*</span>, jobject);
</span></span><span style="display:flex;"><span>  jboolean    (<span style="color:#666">*</span>IsInstanceOf)(JNIEnv<span style="color:#666">*</span>, jobject, jclass);
</span></span><span style="display:flex;"><span>  jmethodID   (<span style="color:#666">*</span>GetMethodID)(JNIEnv<span style="color:#666">*</span>, jclass, <span style="color:#008000;font-weight:bold">const</span> <span style="color:#b00040">char</span><span style="color:#666">*</span>, <span style="color:#008000;font-weight:bold">const</span> <span style="color:#b00040">char</span><span style="color:#666">*</span>);
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The values
of these pointers are defined by the implementation of the &ldquo;JVM&rdquo; which is, for Android, the <strong>A</strong>ndroid <strong>R</strong>un<strong>T</strong>ime (ART).</p>
<p>For instance, <code>FindClass</code> is actually a pointer
to <code>art::{CheckJNI, JNIImpl}::FindClass</code> located in <code>art/runtime/jni/{jni_internal, check_jni}.cc</code>:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">static</span> jclass <span style="color:#00f">FindClass</span>(JNIEnv<span style="color:#666">*</span> env, <span style="color:#008000;font-weight:bold">const</span> <span style="color:#b00040">char</span><span style="color:#666">*</span> name) {
</span></span><span style="display:flex;"><span>  Runtime<span style="color:#666">*</span> runtime <span style="color:#666">=</span> Runtime<span style="color:#666">::</span>Current();
</span></span><span style="display:flex;"><span>  ClassLinker<span style="color:#666">*</span> class_linker <span style="color:#666">=</span> runtime<span style="color:#666">-&gt;</span>GetClassLinker();
</span></span><span style="display:flex;"><span>  std<span style="color:#666">::</span>string descriptor(NormalizeJniClassDescriptor(name));
</span></span><span style="display:flex;"><span>  ScopedObjectAccess soa(env);
</span></span><span style="display:flex;"><span>  ObjPtr<span style="color:#666">&lt;</span>mirror<span style="color:#666">::</span>Class<span style="color:#666">&gt;</span> c <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">nullptr</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">if</span> (runtime<span style="color:#666">-&gt;</span>IsStarted()) {
</span></span><span style="display:flex;"><span>    StackHandleScope<span style="color:#666">&lt;</span><span style="color:#666">1</span><span style="color:#666">&gt;</span> hs(soa.Self());
</span></span><span style="display:flex;"><span>    Handle<span style="color:#666">&lt;</span>mirror<span style="color:#666">::</span>ClassLoader<span style="color:#666">&gt;</span> class_loader(hs.NewHandle(GetClassLoader<span style="color:#666">&lt;</span>kEnableIndexIds<span style="color:#666">&gt;</span>(soa)));
</span></span><span style="display:flex;"><span>    c <span style="color:#666">=</span> class_linker<span style="color:#666">-&gt;</span>FindClass(soa.Self(), descriptor.c_str(), class_loader);
</span></span><span style="display:flex;"><span>  } <span style="color:#008000;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>    c <span style="color:#666">=</span> class_linker<span style="color:#666">-&gt;</span>FindSystemClass(soa.Self(), descriptor.c_str());
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span> soa.AddLocalReference<span style="color:#666">&lt;</span>jclass<span style="color:#666">&gt;</span>(c);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>If we hook <code>Java_com_nianticlabs_nia_unity_UnityUtil_nativeInit</code> from the <strong>genuine</strong> PokemonGO,
and we check where the pointers of the <code>JNIEnv</code> structure point to, we get this kind of output:</p>
<p><img src="jni_ptr_clean.png" alt="Normal values of the JNI Pointers"></p>
<p>This output is consistent with what we said about the <em>JVM</em> and the runtime ART.
If we do the same check <strong>on PGSharp</strong>, we get this result:</p>
<p><img src="jni_ptr_cheat.png" alt="Modified values of the JNI Pointers"></p>
<p>As we can see, some pointers have been relocated to point in <b class="red">libmain.so</b>:</p>
<center>
<table>
<thead>
<tr>
<th style="text-align:left">JNI Function</th>
<th style="text-align:left">Offset in libmain.so (v1.33.0)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">GetMethodID</td>
<td style="text-align:left">0x14540c</td>
</tr>
<tr>
<td style="text-align:left">CallObjectMethodV</td>
<td style="text-align:left">0x145194</td>
</tr>
<tr>
<td style="text-align:left">CallVoidMethodV</td>
<td style="text-align:left">0x145040</td>
</tr>
<tr>
<td style="text-align:left">RegisterNatives</td>
<td style="text-align:left">0x1452f0</td>
</tr>
</tbody>
</table>
</center>
<p>It means that when <code>libNianticLabsPlugin.so</code> is calling one of the functions listed above,
the execution is forwarded to <b class="red">libmain.so</b> instead of <b class="green">libart.so</b>.</p>
<p><img src="jnienv_proxy.png" alt="JNIEnv Proxy"></p>
<p>PGSharp proxifies these functions for the following purposes:</p>
<p><strong>GetMethodID</strong></p>
<p>  To monitor:</p>
<ol>
<li>SafetyNetService.attest</li>
<li>SafetyNetService.cancel</li>
<li>NianticLocationManager.addLocationProvider</li>
</ol>
<p><strong>CallVoidMethodV</strong></p>
<p>  To monitor the parameters of:</p>
<ol>
<li>SafetyNetService.attest (to intercept the nonce)</li>
<li>SafetyNetService.cancel</li>
</ol>
<p><strong>RegisterNatives</strong></p>
<p>  Proxified to get, and potentially change, the effective location of the <br />
  <code>libNianticLabsPlugin.so</code> JNI functions:</p>
<ol>
<li>nativeAttestResponse</li>
<li>nativeGetApiKey</li>
<li>nativeAddLocationProviders</li>
<li>nativeLocationUpdate</li>
<li>initJni</li>
<li>nativeInjectEvent</li>
<li>nativeUnitySendMessage</li>
<li>nativeRender</li>
<li>nativeMuteMasterAudio</li>
</ol>
<p>By managing the function <code>JNIEnv::RegisterNatives</code>, they are able to change the value of <code>JNINativeMethod.fnPtr</code>,
such as when PokemonGO calls <code>nativeLocationUpdate</code>, it actually calls a function managed by PGSharp.</p>
<p>It results that JNI functions used by <code>libNianticLabsPlugin.so</code> have been <em>redefined</em>:</p>
<table>
<thead>
<tr>
<th style="text-align:left">JNI Function</th>
<th style="text-align:left">Location</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><b class="red">NianticLocationManager.nativeAddLocationProviders</b></td>
<td style="text-align:left"><b class="red">libmain.so!ea868</b></td>
</tr>
<tr>
<td style="text-align:left">NianticLocationManager.nativeGpsStatusUpdate</td>
<td style="text-align:left">libNianticLabsPlugin.so!bc508</td>
</tr>
<tr>
<td style="text-align:left"><b class="red">NianticLocationManager.nativeLocationUpdate</b></td>
<td style="text-align:left"><b class="red">libmain.so!ea8bc</b></td>
</tr>
<tr>
<td style="text-align:left">NLog.nativeDispatchLogMessage</td>
<td style="text-align:left">libNianticLabsPlugin.so!4beaa0</td>
</tr>
<tr>
<td style="text-align:left">NetworkConnectivity.nativeNotifyNetworkStateChanged</td>
<td style="text-align:left">libNianticLabsPlugin.so!6f8118</td>
</tr>
<tr>
<td style="text-align:left">NianticTrustManager.nativeCheckClientTrusted</td>
<td style="text-align:left">libNianticLabsPlugin.so!9b9cc</td>
</tr>
<tr>
<td style="text-align:left">NianticTrustManager.nativeCheckServerTrusted</td>
<td style="text-align:left">libNianticLabsPlugin.so!73b42c</td>
</tr>
<tr>
<td style="text-align:left">NianticTrustManager.nativeGetAcceptedIssuers</td>
<td style="text-align:left">libNianticLabsPlugin.so!6dc5c8</td>
</tr>
<tr>
<td style="text-align:left">WebsocketController.nativeOnDidClose</td>
<td style="text-align:left">libNianticLabsPlugin.so!6fcabc</td>
</tr>
<tr>
<td style="text-align:left">WebsocketController.nativeOnDidFail</td>
<td style="text-align:left">libNianticLabsPlugin.so!4a0d0c</td>
</tr>
<tr>
<td style="text-align:left">WebsocketController.nativeOnDidOpen</td>
<td style="text-align:left">libNianticLabsPlugin.so!5922b0</td>
</tr>
<tr>
<td style="text-align:left">WebsocketController.nativeOnDidReceiveData</td>
<td style="text-align:left">libNianticLabsPlugin.so!742fa8</td>
</tr>
<tr>
<td style="text-align:left">SafetyNetService.nativeAttestResponse</td>
<td style="text-align:left">libNianticLabsPlugin.so!5ea1b8</td>
</tr>
<tr>
<td style="text-align:left">SafetyNetService.nativeGetApiKey</td>
<td style="text-align:left">libNianticLabsPlugin.so!6bc60</td>
</tr>
<tr>
<td style="text-align:left">NianticSensorManager.nativeCompassUpdate</td>
<td style="text-align:left">libNianticLabsPlugin.so!4b9bc0</td>
</tr>
<tr>
<td style="text-align:left">NianticSensorManager.nativeSensorUpdate</td>
<td style="text-align:left">libNianticLabsPlugin.so!177c44</td>
</tr>
</tbody>
</table>
<h3 id="unity-hooks"><a href="#toc"><i class='fas fa-angle-up'></i>  Unity Hooks</a></h3>
<p>In addition to GPS spoofing, PGSharp provides other functionalities such as,
Pokemon feed, skip evolve animation &hellip;</p>
<p>In the genuine PokemonGO application, these functionalities are implemented in the Unity layer
that is <em>compiled</em> into <code>libil2cpp.so</code>.</p>
<p>To perform these functionalities, PGSharp hooks (hooking like Frida) some of these Unity functions.</p>
<p>They tried to hide<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> the underlying hooking framework used to perform these hooks, unfortunately they missed
to remove important strings:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> strings ./libmain.so|grep -i -E <span style="color:#ba2121">&#34;\w\+\.cc&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#888">E:/work/code/Hela/app/src/main/cpp/Dobby/source/InterceptRouting/Routing/FunctionInlineReplace/FunctionInlineReplaceExport.cc
</span></span></span><span style="display:flex;"><span><span style="color:#888">E:/work/code/Hela/app/src/main/cpp/Dobby/source/TrampolineBridge/Trampoline/arm64/trampoline-arm64.cc
</span></span></span><span style="display:flex;"><span><span style="color:#888">E:/work/code/Hela/app/src/main/cpp/Dobby/source/MemoryAllocator/MemoryArena.cc
</span></span></span><span style="display:flex;"><span><span style="color:#888">E:/work/code/Hela/app/src/main/cpp/Dobby/source/InstructionRelocation/arm64/ARM64InstructionRelocation.cc
</span></span></span><span style="display:flex;"><span><span style="color:#888">E:/work/code/Hela/app/src/main/cpp/Dobby/source/UserMode/PlatformUtil/Linux/ProcessRuntimeUtility.cc
</span></span></span><span style="display:flex;"><span><span style="color:#888">E:/work/code/Hela/app/src/main/cpp/Dobby/source/UserMode/UnifiedInterface/platform-posix.cc
</span></span></span></code></pre></div><p>So the hooking framework is Dobby:</p>
<center>
<p>
<i class='fab fa-github'></i>&nbsp;&nbsp;&nbsp;<a href="https://github.com/jmpews/Dobby" target="_blank" rel="noopener">https://github.com/jmpews/Dobby</a>
<br />
</p>
</center>
<p>Unity hooks start, in the script <code>init.lua</code> of PGSharp where they wait for the loading of <code>libil2cpp.so</code><sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-lua" data-lang="lua"><span style="display:flex;"><span>set_event_handler(<span style="color:#ba2121">&#34;pgo.il2ready&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">function</span>(il2base)
</span></span><span style="display:flex;"><span>    runtime.il2base <span style="color:#666">=</span> il2base;
</span></span><span style="display:flex;"><span>    (gh.initil2cppmethods)();
</span></span><span style="display:flex;"><span>    (gh.initil2cpphooks)();
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">end</span>
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p><code>initil2cppmethods()</code> aims at resolving the address of PokemonGO Unity functions needed to perform cheating actions,
while <code>initil2cpphooks()</code> dobby-hooks some Unity functions to change their behaviour.
In the version 1.33 of PGSharp, they hook 207 functions
of <code>libil2cpp.so</code> and we will take one of them to detail the internal mechanisms:</p>
<ul>
<li><code>UnityEngine.Application$$OpenURL</code></li>
</ul>
<p>First of all, if we look at the symbols or the strings of <code>libil2cpp.so</code>, we don&rsquo;t find meaningful information that could
help to figure out the original purpose of the Unity functions. In fact, the Unity metadata are embedded
in <code>global-metadata.dat</code>, and to recover the bindings between this file
and <code>libil2cpp.so</code>, we can use <a href="https://github.com/Perfare/Il2CppDumper">Perfare/Il2CppDumper</a>.</p>
<p>They compute the absolute of a Unity function by adding the offset provided by <code>global-metadata.dat</code>
to the base address of <code>libil2cpp.so</code>. Here is an example <code>UnityEngine.Application$$OpenURL</code>:</p>
<pre tabindex="0"><code class="language-arm" data-lang="arm">MOV   W13, 0x4bfeea0                   ; Offset of the function (thanks to global-metadata.dat)
ADRP  X14, #Application_OpenURL
ADD   X13, X8, X13                     ; Add the libil2cpp.so base address
STR   X13, [X14, #Application_OpenURL] ; Store the absolute address in libmain.so
</code></pre><p>The function associated with <code>initil2cpphooks()</code> is quite large as shown in the figure below:</p>
<p><img src="initil2cpphooks.png" alt="initil2cpphooks"></p>
<p>Actually, the function is large but easily understandable statically<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup>. The right-hand side of the figure is actually
the <code>catch { ... }</code> handlers of the exceptions, while the left-hand side that goes down, initializes
C++ objects. In this area of the CFG, we find the same pattern that repeats all the way down:</p>
<p><img src="dobby_hook_vtable.png" alt="Dobby Hooking VTable"></p>
<p>From what we can see, it initializes a C++ object (on the stack) and the first instructions setup the
VTable. We can find the relevant function in the last entry of the VTable that contains the hooking logic:</p>
<p><img src="hook_OpenURL.png" alt="Dobby Hooking OpenURL"></p>
<p>From this code, we can see that they perform the resolution of the absolute address of
<code>UnityEngine.Application$$OpenURL</code>. Also, thanks to the prototype of <code>DobbyHook()</code> we can
quickly understand that the new behavior of <code>OpenURL</code> is located in the function <code>sub_6C983C</code>:</p>
<p><img src="il2cpp_hooks.png" alt="Dobby Hooking OpenURL"></p>
<p>In this hook, they check if PokemonGO is opening its Google Play URL and redirect the user to the PGSharp home page.</p>
<h3 id="network"><a href="#toc"><i class='fas fa-angle-up'></i>  Network Communications and Encryption</a></h3>
<p>The cheating application communicates with its servers through the TLS/HTTP protocol and adds another layer
of encryption on the top of TLS. To encrypt the HTTP payload, they use AES in the CBC mode.
We can identify the AES algorithm thanks to clear S-BOX present in the <code>.rodata</code> section.</p>
<p>It seems that they use different keys, depending on the endpoint the application targets but
we can retrieve them by hooking the AES key schedule function. It results that we can decrypt the communication
between the application and the PGSharp servers<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup>.</p>
<p>Here are examples of endpoints and the data sent by PGSharp:</p>
<div class="accordion accordion-flush" id="spoiler-9">
  <div class="accordion-item">
    <h2 class="accordion-header" id="flush-heading-spoiler-9">
      <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapse-spoiler-9" aria-expanded="true" aria-controls="flush-collapse-spoiler-9">
        <i class='fas fa-link'></i>&nbsp;&nbsp;hazelnuts</button></h2>
    <div id="flush-collapse-spoiler-9" class="accordion-collapse collapse" aria-labelledby="flush-heading-spoiler-9" data-bs-parent="#spoiler-9">
      <div class="accordion-body">
        <ul>
<li><strong>POST <code>hazelnuts</code></strong>
<ul>
<li>Action: Handshake</li>
<li>Request:
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;bid&#34;</span>: <span style="color:#ba2121">&#34;com.nianticlabs.pokemongo&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;clt&#34;</span>: <span style="color:#ba2121">&#34;pgs&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;host&#34;</span>: <span style="color:#ba2121">&#34;Samsung A40&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;lv&#34;</span>: <span style="color:#666">-1</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;nonce&#34;</span>: <span style="color:#ba2121">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;nonce_key&#34;</span>: <span style="color:#ba2121">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;pgver&#34;</span>: <span style="color:#ba2121">&#34;0.221.0&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;uid&#34;</span>: <span style="color:#ba2121">&#34;00000000-00000000-[...]&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;ver&#34;</span>: <span style="color:#ba2121">&#34;1.33.0&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span></code></pre></div></li>
<li>Response:
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;err&#34;</span>: <span style="color:#666">0</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;shiny&#34;</span>: [<span style="color:#ba2121">&#34;List of shiny&#34;</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;hotplaces&#34;</span>: [
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#008000;font-weight:bold">&#34;name&#34;</span>: <span style="color:#ba2121">&#34;🇧🇷 Consolacao, São Paulo, Brazil&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#008000;font-weight:bold">&#34;lat&#34;</span>: <span style="color:#666">-23.5512</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#008000;font-weight:bold">&#34;lng&#34;</span>: <span style="color:#666">-46.6584</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>  ]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
</ul>
</li>
</ul>

      </div>
    </div>
  </div>
</div>


<div class="accordion accordion-flush" id="spoiler-10">
  <div class="accordion-item">
    <h2 class="accordion-header" id="flush-heading-spoiler-10">
      <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapse-spoiler-10" aria-expanded="true" aria-controls="flush-collapse-spoiler-10">
        <i class='fas fa-link'></i>&nbsp;&nbsp;Cw8dfkXpW7mq2i</button></h2>
    <div id="flush-collapse-spoiler-10" class="accordion-collapse collapse" aria-labelledby="flush-heading-spoiler-10" data-bs-parent="#spoiler-10">
      <div class="accordion-body">
        <ul>
<li><strong>POST <code>Cw8dfkXpW7mq2i</code></strong>
<ul>
<li>Action: <code>PGS_ACTIONS.GETPLAYER</code></li>
<li>Request:
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;bid&#34;</span>: <span style="color:#ba2121">&#34;com.nianticlabs.pokemongo&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;clt&#34;</span>: <span style="color:#ba2121">&#34;pgs&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;host&#34;</span>: <span style="color:#ba2121">&#34;Samsung A40&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;lv&#34;</span>: <span style="color:#666">4</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;nonce&#34;</span>: <span style="color:#ba2121">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;nonce_key&#34;</span>: <span style="color:#ba2121">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;pgver&#34;</span>: <span style="color:#ba2121">&#34;0.221.0&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;player&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;ban&#34;</span>: <span style="color:#666">0</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;captured&#34;</span>: <span style="color:#666">3</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;encountered&#34;</span>: <span style="color:#666">5</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;kmwalked&#34;</span>: <span style="color:#666">10.50</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;outage&#34;</span>: <span style="color:#666">0</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;pid&#34;</span>: <span style="color:#ba2121">&#34;[redacted]&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;serverlo&#34;</span>: <span style="color:#666">0</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;susp&#34;</span>: <span style="color:#666">0</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;suspa&#34;</span>: <span style="color:#666">0</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;visits&#34;</span>: <span style="color:#666">1</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;warn&#34;</span>: <span style="color:#666">0</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;warna&#34;</span>: <span style="color:#666">0</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;warndt&#34;</span>: <span style="color:#666">623234511000000000</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;warntm&#34;</span>: <span style="color:#666">0</span>
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;uid&#34;</span>: <span style="color:#ba2121">&#34;00000000-00000000-[...]&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;ver&#34;</span>: <span style="color:#ba2121">&#34;1.33.0&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
</ul>
</li>
</ul>

      </div>
    </div>
  </div>
</div>


<div class="accordion accordion-flush" id="spoiler-11">
  <div class="accordion-item">
    <h2 class="accordion-header" id="flush-heading-spoiler-11">
      <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapse-spoiler-11" aria-expanded="true" aria-controls="flush-collapse-spoiler-11">
        <i class='fas fa-link'></i>&nbsp;&nbsp;SSZgBPn6Ixq2ZK</button></h2>
    <div id="flush-collapse-spoiler-11" class="accordion-collapse collapse" aria-labelledby="flush-heading-spoiler-11" data-bs-parent="#spoiler-11">
      <div class="accordion-body">
        <ul>
<li><strong>POST <code>SSZgBPn6Ixq2ZK</code></strong>
<ul>
<li>Action: <code>PGS_ACTIONS.GETREPORTABLE</code></li>
<li>Request:
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">&#34;bid&#34;</span>: <span style="color:#ba2121">&#34;com.nianticlabs.pokemongo&#34;</span>,
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">&#34;clt&#34;</span>: <span style="color:#ba2121">&#34;pgs&#34;</span>,
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">&#34;host&#34;</span>: <span style="color:#ba2121">&#34;Samsung A40&#34;</span>,
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">&#34;lv&#34;</span>: <span style="color:#666">4</span>,
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">&#34;nonce&#34;</span>: <span style="color:#ba2121">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">&#34;nonce_key&#34;</span>: <span style="color:#ba2121">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">&#34;pgver&#34;</span>: <span style="color:#ba2121">&#34;0.221.0&#34;</span>,
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">&#34;raid&#34;</span>: [
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;battle&#34;</span>: <span style="color:#666">1634490000000</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;campaignId&#34;</span>: <span style="color:#ba2121">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;complete&#34;</span>: <span style="color:#008000;font-weight:bold">false</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;costume&#34;</span>: <span style="color:#666">12233</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;dex&#34;</span>: <span style="color:#666">326</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;eligible&#34;</span>: <span style="color:#008000;font-weight:bold">false</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;end&#34;</span>: <span style="color:#666">1634490000000</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;exclusive&#34;</span>: <span style="color:#008000;font-weight:bold">false</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;form&#34;</span>: <span style="color:#666">0</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;free&#34;</span>: <span style="color:#008000;font-weight:bold">false</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;gender&#34;</span>: <span style="color:#666">1</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;hidden&#34;</span>: <span style="color:#008000;font-weight:bold">false</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;lat&#34;</span>: <span style="color:#666">0.1234</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;lng&#34;</span>: <span style="color:#666">5.6789</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;lv&#34;</span>: <span style="color:#666">3</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;mov1&#34;</span>: <span style="color:#666">163</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;mov2&#34;</span>: <span style="color:#666">90</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;schedule&#34;</span>: <span style="color:#008000;font-weight:bold">false</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;seed&#34;</span>: <span style="color:#666">5000000</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;spawn&#34;</span>: <span style="color:#666">1634400000000</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;team&#34;</span>: <span style="color:#666">1</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;web&#34;</span>: <span style="color:#666">0</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;wec&#34;</span>: <span style="color:#666">3</span>
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>],
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">&#34;uid&#34;</span>: <span style="color:#ba2121">&#34;00000000-00000000-[...]&#34;</span>,
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">&#34;ver&#34;</span>: <span style="color:#ba2121">&#34;1.33.0&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
</ul>
</li>
</ul>

      </div>
    </div>
  </div>
</div>


<div class="accordion accordion-flush" id="spoiler-12">
  <div class="accordion-item">
    <h2 class="accordion-header" id="flush-heading-spoiler-12">
      <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapse-spoiler-12" aria-expanded="true" aria-controls="flush-collapse-spoiler-12">
        <i class='fas fa-link'></i>&nbsp;&nbsp;/pga/keycode/v-q2mgqcyji/</button></h2>
    <div id="flush-collapse-spoiler-12" class="accordion-collapse collapse" aria-labelledby="flush-heading-spoiler-12" data-bs-parent="#spoiler-12">
      <div class="accordion-body">
        <ul>
<li><strong>POST <code>/pga/keycode/v-q2mgqcyji/</code></strong>
<ul>
<li>Action: Activate PGSharp with a premium key</li>
<li>Request:
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;ver&#34;</span>: <span style="color:#ba2121">&#34;1.33.0&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;gi&#34;</span>: <span style="color:#666">1</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;key&#34;</span>: <span style="color:#ba2121">&#34;AVerySecretKey&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;host&#34;</span>: <span style="color:#ba2121">&#34;Samsung A40&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;clt&#34;</span>: <span style="color:#ba2121">&#34;pgs&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;ua&#34;</span>: <span style="color:#ba2121">&#34;Samsung A40/11/[redacted]/arm64-v8a/[redacted]/unknow/unknown/English&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;uid&#34;</span>: <span style="color:#ba2121">&#34;00000000-00000000-[...]&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
</ul>
</li>
</ul>

      </div>
    </div>
  </div>
</div>


<h3 id="safetynet"><a href="#toc"><i class='fas fa-angle-up'></i>  SafetyNet</a></h3>
<p><img src="snet.svg" alt="safetynet"></p>
<div class="alert alert-warning" role="alert">
    <span class="far fa-brake-warning me-1"></span>
    I skimmed this layer this weekend, so some parts might be inaccurate or wrong.
</div>
<p>In addition to standard code obfuscation, PokemonGO uses SafetyNet as an attestation mechanism.
Similarly to the GPS management, we find a (non-obfuscated) Java layer implemented in the class
<code>SafetyNetService</code>. This class exposes two native functions:</p>
<ol>
<li><span class="blue">String nativeGetApiKey()</span></li>
<li><span class="blue">void nativeAttestResponse(byte[] nonce, String jwtResult)</span></li>
</ol>
<p>The implementation of these two functions is obfuscated within <code>libNianticLabsPlugin.so</code>.</p>
<p>The first function is used to get the Google SafetyNet API key (<code>AIzaSyCh8l[...]_eOTXhM4</code>) while the second one,
is involved in the validation of the SafetyNet attestation.</p>
<p>Thanks to the JNIEnv proxy on <code>GetMethodID</code> and <code>CallVoidMethodV</code>,
PGSharp is able to monitor the calls to <code>SafetyNetService.attest(bytes[] nonce)</code>. When this function is called,
PGSharp intercepts the nonce and forward the request to its servers:</p>
<center>
<p>
<span class="red">https://tens.pgsharp.com/v1/scc-2-eg[...]4/</span><br />
</p>
</center>
<p>The request is performed through a http POST, whose data are encrypted with AES. The clear payload
has the following layout:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;n&#34;</span>: <span style="color:#ba2121">&#34;Cy[...]&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;type&#34;</span>: <span style="color:#ba2121">&#34;attest&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;ver&#34;</span>: <span style="color:#ba2121">&#34;&lt;PGSharp Version&gt;&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;k&#34;</span>: <span style="color:#ba2121">&#34;i3[...]&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;clt&#34;</span>: <span style="color:#ba2121">&#34;pgs&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;data&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;k&#34;</span>: <span style="color:#ba2121">&#34;AIzaSyCh8l[...]_eOTXhM4 &lt;- From nativeGetApiKey&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">&#34;n&#34;</span>: <span style="color:#ba2121">&#34;&lt;nonce&gt;&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>On success, the server responses with an AES-encrypted payload which has the following layout:</p>
<pre tabindex="0"><code>{&#34;result&#34;:&#34;suc: &lt;JWT SafetyNet Attestation&gt;&#34;}
</code></pre><p>The JWT SafetyNet value is then forwarded by PGSharp to <code>nativeAttestResponse()</code> with the original nonce.
At some point, this JWT attestation is sent to Niantic&rsquo;s servers (on the endpoint <code>plfe/112/rpc2</code>)
wrapped by a Protobuf structure.</p>
<p>To understand how they <em>&ldquo;bypass&rdquo;</em> SafetyNet, let&rsquo;s look at the JWT payload:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;nonce&#34;</span>: <span style="color:#ba2121">&#34;&lt;nonce&gt;&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;timestampMs&#34;</span>: <span style="color:#666">1636265656</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;apkPackageName&#34;</span>: <span style="color:#ba2121">&#34;com.nianticlabs.pokemongo&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;apkDigestSha256&#34;</span>: <span style="color:#ba2121">&#34;ioYmlh5mk5EhMUH/DsaG1jrhUoQJDK/2IvK61eiAXJE=&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;ctsProfileMatch&#34;</span>: <span style="color:#008000;font-weight:bold">true</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;apkCertificateDigestSha256&#34;</span>: [
</span></span><span style="display:flex;"><span>    <span style="color:#ba2121">&#34;lEvaRm6vZL4ck4ltXI6aRUoHyNj8vEre7vs1RbM16Xk=&#34;</span>
</span></span><span style="display:flex;"><span>  ],
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;basicIntegrity&#34;</span>: <span style="color:#008000;font-weight:bold">true</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">&#34;evaluationType&#34;</span>: <span style="color:#ba2121">&#34;BASIC&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>First of all, the JWT is correctly signed by Google SafetyNet&rsquo;s key and the <code>apkCertificateDigestSha256</code>
matches the signature of the real PokemonGO application.</p>
<p>But &hellip;</p>
<p>The value of <code>apkDigestSha256</code> does not match the checksum of the genuine PokemonGO application 😕</p>
<p><strong>Here are my hypothesis:</strong></p>
<p>The server <code>https://tens.pgsharp.com/v1/scc-2-eg/...</code> forwards the SafetyNet request to
a real application that runs on a real device. This application would have been created by PGSharp authors
to <em>really</em> run SafetyNet and to get a valid attestation signed with a valid Google key.
The fake application would have been created with <code>com.nianticlabs.pokemongo</code> as package name
and would implement signature mocking, as discussed in the first part.</p>
<p>If they would have managed to break SafetyNet, the <code>apkDigestSha256</code> value would have been consistent.</p>
<p>The JWT attestation is forwarded to Niantic so they might check the consistency of <code>apkDigestSha256</code>
but they might only focus on the signature (which can be faked) and not this value &hellip;</p>
<h3 id="pgsharp-signature-check"><a href="#toc"><i class='fas fa-angle-up'></i>  When PGSharp avoids PokemonGO pitfalls</a></h3>
<p>As discussed in the section <a href="#signature-bypass"><em>Signature Bypass</em></a>, PGSharp
tricks the Android PackageManager to mock the signature of the application.</p>
<p>It turns out that PGSharp is also concerned about app repackaging. As they provide premium
features, they don&rsquo;t want to be cheated &hellip;</p>
<p>In the function associated with <code>PGS_ACTIONS.INITPOST</code> they perform a device fingerprint
whose one of these elements is the APK&rsquo;s signature. But instead of using the Android PackageManager to
retrieve the signature, they use <a href="https://github.com/DimaKoz/stunning-signature">DimaKoz/stunning-signature</a>
to compute the MD5 digest of the signature.</p>
<h2 id="final-words"><a href="#toc"><i class='fas fa-angle-up'></i>  Final Words</a></h2>
<p>When I started to look at this cheating app, I did not expect to find such nice tricks and challenges.
The PGSharp&rsquo;s authors know the sneaky tricks to hinder reverse engineering. Unfortunately,
O-LLVM is relatively weak in this context compared to the commercial obfuscator used by Niantic.</p>
<p>On the other hand, the design of PokemonGO is such that all the reverse engineering difficulties
lie in one single module that can be treated in black-box once we identified the API. In particular, the
un-obfuscated Java layer helps a lot to identify these API.</p>
<p>Regarding the signature bypass, at first, I thought it would be easy to prevent by checking the integrity
of the <code>.apk</code> and/or the native libraries. But, there are some points that need to be taken into account:</p>
<p><strong>APK Integrity Check</strong></p>
<p>Naively, we might want to compute a checksum of the APK or re-compute the signature (as it&rsquo;s done by PGSharp).
But in fact, since a few years, Google tries to push
developers to use app bundle such as an application is no longer a single <code>.apk</code> but a split <code>.apk</code>.
While this feature optimizes the device&rsquo;s data partition size, it complicates the verification
of the signature since it would require to deal with different files and different checksum.</p>
<p>It&rsquo;s not infeasible, but it complicates its implementation in the APK build &amp; development pipeline.</p>
<p><strong>Native Library Integrity Check</strong></p>
<p>I guess that <code>libNianticLabsPlugin.so</code> implements checksum on its own library as it is
a sensitive part of the application. Regarding the other libraries, some of them are owned
by Niantic (like <code>libholoholo.so</code>) and others come from third-parties (like <code>libmain.so</code>). Depending on
how they are integrated, the checksum of these external libraries might not be easy to automatically
compute while releasing a new version of PokemonGO. These third-party libraries are,
most of the time, not copy-pasted by the developers but automatically bundled when compiling the
application. Therefore, computing their checksums might require tweaking the build process
in a non-easy way.</p>
<p>On the top of that, Niantic releases a new version of its games on a monthly basis. It means
that these checks need to be automated in CI/CD pipeline which might not be trivial to do.</p>
<hr width="50%" />
<p>It was a funny and very interesting journey, for those who want to dig a bit more
in PGSharp, I pushed some materials and documents on Github. In particular, you can
find the symbol list of <b class="red">libmain.so</b> based on reverse engineering.</p>
<center>
<p>
<i class='fab fa-github'></i>&nbsp;&nbsp;&nbsp;<a href="https://github.com/romainthomas/pgsharp" target="_blank" rel="noopener">https://github.com/romainthomas/pgsharp</a>
</p>
</center>
<h2 id="acknowledgments"><a href="#toc"><i class='fas fa-angle-up'></i>  Acknowledgments</a></h2>
<p>This analysis has been independently done in my spare time while being at <a href="https://www.quarkslab.com">Quarkslab</a> and
<a href="https://www.ul.com" target="_blank" rel="noopener" class="ul">UL</a>,
my current employer.</p>
<h2 id="annexes"><a href="#toc"><i class='fas fa-angle-up'></i>  Annexes</a></h2>
<h3 id="third-party">Third-Party</h3>
<p>Here is the (non exhaustive) list of the open-source projects used by PGSharp:</p>
<table>
<thead>
<tr>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://github.com/jmpews/Dobby">https://github.com/jmpews/Dobby</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/or-dvir/EasySettings">https://github.com/or-dvir/EasySettings</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/zupet/LuaTinker">https://github.com/zupet/LuaTinker</a> or <a href="https://github.com/yanwei1983/luatinkerE">https://github.com/yanwei1983/luatinkerE</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/DimaKoz/stunning-signature">https://github.com/DimaKoz/stunning-signature</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.sqlite.org/index.html">https://www.sqlite.org/index.html</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/nlohmann/json">https://github.com/nlohmann/json</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.lua.org/manual/5.3/">https://www.lua.org/manual/5.3/</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/kikito/md5.lua">https://github.com/kikito/md5.lua</a></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://github.com/rxi/json.lua">https://github.com/rxi/json.lua</a></td>
</tr>
</tbody>
</table>
<h3 id="list-of-the-unity-functions-used-by-pgsharp">List of the Unity Functions used by PGSharp</h3>
<div class="accordion accordion-flush" id="spoiler-15">
  <div class="accordion-item">
    <h2 class="accordion-header" id="flush-heading-spoiler-15">
      <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapse-spoiler-15" aria-expanded="true" aria-controls="flush-collapse-spoiler-15">
        <i class='fas fa-table'></i>&nbsp;&nbsp;Expand</button></h2>
    <div id="flush-collapse-spoiler-15" class="accordion-collapse collapse" aria-labelledby="flush-heading-spoiler-15" data-bs-parent="#spoiler-15">
      <div class="accordion-body">
        <div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>object__Invoke
</span></span><span style="display:flex;"><span>String_CreateString1
</span></span><span style="display:flex;"><span>String_CreateString3
</span></span><span style="display:flex;"><span>ulong_object___get_Item
</span></span><span style="display:flex;"><span>ulong_object___ContainsKey
</span></span><span style="display:flex;"><span>ulong_object___TryGetValue
</span></span><span style="display:flex;"><span>Application_OpenURL
</span></span><span style="display:flex;"><span>Application_set_targetFrameRate
</span></span><span style="display:flex;"><span>Quaternion_Angle
</span></span><span style="display:flex;"><span>PlayerPrefs_TrySetInt
</span></span><span style="display:flex;"><span>PlayerPrefs_TrySetFloat
</span></span><span style="display:flex;"><span>PlayerPrefs_TrySetSetString
</span></span><span style="display:flex;"><span>PlayerPrefs_SetInt
</span></span><span style="display:flex;"><span>PlayerPrefs_GetInt
</span></span><span style="display:flex;"><span>PlayerPrefs_SetFloat
</span></span><span style="display:flex;"><span>PlayerPrefs_GetFloat
</span></span><span style="display:flex;"><span>PlayerPrefs_SetString
</span></span><span style="display:flex;"><span>PlayerPrefs_GetStringNoDefault
</span></span><span style="display:flex;"><span>PlayerPrefs_HasKey
</span></span><span style="display:flex;"><span>PlayerPrefs_DeleteKey
</span></span><span style="display:flex;"><span>Component_get_gameObject
</span></span><span style="display:flex;"><span>Transform_get_rotation
</span></span><span style="display:flex;"><span>Animator_get_speed
</span></span><span style="display:flex;"><span>Animator_set_speed
</span></span><span style="display:flex;"><span>Animator_SetTriggerID
</span></span><span style="display:flex;"><span>Animator_Update
</span></span><span style="display:flex;"><span>Promise__ctor
</span></span><span style="display:flex;"><span>Promise_Complete
</span></span><span style="display:flex;"><span>MapMath_MetersBetween
</span></span><span style="display:flex;"><span>NL_NLAny_object_
</span></span><span style="display:flex;"><span>NL_NLFirst_object_
</span></span><span style="display:flex;"><span>InputField_ActivateInputField
</span></span><span style="display:flex;"><span>InputField_DeactivateInputField
</span></span><span style="display:flex;"><span>Text_set_text
</span></span><span style="display:flex;"><span>Text_set_fontSize
</span></span><span style="display:flex;"><span>DiContainer_InjectExplicitInternal
</span></span><span style="display:flex;"><span>Schedule_WaitOn_c__AnonStorey0____m__0
</span></span><span style="display:flex;"><span>GameState_EnterState
</span></span><span style="display:flex;"><span>GameState_ExitState
</span></span><span style="display:flex;"><span>RpcBindings_Send
</span></span><span style="display:flex;"><span>RpcManager_DispatchCallbacks
</span></span><span style="display:flex;"><span>Animator_SetTriggerID
</span></span><span style="display:flex;"><span>RpcManager_DispatchCallbacks
</span></span><span style="display:flex;"><span>AuthService_get_CachedCredentialsExist
</span></span><span style="display:flex;"><span>AuthService_Logout
</span></span><span style="display:flex;"><span>DeviceServiceExtensions_IsUsable
</span></span><span style="display:flex;"><span>GameMasterData_IsPokemonWeatherBoosted
</span></span><span style="display:flex;"><span>Animator_SetTriggerID
</span></span><span style="display:flex;"><span>AuthService_get_CachedCredentialsExist
</span></span><span style="display:flex;"><span>AuthService_Logout
</span></span><span style="display:flex;"><span>PgpApi_UpdateNotifications
</span></span><span style="display:flex;"><span>ARPlusEncounterValuesProto__ctor
</span></span><span style="display:flex;"><span>ARPlusEncounterValuesProto__cctor
</span></span><span style="display:flex;"><span>PlayerService_GetPlayerDayBucket
</span></span><span style="display:flex;"><span>PlayerService_get_PlayerStats
</span></span><span style="display:flex;"><span>PlayerService_get_CurrentPokeball
</span></span><span style="display:flex;"><span>PlayerService_get_CurrentLinkedLogins
</span></span><span style="display:flex;"><span>AuthService_get_CachedCredentialsExist
</span></span><span style="display:flex;"><span>PlayerService_get_PokemonBag
</span></span><span style="display:flex;"><span>PlayerService_GetPlayerProfile
</span></span><span style="display:flex;"><span>PlayerService_set_CurrentPokeball
</span></span><span style="display:flex;"><span>PlayerService_get_BagIsFull
</span></span><span style="display:flex;"><span>PlayerService_GetCandyCountForPokemon
</span></span><span style="display:flex;"><span>StateToken_Complete
</span></span><span style="display:flex;"><span>TimeUtil_ServerNowMs
</span></span><span style="display:flex;"><span>RequestGymDetailsById_onSucceed
</span></span><span style="display:flex;"><span>RequestGymDetailsById_onError
</span></span><span style="display:flex;"><span>PlayerPrefs_SetInt
</span></span><span style="display:flex;"><span>BluetoothUtil_get_IsBluetoothEnabled
</span></span><span style="display:flex;"><span>PgpGuiController_ClickIcon
</span></span><span style="display:flex;"><span>PgpGuiService_SetSfidaIconVisible
</span></span><span style="display:flex;"><span>PgpGuiService_EnableSfidaIcon
</span></span><span style="display:flex;"><span>ulong_object___get_Item
</span></span><span style="display:flex;"><span>PgpService_get_IsSessionActive
</span></span><span style="display:flex;"><span>PgpService_GetCurrentNotificationType
</span></span><span style="display:flex;"><span>ItemBagImpl_GetItemCount
</span></span><span style="display:flex;"><span>PokemonBagImpl_GetPokemon
</span></span><span style="display:flex;"><span>ulong_object___get_Item
</span></span><span style="display:flex;"><span>PgpApi_UpdateNotifications
</span></span><span style="display:flex;"><span>Animator_set_speed
</span></span><span style="display:flex;"><span>StateToken_Complete
</span></span><span style="display:flex;"><span>VersionCheckService_CheckVersion
</span></span><span style="display:flex;"><span>ulong_object___TryGetValue
</span></span><span style="display:flex;"><span>QuestMapPokemon_get_Pokemon
</span></span><span style="display:flex;"><span>QuestService_BeginQuestEncounterWithOut
</span></span><span style="display:flex;"><span>EulaGuiController_PressAccept
</span></span><span style="display:flex;"><span>StarterMapPokemon_get_Pokemon
</span></span><span style="display:flex;"><span>OpenRemoteGym_gymOpner
</span></span><span style="display:flex;"><span>OpenRemoteGym_onSucceed
</span></span><span style="display:flex;"><span>BluetoothUtil_get_IsBluetoothEnabled
</span></span><span style="display:flex;"><span>QuestService_BeginQuestEncounterWithOut
</span></span><span style="display:flex;"><span>RaidState_ExitGymWithRaidDetails
</span></span><span style="display:flex;"><span>AccountChoiceState_ClickNewPlayer
</span></span><span style="display:flex;"><span>AccountChoiceState_ClickExistingPlayer
</span></span><span style="display:flex;"><span>LoginAgeGateState_SubmitSelections
</span></span><span style="display:flex;"><span>LoginChoiceState_ClickPtc
</span></span><span style="display:flex;"><span>LoginChoiceState_ClickGoogle
</span></span><span style="display:flex;"><span>LoginGuiController_ClickSubmit
</span></span><span style="display:flex;"><span>PtcLoginState_SubmitLogin
</span></span><span style="display:flex;"><span>I18n_PokemonMoveName
</span></span><span style="display:flex;"><span>I18n_SetUpLanguageTable
</span></span><span style="display:flex;"><span>I18n_PokemonNameTemporaryEvolution
</span></span><span style="display:flex;"><span>I18n_Text
</span></span><span style="display:flex;"><span>I18n_PokemonName
</span></span><span style="display:flex;"><span>FriendsGuiState_StartOpenGiftFlow
</span></span><span style="display:flex;"><span>FriendsGuiState_StartSendGiftFlow
</span></span><span style="display:flex;"><span>FriendsRpcService_RemoveGiftbox
</span></span><span style="display:flex;"><span>GiftingRpcService_SendGift
</span></span><span style="display:flex;"><span>GiftingRpcService_OpenGift
</span></span><span style="display:flex;"><span>StickerService_GetStickerInventory
</span></span><span style="display:flex;"><span>CombatDirector_Initialize
</span></span><span style="display:flex;"><span>MapPokestop_get_PoiId
</span></span><span style="display:flex;"><span>MapPokestop_get_ActiveIncidentType
</span></span><span style="display:flex;"><span>MapPokestop_get_Location
</span></span><span style="display:flex;"><span>EncounterParkCameraController_PlayIntro
</span></span><span style="display:flex;"><span>RunPokemonCaptured_onDitto
</span></span><span style="display:flex;"><span>EncounterInteractionState_RunAway
</span></span><span style="display:flex;"><span>MapMath_MetersBetween
</span></span><span style="display:flex;"><span>PlayerPrefs_TrySetSetString
</span></span><span style="display:flex;"><span>EncounterInteractionState_IntroCompleted
</span></span><span style="display:flex;"><span>AttemptCapture_onResponse
</span></span><span style="display:flex;"><span>EncounterIntroState_ExitState
</span></span><span style="display:flex;"><span>EncounterPokemon_get_MapPokemon
</span></span><span style="display:flex;"><span>PlayerPrefs_HasKey
</span></span><span style="display:flex;"><span>ItemBagImpl_GetItemCount
</span></span><span style="display:flex;"><span>Pokeball_TryHitPokemon
</span></span><span style="display:flex;"><span>Pokeball_FlyStateImpl_Capture__MoveNext
</span></span><span style="display:flex;"><span>Pokeball_DropStateImpl_Capture__MoveNext
</span></span><span style="display:flex;"><span>EncounterGuiController_ShowPokemonFlee
</span></span><span style="display:flex;"><span>EncounterState_get_EncounterType
</span></span><span style="display:flex;"><span>EncounterState_EncounterStateComplete
</span></span><span style="display:flex;"><span>EncounterState_EncounterStateComplete
</span></span><span style="display:flex;"><span>EncounterState_get_MapPokemon
</span></span><span style="display:flex;"><span>EncounterState_OnEncounterResponse
</span></span><span style="display:flex;"><span>DefaultEncounter_get_DefaultBall
</span></span><span style="display:flex;"><span>ExtraMapPokemon_get_Pokemon
</span></span><span style="display:flex;"><span>ResearchEncounter_get_DefaultBall
</span></span><span style="display:flex;"><span>ResearchEncounter_get_DefaultBall
</span></span><span style="display:flex;"><span>object_object__object___CurrentPageIndex
</span></span><span style="display:flex;"><span>PokemonInventoryCellView_Initialize
</span></span><span style="display:flex;"><span>ToastService_OneLineMedium
</span></span><span style="display:flex;"><span>ToastService_RewardItemNameAmount
</span></span><span style="display:flex;"><span>ToastService_RewardItemDefault
</span></span><span style="display:flex;"><span>ToastService_RewardItemStardust
</span></span><span style="display:flex;"><span>ToastService_OneLineMediumWithParams
</span></span><span style="display:flex;"><span>ToastService_RewardItemXlCandy
</span></span><span style="display:flex;"><span>ToastService_RewardItemAmount
</span></span><span style="display:flex;"><span>ToastService_TwoLine
</span></span><span style="display:flex;"><span>ToastService_RewardItemAmountType
</span></span><span style="display:flex;"><span>ToastService_RewardItemMegaResource
</span></span><span style="display:flex;"><span>ToastService_RewardSticker
</span></span><span style="display:flex;"><span>ToastService_OneLineWithParams
</span></span><span style="display:flex;"><span>ToastService_OneLineBig
</span></span><span style="display:flex;"><span>ToastService_OneLineBigWithParams
</span></span><span style="display:flex;"><span>ToastService_RewardItemCandy
</span></span><span style="display:flex;"><span>UserPromptsService_HasActiveModal
</span></span><span style="display:flex;"><span>UserPromptsService_DismissActiveModal
</span></span><span style="display:flex;"><span>PokemonInfoDynoScrollRect_Cleanup
</span></span><span style="display:flex;"><span>Quaternion_Angle
</span></span><span style="display:flex;"><span>Animator_get_speed
</span></span><span style="display:flex;"><span>PokemonInfoPanel_DoUpdate
</span></span><span style="display:flex;"><span>GymRootController_get_View
</span></span><span style="display:flex;"><span>GymRootController_get_MapGym
</span></span><span style="display:flex;"><span>MapGym_get_PoiId
</span></span><span style="display:flex;"><span>MapGym_OnTap
</span></span><span style="display:flex;"><span>MapGym_get_Location
</span></span><span style="display:flex;"><span>RaidMapPokemon_get_Pokemon
</span></span><span style="display:flex;"><span>MapContentHandler_UpdateCells
</span></span><span style="display:flex;"><span>MapEntityCell_get_Pois
</span></span><span style="display:flex;"><span>MapEntityService_get_Cells
</span></span><span style="display:flex;"><span>MapEntityService_GetMapPoi
</span></span><span style="display:flex;"><span>MapEntityService_UpdatePois
</span></span><span style="display:flex;"><span>MapExploreState_GymSelected
</span></span><span style="display:flex;"><span>MapExploreState_EnterQuestEncounter
</span></span><span style="display:flex;"><span>MapPokemon_get_Location
</span></span><span style="display:flex;"><span>MapPokemon_get_DespawnTime
</span></span><span style="display:flex;"><span>MapPokemon_TryCapture
</span></span><span style="display:flex;"><span>PhotobombingMapPokemon_get_Pokemon
</span></span><span style="display:flex;"><span>MapPokestop_get_ActiveIncidentType
</span></span><span style="display:flex;"><span>SendEncounterRequestCapture_onResponse
</span></span><span style="display:flex;"><span>PoiMapPokemon_get_SpawnPointId
</span></span><span style="display:flex;"><span>PoiMapPokemon_get_EncounterId
</span></span><span style="display:flex;"><span>WildMapPokemon_get_Pokemon
</span></span><span style="display:flex;"><span>WildMapPokemon_SendEncounterRequest
</span></span><span style="display:flex;"><span>PoiDirectoryService_AddPokemon
</span></span><span style="display:flex;"><span>PoiDirectoryService_RemovePokemon
</span></span><span style="display:flex;"><span>RaidMapPokemon_get_Pokemon
</span></span><span style="display:flex;"><span>IncidentMapPokemon_get_Pokemon
</span></span><span style="display:flex;"><span>IncenseMapPokemon_SendEncounterRequest
</span></span><span style="display:flex;"><span>IncenseMapPokemon_OnDestroy
</span></span><span style="display:flex;"><span>IncenseMapPokemon_get_Pokemon
</span></span><span style="display:flex;"><span>TroyDiskMapPokemon_SendEncounterRequest
</span></span><span style="display:flex;"><span>TroyDiskMapPokemon_get_Pokemon
</span></span><span style="display:flex;"><span>GroundTapHandler_OnTap
</span></span><span style="display:flex;"><span>GroundTapHandler_OnTap1
</span></span><span style="display:flex;"><span>MapViewHandler_GetGroundLocation
</span></span><span style="display:flex;"><span>MapViewHandler_GetGroundPosition
</span></span><span style="display:flex;"><span>MapViewHandler_GetWorldLocation
</span></span><span style="display:flex;"><span>NL_NLFirst_object_
</span></span><span style="display:flex;"><span>CompassGuiController_Update
</span></span><span style="display:flex;"><span>PlayerService_SetPlayerProto
</span></span><span style="display:flex;"><span>MapPokemon_LogEncounterMetrics
</span></span></code></pre></div>
      </div>
    </div>
  </div>
</div>


<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>O-LLVM provides control-flow obfuscation that can be <em>recovered</em> with emulation.
On the other hand, the data-flow (function parameters, stack values, memory accesses) can be analysed at a basic-block level with static analysis.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><b class="red">libmain.so</b> is also <strong>statically</strong> linked against other libraries like <a href="https://github.com/jmpews/Dobby">jmpews/Dobby</a>,
<a href="https://github.com/nlohmann/json">nlohmann/json</a>, <a href="https://github.com/sqlite/sqlite">sqlite</a> &hellip;&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Modded apps use similar tricks as discussed in <a href="https://blog.quarkslab.com/android-application-diffing-analysis-of-modded-version.html#defeating-obfuscation">Android Application Diffing: Analysis of Modded Version</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>In order to arbitrarily call the underlying function when needed.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref2:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref3:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>The package names are stripped with Proguard but we can quite easily recover those packages.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>Basically, they renamed <a href="https://github.com/jmpews/Dobby/blob/bba23cbee8e3cfff5622ef8b63fb797703baea5f/include/dobby.h#L157">DobbyHook</a> in <code>FbbUePBslRNHWkdS</code>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>The event is triggered when <code>nativeMuteMasterAudio</code> or <code>nativeRender</code> is registered and they
get the base address by iterating over <code>/proc/&lt;pid&gt;/maps</code>.&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p>O-LLVM seems not applied on this function&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p>One can also hook the AES encrypt/decrypt functions whose prototype is <code>(uint8_*t key_schedule, uint8_t* inout_buffer, size_t size)</code>&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded><media:content medium="image" width="918" height="517" url="https://www.romainthomas.fr/post/21-11-pgsharp-analysis/featured.png"/></item><item><title>Gotta Catch 'Em All: Frida &amp; jailbreak detection</title><dc:creator>Romain Thomas</dc:creator><link>https://www.romainthomas.fr/post/21-07-pokemongo-anti-frida-jailbreak-bypass/</link><pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/21-07-pokemongo-anti-frida-jailbreak-bypass/</guid><description>This blog post analyzes the Frida and Jailbreak detection in PokemonGO for iOS.</description><content:encoded><![CDATA[<style>
  .green {
    color:green;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .blue {
    color: blue;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }
  .orange {
    color: #FF6347;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .red {
    color: #df2b04;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .hl-comment {
    color: #df2b04;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .hl-keyword {
    color: #A90D91;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .hl-literal {
    color: #1C01CE;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .hl-preproc {
    color: #633820;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .hl-strings {
    color: #C41A16;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }
  .yellow {
    color: #CC7000;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

</style>
<div class="col-12 col-md-12 mb-4 mb-lg-4 mt-4">
  <div class="p-4 rounded col-12 alert alert-info" style="border: none !important; background-color: #FAFCFF">
  <div class="d-flex px-3"><div>
    <div class="icon icon-sm icon-secondary">
      <span class="fas fa-circle-info" style="color: #084298" ></span>
    </div>
  </div>
  <div class="ps-4" style="color: #084298">
    <h3 class="h5 m-0 mb-1" style="color: #084298">Note</h3>
    Do not expect a <em>click &amp; play</em> solution for PokemonGO in this blog post. This blog post is more about
the technical aspects of jailbreak detection than a bypass for this game.
  </div>
  </div>
  </div>
</div>
<h2 id="introduction">Introduction</h2>
<p>While working on LIEF during my vacations to support in-memory parsing for Mach-O files, I found that
PokemonGO was an interesting use case to introduce this feature. It led me to look at the jailbreak
and Frida detection implemented in this game.
Being more familiar with Android than iOS, the analysis workflow on this platform is quite different, which
is also a good opportunity to improve tooling.</p>
<p>The first challenge stems from jailbreaking the device. Fortunately, checkra1n eases this step.
The second difficulty lies in extracting the encrypted iOS app from the device. In contrast to Android,
iOS apps are encrypted on the disk and decrypted by the kernel when loaded. It means that one way to get
the unencrypted code is to dump the file from memory. One could also leverage the function <code>mremap_encrypted()</code>
as described in <a href="https://www.linkedin.com/pulse/decrypting-apps-ios-john-coates/">Decrypting Apps on iOS</a>.</p>
<h2 id="pokemongo-overview">PokemonGO Overview</h2>
<p>When running PokemonGO on a jailbroken device<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, the application immediately crashes with the following backtrace:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0   ???             0x000000020ac46ab8 0 + 8770579128
</span></span><span style="display:flex;"><span>1   libdyld.dylib   0x0000000184df8304 invocation function for block in dyld3::AllImages::runAllInitializersInImage(dyld3::closure::Image const*, dyld3::MachOLoaded const*) + 136
</span></span><span style="display:flex;"><span>2   libdyld.dylib   0x0000000184dea5b0 dyld3::closure::Image::forEachInitializer(void const*, void (void const*) block_pointer) const + 96
</span></span><span style="display:flex;"><span>3   libdyld.dylib   0x0000000184df8160 invocation function for block in dyld3::AllImages::runInitialzersBottomUp(dyld3::closure::Image const*) + 296
</span></span><span style="display:flex;"><span>4   libdyld.dylib   0x0000000184deae6c dyld3::closure::Image::forEachImageToInitBefore(void (unsigned int, bool&amp;) block_pointer) const + 92
</span></span><span style="display:flex;"><span>5   libdyld.dylib   0x0000000184df8b48 dyld3::AllImages::loadImage(Diagnostics&amp;, char const*, unsigned int, dyld3::closure::DlopenClosure const*, bool, bool, bool, bool, void const*) + 776
</span></span><span style="display:flex;"><span>6   libdyld.dylib   0x0000000184df8698 dyld3::AllImages::dlopen(Diagnostics&amp;, char const*, bool, bool, bool, bool, bool, void const*, bool) + 872
</span></span><span style="display:flex;"><span>7   libdyld.dylib   0x0000000184dfa2b4 dyld3::dlopen_internal(char const*, int, void*) + 368
</span></span><span style="display:flex;"><span>8   libdyld.dylib   0x0000000184ded5b0 dlopen_internal(char const*, int, void*) + 108
</span></span><span style="display:flex;"><span>9   CoreFoundation  0x00000001850ed038 _CFBundleDlfcnLoadFramework + 136
</span></span><span style="display:flex;"><span>10  CoreFoundation  0x00000001850be974 _CFBundleLoadExecutableAndReturnError + 376
</span></span><span style="display:flex;"><span>11  Foundation      0x0000000186359ba8 -[NSBundle loadAndReturnError:] + 332
</span></span><span style="display:flex;"><span>12  pokemongo       0x00000001041a7c5c 0x1041a0000 + 31836
</span></span><span style="display:flex;"><span>13  pokemongo       0x00000001041a7d50 0x1041a0000 + 32080
</span></span><span style="display:flex;"><span>14  libdyld.dylib   0x0000000184de9588 start + 4
</span></span></code></pre></div><div class="alert alert-info" role="alert"  style="border: none !important; background-color: #FAFCFF">
  The full crash log is available <a href="backtrace.log">here</a>.
</div>
<p>In this backtrace, the main <code>pokemongo</code> binary is a kind of <em>stub</em> that loads the Unity binary: <code>UnityFramework</code> which
contains the main logic of the game.</p>
<p>This library is loaded by the <code>dlopen_internal</code> function at index <strong>8</strong> in the backtrace as a
result of <code>-[NSBundle loadAndReturnError:]</code>.
Since <code>UnityFramework</code> depends on other libraries, they are (pre)loaded with <code>Image::forEachImageToInitBefore</code>
which processes the following files:</p>
<ol>
<li><span class="yellow">@/usr/lib/libc++.1.dylib</span></li>
<li>&hellip;</li>
<li><span class="blue">@rpath/NianticLabsPlugin.framework/NianticLabsPlugin</span></li>
<li>&hellip;</li>
<li><span class="yellow">@rpath/libswiftos.dylib</span></li>
</ol>
<p>Among those dependencies, we can notice the <span class="blue">NianticLabsPlugin</span> library which is a cross-platform
Unity plugin &ndash; also present in the Android version &ndash; that contains the main protections of the game.
These protections are used to prevent cheat, bots, GPS spoofing, in PokemonGO. The whole
being obfuscated by Digital.ai (formerly known as Arxan). <span class="blue">NianticLabsPlugin</span> communicates with the <code>UnityFramework</code> through
an exported function <code>GetN2Api</code> that returns an array of functions (pointers).</p>
<p>The following figure outlines these different components:</p>
<p><img src="overview.png" alt="PokemonGO overview"></p>
<p>Getting back to the backtrace, if we assume that the application crashes when loading <span class="blue">NianticLabsPlugin</span>,
it precisely crashes when calling the Mach-O constructors in <code>AllImages::runAllInitializersInImage</code>.
Since the application is heavily obfuscated, a static analysis reaches quickly its limits, which forces us
to emulate or dynamically analyze the functions of interest.</p>
<div class="col-12 col-md-12 mb-4 mb-lg-4 mt-4">
  <div class="p-4 rounded col-12 alert alert-info" style="border: none !important; background-color: #FAFCFF">
  <div class="d-flex px-3"><div>
    <div class="icon icon-sm icon-secondary">
      <span class="fas fa-circle-info" style="color: #084298" ></span>
    </div>
  </div>
  <div class="ps-4" style="color: #084298">
    <h3 class="h5 m-0 mb-1" style="color: #084298">Note</h3>
    <p>The addresses of the functions/instructions mentioned in this blog post are based on the following version of NianticLabsPlugin:</p>
<p><i class="fas fa-shield-alt"></i> <a href="NianticLabsPlugin.bin">NianticLabsPlugin - 2140426ccdfdfb2529f454697cb5cc83</a></p>
<p><i class="fas fa-code-branch"></i> PokemonGO v0.211.2 - June 2021</p>
  </div>
  </div>
  </div>
</div>
<h2 id="analyzing-mach-o-constructors-with-frida">Analyzing Mach-O constructors with Frida</h2>
<p>From the previous section, we surmised that the application crashed because of the <span class="blue">NianticLabsPlugin</span>&rsquo;s constructors.
Since these functions are called before <strong>any other functions</strong> of the library, it raises the question of finding
a way to perform actions (or hook) before they are executed.</p>
<p>On Android, when we need to analyse a library&rsquo;s constructors, we can hook the <code>call_array</code> function from
<a href="https://github.com/aosp-mirror/platform_bionic/blob/c44b1d0676ded732df4b3b21c5f798eacae93228/linker/linker_soinfo.cpp#L488">Bionic&rsquo;s linker (ELF loader)</a>:</p>
<script src="https://gist.github.com/romainthomas/c10298387a921df730c1556c2ee9cecb.js"></script>
<p>If we try to apply the same approach on iOS, the mirror of the ELF loader on iOS is <code>dyld</code> which contains
most of the logic to load Mach-O files.
It turns out that at some points, the Mach-O&rsquo;s constructors are processed in the <code>doModInitFunctions</code> function
(from <a href="https://github.com/apple-opensource/dyld/blob/1128192c016372ae94793d88530bc5978c1fce93/src/ImageLoaderMachO.cpp#L2290">ImageLoaderMachO.cpp</a>).</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#b00040">void</span> ImageLoaderMachO<span style="color:#666">::</span>doModInitFunctions(<span style="color:#008000;font-weight:bold">const</span> LinkContext<span style="color:#666">&amp;</span> context) {
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">for</span> (<span style="color:#008000;font-weight:bold">const</span> <span style="color:#008000;font-weight:bold">struct</span> <span style="color:#00f;font-weight:bold">macho_section</span><span style="color:#666">*</span> sect<span style="color:#666">=</span>sectionsStart; sect <span style="color:#666">&lt;</span> sectionsEnd; <span style="color:#666">++</span>sect) {
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">const</span> <span style="color:#b00040">uint8_t</span> type <span style="color:#666">=</span> sect<span style="color:#666">-&gt;</span>flags <span style="color:#666">&amp;</span> SECTION_TYPE;
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">if</span> ( type <span style="color:#666">==</span> S_MOD_INIT_FUNC_POINTERS ) {
</span></span><span style="display:flex;"><span>      Initializer<span style="color:#666">*</span> inits <span style="color:#666">=</span> (Initializer<span style="color:#666">*</span>)(sect<span style="color:#666">-&gt;</span>addr <span style="color:#666">+</span> fSlide);
</span></span><span style="display:flex;"><span>      ...
</span></span><span style="display:flex;"><span>      <span style="color:#008000;font-weight:bold">if</span> (<span style="color:#666">!</span><span style="color:#008000;font-weight:bold">this</span><span style="color:#666">-&gt;</span>containsAddress(stripPointer((<span style="color:#b00040">void</span><span style="color:#666">*</span>)func)) ) {
</span></span><span style="display:flex;"><span>        dyld<span style="color:#666">::</span>throwf(<span style="color:#ba2121">&#34;initializer function %p not in mapped image for %s</span><span style="color:#b62;font-weight:bold">\n</span><span style="color:#ba2121">&#34;</span>, func, <span style="color:#008000;font-weight:bold">this</span><span style="color:#666">-&gt;</span>getPath());
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      ...
</span></span><span style="display:flex;"><span>      func(context.argc, context.argv, context.envp, context.apple, <span style="color:#666">&amp;</span>context.programVars);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>From this code, we can notice that <strong>all</strong> constructor addresses are checked <strong>beforehand</strong> by the
<code>containsAddress</code> function. Therefore, it makes this function a good hooking spot as it is executed before
calling the constructor itself. One can use the native SDK of <a href="https://github.com/frida/frida-gum">frida-gum</a>
to perform this action:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// Address of ImageLoader::containsAddress in /usr/lib/dyld
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span><span style="color:#008000;font-weight:bold">const</span> uintptr_t containsAddress_ptr <span style="color:#666">=</span> ...;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// Setup hooks with gum_interceptor_attach
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>GumAttachReturn attach_ret <span style="color:#666">=</span> gum_interceptor_attach(
</span></span><span style="display:flex;"><span>    listener_<span style="color:#666">-&gt;</span>interceptor,
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic">/* target */</span> <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span><span style="color:#b00040">void</span><span style="color:#666">*&gt;</span>(containsAddress_ptr),
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span>GumInvocationListener<span style="color:#666">*&gt;</span>(listener_),
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic">/* ID */</span> <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span><span style="color:#b00040">void</span><span style="color:#666">*&gt;</span>(containsAddress_ptr)
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>....
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// Equivalent of onEnter in Javascript
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span><span style="color:#b00040">void</span> native_listener_on_enter(GumInvocationListener<span style="color:#666">*</span> listener, GumInvocationContext<span style="color:#666">*</span> ic) {
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">const</span> uintptr_t ctor_function_addr <span style="color:#666">=</span> ic<span style="color:#666">-&gt;</span>cpu_context<span style="color:#666">-&gt;</span>x[<span style="color:#666">1</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic">// Do stuff with ctor_function_addr
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>}
</span></span></code></pre></div><div class="alert alert-info" role="alert"  style="border: none !important; background-color: #FAFCFF">
  <code>containsAddress</code> is a member function, therefore <code>x0</code> contains a pointer on <code>this</code> and the address
to check is located in <code>x1</code>.
</div>
<p>By hooking <code>containsAddress()</code>, we get the <strong>control before</strong> the execution of the constructors.
It gives us the ability to perform the following actions that can help to identify the constructor involved in the crash:</p>
<ol>
<li>Trace the constructors (see: <a href="constructors_trace.log">constructors_trace.log</a>)</li>
<li>Replace/disable a constructor (<code>gum_interceptor_replace</code>)</li>
<li>Detect the <strong>first</strong> constructor and hook the next ones (<code>gum_interceptor_attach</code>)</li>
</ol>
<p><span class="blue">NianticLabsPlugin</span> embeds no less than 120 constructors
among those, 6<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> are involved in detecting Frida, jailbroken devices, anti-debug, etc:</p>
<table>
<thead>
<tr>
<th>Index</th>
<th>Offset</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>15</td>
<td>0x4369e0</td>
<td>Anti-debug &amp; anti-emulation</td>
</tr>
<tr>
<td>16</td>
<td>0x00e0d8</td>
<td>Frida detection</td>
</tr>
<tr>
<td>17</td>
<td>0x26bd5c</td>
<td>Anti-bypass?</td>
</tr>
<tr>
<td>18</td>
<td>0x449b84</td>
<td>Anti-jailbreak, anti-Frida</td>
</tr>
<tr>
<td>19</td>
<td>0x731b90</td>
<td>Anti-jailbreak, anti-debug, anti-frida</td>
</tr>
<tr>
<td>20</td>
<td>0x359194</td>
<td>Anti-jailbreak</td>
</tr>
</tbody>
</table>
<p>Once we reduced the set of functions involved in the crash, we can combine dynamic analysis with Frida
and emulation with Unicorn.</p>
<h2 id="anti-debug">Anti-debug</h2>
<p>One of the redundant checks we can find in many functions (not only the constructors) are the
anti-debugs. They always come in two parts:</p>
<ol>
<li>Try to <em>&ldquo;kill&rdquo;</em> its own pid with the 0-signal</li>
<li>Check if PTRACE is flagged</li>
</ol>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#b00040">void</span> <span style="color:#00f">try_kill</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">const</span> <span style="color:#b00040">int</span> pid <span style="color:#666">=</span> getpid(); <span style="color:#408080;font-style:italic">// syscall@0x436cdc
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  <span style="color:#b00040">int</span> ret <span style="color:#666">=</span> kill(pid, <span style="color:#666">0</span>);   <span style="color:#408080;font-style:italic">// syscall@0x436d28
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>}
</span></span></code></pre></div><p>According to the man page of kill (<code>man 2 kill</code>), the signal <code>0</code> is used to check
that the <code>pid</code> given in the first parameter really exists.</p>
<blockquote>
<p>[&hellip;] A value of 0, however, will cause error checking to be performed (with no signal being sent). This can be used
to check the validity of pid.</p>
</blockquote>
<p>This <em>kill</em> operation is followed by three <code>PTRACE</code> checks:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// Done three times
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span><span style="color:#008000;font-weight:bold">inline</span> <span style="color:#b00040">bool</span> <span style="color:#00f">ptrace_detect</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">int32_t</span> opt[<span style="color:#666">4</span>] <span style="color:#666">=</span> {
</span></span><span style="display:flex;"><span>    CTL_KERN,
</span></span><span style="display:flex;"><span>    KERN_PROC,
</span></span><span style="display:flex;"><span>    KERN_PROC_PID,
</span></span><span style="display:flex;"><span>    getpid(),
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>  kinfo_proc info;
</span></span><span style="display:flex;"><span>  sysctl(opt, <span style="color:#666">4</span>, <span style="color:#666">&amp;</span>info, <span style="color:#008000;font-weight:bold">sizeof</span>(kinfo_proc), <span style="color:#008000;font-weight:bold">nullptr</span>, <span style="color:#666">0</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span> info.kp_proc.p_flag <span style="color:#666">&amp;</span> P_TRACED;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>These three <code>P_TRACED</code> checks <strong>always</strong> come together:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0x436cdc: getpid(): 6015
</span></span><span style="display:flex;"><span>0x436d28: kill(6015, 0): 0
</span></span><span style="display:flex;"><span>0x4374b0: sysctl(CTL_KERN, KERN_PROC, KERN_PROC_PID, 6015)
</span></span><span style="display:flex;"><span>0x4371e8: sysctl(CTL_KERN, KERN_PROC, KERN_PROC_PID, 6015)
</span></span><span style="display:flex;"><span>0x437398: sysctl(CTL_KERN, KERN_PROC, KERN_PROC_PID, 6015)
</span></span></code></pre></div><h2 id="frida-detection">Frida Detection</h2>
<p>Frida is detected by the application through its client-server mode, which binds the localhost on the port <code>27042</code>.
When PokemonGO is starting, it tries to open a socket on this port and if it manages to connect, it tests the Frida handshake.</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0x00e3b8: getifaddrs(0x16b7fb518): 0x0
</span></span><span style="display:flex;"><span>0x016990: socket(&#39;IPV4&#39;, &#39;TCP&#39;, &#39;0&#39;): 0x8
</span></span><span style="display:flex;"><span>0x019d60: bind(&#39;PF_INET&#39;, 0x8, &#39;127.0.0.1:27042&#39;)
</span></span><span style="display:flex;"><span>0x01805c: close(0x8)
</span></span><span style="display:flex;"><span>0x016990: socket(&#39;IPV4&#39;, &#39;TCP&#39;, &#39;0&#39;): 0x8
</span></span><span style="display:flex;"><span>0x019d60: bind(&#39;PF_INET&#39;, 0x8, &#39;192.168.0.26:27042&#39;)
</span></span><span style="display:flex;"><span>0x01805c: close(0x8)
</span></span><span style="display:flex;"><span>0x00e3ec: freeifaddrs(0x10601ac00): 0x105360a00
</span></span></code></pre></div><p>The application also iterates over the list of the libraries loaded in memory with the
<code>_dyld_image_count</code>/<code>_dyld_get_image_name</code> functions. Nevertheless, it seems that they are not used to detect
Frida libraries artifacts (like <code>FridaGadget.dylib</code>).</p>
<h2 id="jailbreak-detection">Jailbreak Detection</h2>
<p>The application implements jailbreak detection by checking if some files are accessible or not on the device.
Most of the checks are done by using the <code>access()</code> syscalls that are inlined in different places:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0x44c390: access(&#39;/bin/grep&#39;, 0x0)
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>0x7326b0: access(&#39;/private/var/checkra1n.dmg&#39;, 0x0)
</span></span></code></pre></div><p>The list of the checked files is given in the <a href="#annexes">annexes of the blog post</a>.</p>
<div class="alert alert-info" role="alert"  style="border: none !important; background-color: #FAFCFF">
  This list is very close to <a href="https://github.com/XsF1re/vnodebypass/blob/870b21fd3566736cca285355b4faf7f289baa4d5/layout/usr/share/vnodebypass/hidePathList.plist">vnodebypass/hidePathList.plist</a>
</div>
<p>In addition to <em>raw</em> <code>access</code> syscall, the application enhances its detection by creating a symbolic link of the
root directory in a temporary app data directory:</p>
<pre tabindex="0"><code>0x734e08: symlink(&#39;/Applications/..&#39;, &#39;/private/var/mobile/Containers/Data/Application/D933FBC9-90E7-4584-851E-CE2D5E900446/tmp/WCH38bnM0x101a9e7d0&#39;)
</code></pre><p>Then, it performs the same checks with the app data directory as prefix: <code>[...]/tmp/WCH38bnM0x101a9e7d0</code>:</p>
<pre tabindex="0"><code>0x7376d8: access(&#39;/private/var/mobile/Containers/Data/Application/D933FBC9-90E7-4584-851E-CE2D5E900446/tmp/3Odis0x101a9dfd0/usr/bin/passwd&#39;, 0x0)
</code></pre><h2 id="signature-check">Signature Check</h2>
<p>At some point, one function checks the integrity of the signature of the <code>pokemongo</code> binary.
This check starts by opening the main <code>pokemongo</code> binary from <strong>the disk</strong>:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0x7392ec: add  x0, x19, #6,lsl#12
</span></span><span style="display:flex;"><span>0x7392f0: add  x0, x0, #0x540
</span></span><span style="display:flex;"><span>0x7392f4: mov  w1, #0x1000000
</span></span><span style="display:flex;"><span>0x7392f8: mov  x2, #0
</span></span><span style="display:flex;"><span>0x7392fc: svc  0x80               ; x16 -&gt; SYS_open = 5
</span></span><span style="display:flex;"><span>// open(&#39;/private/var/containers/Bundle/Application/[...]/pokemongo.app/pokemongo&#39;): fd_pgo
</span></span></code></pre></div><p>Then, it reads the beginning of the file in a stack buffer:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0x74b494: ldr  x0, [x19, #0xc0]  ; fd
</span></span><span style="display:flex;"><span>0x74b498: ldr  x1, [x19, #0x130] ; buff
</span></span><span style="display:flex;"><span>0x74b49c: ldr  x2, [x19, #0xb8]  ; buff_size
</span></span><span style="display:flex;"><span>0x74b4a0: svc  0x80              ; x16 -&gt; SYS_read = 3
</span></span><span style="display:flex;"><span>// uint8_t macho_head[0x4167];
</span></span><span style="display:flex;"><span>// 0x74b4a0: read(fd_pgo, macho_header, 0x4167);
</span></span></code></pre></div><p>to iterate over the Mach-O load commands:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>; x8 points to the read&#39;s buffer
</span></span><span style="display:flex;"><span>0x73942c: ldr w8, [x8, #0x10]  ; Number of LC_COMMANDS
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>for (size_t i = 0; i &lt; nb_cmds; ++i) {
</span></span><span style="display:flex;"><span>  0x74bc40: ldr w10, [x9, #4] ; Command&#39;s size
</span></span><span style="display:flex;"><span>  0x74ade4: ldr w9,  [x9]     ; command&#39;s type
</span></span><span style="display:flex;"><span>  if (cmd.type == LC_CODE_SIGNATURE) {
</span></span><span style="display:flex;"><span>    0x74b1b8: ldr w10, [x10, #8]  ; read signature offset -&gt; 0xc3d0
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>With the offset of the Mach-O <code>LC_CODE_SIGNATURE</code> command, it reads the raw signature using the
<code>lseek/read</code> syscalls:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>uint8_t sig_header[0x205];
</span></span><span style="display:flex;"><span>0x73a978: lseek(fd_pgo, LC_CODE_SIGNATURE offset, 0x0)
</span></span><span style="display:flex;"><span>0x73aecc: read(fd_pgo, &amp;sig_header, 0x205);
</span></span></code></pre></div><p>The raw signature buffer is processed by chunks of 10 bytes in
a function that looks like a checksum:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>[...]
</span></span><span style="display:flex;"><span>0x73ad58:  ldrsb w13, [x12]
</span></span><span style="display:flex;"><span>0x73ad5c:  mov w14, #83
</span></span><span style="display:flex;"><span>0x73ad60:  sub w13, w14, w13
</span></span><span style="display:flex;"><span>0x73ad64:  ldrsb w14, [x12, #1]
</span></span><span style="display:flex;"><span>0x73ad68:  mov w15, #87
</span></span><span style="display:flex;"><span>0x73ad6c:  sub w14, w15, w14
</span></span><span style="display:flex;"><span>0x73ad70:  ldrsb w16, [x12, #2]
</span></span><span style="display:flex;"><span>0x73ad74:  mov w17, #53
</span></span><span style="display:flex;"><span>0x73ad78:  sub w16, w17, w16
</span></span><span style="display:flex;"><span>0x73ad7c:  ldrsb w17, [x12, #3]
</span></span><span style="display:flex;"><span>0x73ad80:  mov w0, #52
</span></span><span style="display:flex;"><span>0x73ad84:  sub w17, w0, w17
</span></span><span style="display:flex;"><span>0x73ad88:  ldrsb w0, [x12, #4]
</span></span><span style="display:flex;"><span>0x73ad8c:  sub w0, w15, w0
</span></span><span style="display:flex;"><span>0x73ad90:  ldrsb w1, [x12, #5]
</span></span><span style="display:flex;"><span>0x73ad94:  mov w2, #51
</span></span><span style="display:flex;"><span>0x73ad98:  sub w1, w2, w1
</span></span><span style="display:flex;"><span>0x73ad9c:  ldrsb w2, [x12, #6]
</span></span><span style="display:flex;"><span>0x73ada0:  mov w3, #54
</span></span><span style="display:flex;"><span>0x73ada4:  sub w2, w3, w2
</span></span><span style="display:flex;"><span>0x73ada8:  ldrsb w3, [x12, #7]
</span></span><span style="display:flex;"><span>0x73adac:  sub w15, w15, w3
</span></span><span style="display:flex;"><span>0x73adb0:  ldrsb w3, [x12, #8]
</span></span><span style="display:flex;"><span>0x73adb4:  mov w4, #78
</span></span><span style="display:flex;"><span>0x73adb8:  sub w3, w4, w3
</span></span><span style="display:flex;"><span>0x73adbc:  ldrsb w12, [x12, #9]
</span></span><span style="display:flex;"><span>0x73adc0:  mov w4, #70
</span></span><span style="display:flex;"><span>0x73adc4:  sub w4, w4, w12
</span></span><span style="display:flex;"><span>[...]
</span></span></code></pre></div><p>I did not manage to identify the underlying checksum algorithm, but it involves square multiplications and
the key(?): <code>SW5436NF</code></p>
<h2 id="control-fault-injection">Control-Fault Injection</h2>
<p>Once we determined the functions involved in the detections, we might want to disable them in order to
run the game smoothly.
Actually, PokemonGO is protected against such bypass with global variables that assert if a function
ran successfully or not.</p>
<p>This protection is equivalent to the following piece of code:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">static</span> <span style="color:#008000;font-weight:bold">constexpr</span> uintptr_t GOOD <span style="color:#666">=</span> <span style="color:#666">0x00627178</span>; <span style="color:#408080;font-style:italic">// bqx ?
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span><span style="color:#008000;font-weight:bold">static</span> uintptr_t MAGIC_CFI <span style="color:#666">=</span> <span style="color:#666">0xdeadc0de</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>__attribute__((constructor))
</span></span><span style="display:flex;"><span><span style="color:#b00040">void</span> frida_detect() {
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">if</span> (is_frida_running()) {
</span></span><span style="display:flex;"><span>    crash();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  MAGIC_CFI <span style="color:#666">=</span> GOOD;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>__attribute__((constructor))
</span></span><span style="display:flex;"><span><span style="color:#b00040">void</span> control_fault_check() {
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">if</span> (MAGIC_CFI <span style="color:#666">!=</span> GOOD) {
</span></span><span style="display:flex;"><span>    crash();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>If we only disable <code>frida_detect()</code>, the application will crash because of <code>control_fault_check()</code>.</p>
<p>We could bypass this protection by identifying the address of the
<code>MAGIC_CFI</code> in the <code>__data</code> section, or by disabling the <code>control_fault_check()</code>.</p>
<h2 id="what-about-lief">What about LIEF?</h2>
<p>As mentioned in the introduction, it started with an ongoing feature to parse Mach-O files from memory.
Basically, LIEF will<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> enable to parse Mach-O files<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> from an absolute address with this kind of API:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// 0x10234400 -&gt; start of the Mach-O file
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span><span style="color:#008000;font-weight:bold">auto</span> bin <span style="color:#666">=</span> LIEF<span style="color:#666">::</span>MachO<span style="color:#666">::</span>Parser<span style="color:#666">::</span>parse_from_memory(<span style="color:#666">0x10234400</span>);
</span></span></code></pre></div><p>Depending on the user&rsquo;s needs, the <code>write()</code> operation will optionally undo all the relocations and the symbol bindings.
This could be useful if we aim at (re)running the file dumped (on a Apple M1?).</p>
<p>As expected, the strings used within the <span class="blue">NianticLabsPlugin</span> library are encoded
by the obfuscator. We could statically analyze the decoding routine (cf. Tim Blazytko&rsquo;s <a href="https://synthesis.to/2021/06/30/automating_string_decryption.html">blog post</a>)
,but another technique consists in using a property of the obfuscator&rsquo;s string encoding mechanism.</p>
<p>It seems that the obfuscator put <strong>all</strong> the strings<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> in the data section and decrypts <strong>all of them</strong>
in a <strong>single</strong> constructor function.</p>
<p>For instance, if we have the string &ldquo;TOKEN&rdquo; to protect in the following functions:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#b00040">void</span> <span style="color:#00f">protect_me</span>() {
</span></span><span style="display:flex;"><span>  sensitive(<span style="color:#ba2121">&#34;TOKEN&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#b00040">void</span> <span style="color:#00f">protect_me_2</span>() {
</span></span><span style="display:flex;"><span>  sensitive(<span style="color:#ba2121">&#34;TOKEN2&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The obfuscator transforms and decodes the strings into something like:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// __data section
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span><span style="color:#008000;font-weight:bold">static</span> <span style="color:#b00040">char</span> var_TOKEN[]   <span style="color:#666">=</span> <span style="color:#ba2121">&#34;</span><span style="color:#b62;font-weight:bold">\x00\x1D\xDD\xEE\xAB</span><span style="color:#ba2121">&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">static</span> <span style="color:#b00040">char</span> var_TOKEN_2[] <span style="color:#666">=</span> <span style="color:#ba2121">&#34;</span><span style="color:#b62;font-weight:bold">\x00\x1D\xDD\xEE\xAF</span><span style="color:#ba2121">&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>__attribute__((constructor))
</span></span><span style="display:flex;"><span><span style="color:#b00040">void</span> decode_strings() {
</span></span><span style="display:flex;"><span>  decode(var_TOKEN);
</span></span><span style="display:flex;"><span>  decode(var_TOKEN_2);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#b00040">void</span> <span style="color:#00f">protect_me</span>() {
</span></span><span style="display:flex;"><span>  sensitive(var_TOKEN);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#b00040">void</span> <span style="color:#00f">protect_me_2</span>() {
</span></span><span style="display:flex;"><span>  sensitive(var_TOKEN_2);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Since <strong>all</strong> the strings are decoded at once in one of the first constructors, if we manage to dump the binary
right after this constructor,
we can recover the original strings for free.</p>
<p>Programmatically, it can be done using (again) frida-gum SDK with the following pseudocode:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// Hook associated with ImageLoader::containsAddress
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span><span style="color:#b00040">void</span> <span style="color:#00f">native_listener_on_enter</span>(GumInvocationListener<span style="color:#666">*</span> listener,
</span></span><span style="display:flex;"><span>                              GumInvocationContext<span style="color:#666">*</span> ic) {
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">static</span> size_t CTOR_ID <span style="color:#666">=</span> <span style="color:#666">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">const</span> uintptr_t ctor_function_addr <span style="color:#666">=</span> ic<span style="color:#666">-&gt;</span>cpu_context<span style="color:#666">-&gt;</span>x[<span style="color:#666">1</span>];
</span></span><span style="display:flex;"><span>  std<span style="color:#666">::</span>string libname <span style="color:#666">=</span> module_from_addr(ctor_function_addr);
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">if</span> (libname <span style="color:#666">==</span> <span style="color:#ba2121">&#34;NianticLabsPlugin&#34;</span> <span style="color:#666">&amp;&amp;</span> CTOR_ID<span style="color:#666">++</span> <span style="color:#666">==</span> <span style="color:#666">3</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">const</span> uintptr_t base_address <span style="color:#666">=</span> base_addr_from_ptr(ctor_function_addr);
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">auto</span> bin <span style="color:#666">=</span> LIEF<span style="color:#666">::</span>MachO<span style="color:#666">::</span>Parser<span style="color:#666">::</span>parse_from_memory(base_address);
</span></span><span style="display:flex;"><span>    bin<span style="color:#666">-&gt;</span>write(<span style="color:#ba2121">&#34;/tmp/pokemongo_after_ctor.bin&#34;</span>); <span style="color:#408080;font-style:italic">// /tmp on the iPhone
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In the end, the dumped file contains the decoded strings:</p>
<p><img src="strings.png" alt="Data area after LIEF dump"></p>
<p>If we skim the <code>__data</code> section, we can also observe the following changes:</p>
<p><img src="data_dump.png" alt="Data area after LIEF dump"></p>
<p>A practiced eye might notice<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> that some strings of the section are actually
embedded in protobuf structures. We can confirm this observation by trying to infer the data as protobuf
types:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">from</span> <span style="color:#00f;font-weight:bold">.</span> <span style="color:#008000;font-weight:bold">import</span> proto_dump
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">import</span> <span style="color:#00f;font-weight:bold">lief</span>
</span></span><span style="display:flex;"><span>pgo <span style="color:#666">=</span> lief<span style="color:#666">.</span>parse(<span style="color:#ba2121">&#34;pokemongo_after_ctor.bin&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>start <span style="color:#666">=</span> <span style="color:#666">0x12A51A7</span>
</span></span><span style="display:flex;"><span>end   <span style="color:#666">=</span> <span style="color:#666">0x12A51E2</span>
</span></span><span style="display:flex;"><span>raw_proto <span style="color:#666">=</span> pgo<span style="color:#666">.</span>get_content_from_virtual_address(start, end <span style="color:#666">-</span> start)
</span></span><span style="display:flex;"><span><span style="color:#008000">print</span>(proto_dump(raw_proto))
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  #3 = 4
</span></span><span style="display:flex;"><span>  #4 (repeated) = 1 {
</span></span><span style="display:flex;"><span>    #1 = &#34;CheatReputation&#34;
</span></span><span style="display:flex;"><span>    #2 (repeated) = {
</span></span><span style="display:flex;"><span>      #1 = &#34;UNSET&#34;
</span></span><span style="display:flex;"><span>      #2 = 0
</span></span><span style="display:flex;"><span>    } {
</span></span><span style="display:flex;"><span>      #1 = &#34;BOT&#34;
</span></span><span style="display:flex;"><span>      #2 = 1
</span></span><span style="display:flex;"><span>    } {
</span></span><span style="display:flex;"><span>      #1 = &#34;SPOOFER&#34;
</span></span><span style="display:flex;"><span>      #2 = 2
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  #5 = 8
</span></span><span style="display:flex;"><span>  #8 = []
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="final-words">Final Words</h2>
<p>The application embeds other checks in the constructors and in the functions returned by <code>GetN2Api</code>. It can
make a good exercise for those that are interested in.</p>
<p>Generally speaking, the application and the protections are well designed since they slow down reverse engineers.
Nevertheless, <code>anti-{jb, frida, debug}</code> are quite difficult to protect as they need to interact with the OS
through functions or syscalls with unprotected parameters. As a result, and once identified, we can bypass them.</p>
<p>One technique consists in injecting a library with Frida&rsquo;s injector that aims at hooking
the <code>containsAddress()</code> to disable/patch the functions involved in the detections:</p>
<p><img src="jbfree.png" alt="PokemonGo Jailbreak bypass"></p>














  


<video class="mb-4" controls >
  <source src="pokemongo_jb_bypass.mp4" type="video/mp4">
</video>

<p>Nevertheless, this technique is <strong>not persistent</strong> and version-dependant.</p>
<p>After writing this post, it turned out that its structure is very close to <a href="https://hot3eed.github.io/2020/08/02/starling_p2_detections_mitigations.html">Reverse Engineering Starling Bank</a>.
In particular, we can find the same anti-debug and the same Frida detection routine. These similarities suggest
that these two application uses the same obfuscator that also provides <code>anti-{jb, frida, debug}</code> as built-in.</p>
<p>You might also be interested in the recent talk of <a href="https://twitter.com/elvanderb">Eloi Benoist-Vanderbeken</a> <a href="https://2021.pass-the-salt.org/">@Pass the Salt</a>
<a href="https://archives.pass-the-salt.org/Pass%20the%20SALT/2021/videos/PTS2021-Talk-01-JailBreak_detection.mp4">
  <i class="fas fa-laptop-code  pr-1 fa-fw"></i></a>
<a href="https://archives.pass-the-salt.org/Pass%20the%20SALT/2021/slides/PTS2021-Talk-01-JailBreak_detection.pdf">
  <i class="fas fa-file-pdf  pr-1 fa-fw"></i></a>
who detailed another approach to identify and bypass
jailbreak detections.</p>
<div class="alert alert-info" role="alert"  style="border: none !important; background-color: #FAFCFF">
  <a href="https://lief-project.github.io">LIEF</a> is a tool developed at <a href="https://www.quarkslab.com/">Quarkslab</a> along with
<a href="https://qbdi.quarkslab.com">QBDI</a> &amp; <a href="https://triton.quarkslab.com">Triton</a>.
</div>
<hr>
<h3 id="annexes">Annexes</h3>
<table>
<thead>
<tr>
<th>Files that trigger the JB detection</th>
<th>Files that should be present</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/.bootstrapped_electra</code></td>
<td><code>/cores</code></td>
</tr>
<tr>
<td><code>/Applications/Anemone.app</code></td>
<td><code>/dev/null</code></td>
</tr>
<tr>
<td><code>/Applications/Cydia.app</code></td>
<td><code>/etc/hosts</code></td>
</tr>
<tr>
<td><code>/Applications/SafeMode.app</code></td>
<td><code>/etc/passwd</code></td>
</tr>
<tr>
<td><code>/Library/Frameworks/CydiaSubstrate.framework</code></td>
<td><code>/sbin</code></td>
</tr>
<tr>
<td><code>/Library/MobileSubstrate/DynamicLibraries/FlyJB.dylb</code></td>
<td><code>/sbin/launchd</code></td>
</tr>
<tr>
<td><code>/Library/MobileSubstrate/MobileSubstrate.dylib</code></td>
<td><code>/sbin/mount</code></td>
</tr>
<tr>
<td><code>/Library/PreferenceBundles/LaunchInSafeMode.bundle</code></td>
<td><code>/usr</code></td>
</tr>
<tr>
<td><code>/Library/PreferenceLoader/Preferences/LaunchInSafeMode.plist</code></td>
<td></td>
</tr>
<tr>
<td><code>/Library/Themes</code></td>
<td></td>
</tr>
<tr>
<td><code>/Library/dpkg/info/com.inoahdev.launchinsafemode.list</code></td>
<td></td>
</tr>
<tr>
<td><code>/Library/dpkg/info/com.inoahdev.launchinsafemode.md5sums</code></td>
<td></td>
</tr>
<tr>
<td><code>/bin/bash</code></td>
<td></td>
</tr>
<tr>
<td><code>/bin/bunzip2</code></td>
<td></td>
</tr>
<tr>
<td><code>/bin/bzip2</code></td>
<td></td>
</tr>
<tr>
<td><code>/bin/cat</code></td>
<td></td>
</tr>
<tr>
<td><code>/bin/chgrp</code></td>
<td></td>
</tr>
<tr>
<td><code>/bin/chmod</code></td>
<td></td>
</tr>
<tr>
<td><code>/bin/chown</code></td>
<td></td>
</tr>
<tr>
<td><code>/bin/cp</code></td>
<td></td>
</tr>
<tr>
<td><code>/bin/grep</code></td>
<td></td>
</tr>
<tr>
<td><code>/bin/gzip</code></td>
<td></td>
</tr>
<tr>
<td><code>/bin/kill</code></td>
<td></td>
</tr>
<tr>
<td><code>/bin/ln</code></td>
<td></td>
</tr>
<tr>
<td><code>/bin/ls</code></td>
<td></td>
</tr>
<tr>
<td><code>/bin/mkdir</code></td>
<td></td>
</tr>
<tr>
<td><code>/bin/mv</code></td>
<td></td>
</tr>
<tr>
<td><code>/bin/sed</code></td>
<td></td>
</tr>
<tr>
<td><code>/bin/sh</code></td>
<td></td>
</tr>
<tr>
<td><code>/bin/su</code></td>
<td></td>
</tr>
<tr>
<td><code>/bin/tar</code></td>
<td></td>
</tr>
<tr>
<td><code>/binpack</code></td>
<td></td>
</tr>
<tr>
<td><code>/bootstrap</code></td>
<td></td>
</tr>
<tr>
<td><code>/chimera</code></td>
<td></td>
</tr>
<tr>
<td><code>/electra</code></td>
<td></td>
</tr>
<tr>
<td><code>/etc/apt</code></td>
<td></td>
</tr>
<tr>
<td><code>/etc/profile</code></td>
<td></td>
</tr>
<tr>
<td><code>/jb</code></td>
<td></td>
</tr>
<tr>
<td><code>/private/var/binpack</code></td>
<td></td>
</tr>
<tr>
<td><code>/private/var/checkra1n.dmg</code></td>
<td></td>
</tr>
<tr>
<td><code>/private/var/lib/apt</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/bin/diff</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/bin/hostinfo</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/bin/killall</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/bin/passwd</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/bin/recache</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/bin/tar</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/bin/which</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/bin/xargs</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/lib/SBInject</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/lib/SBInject.dylib</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/lib/TweakInject</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/lib/TweakInject.dylib</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/lib/TweakInjectMapsCheck.dylib</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/lib/libjailbreak.dylib</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/lib/libsubstitute.0.dylib</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/lib/libsubstitute.dylib</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/lib/libsubstrate.dylib</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/libexec/sftp-server</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/sbin/sshd</code></td>
<td></td>
</tr>
<tr>
<td><code>/usr/share/terminfo</code></td>
<td></td>
</tr>
<tr>
<td><code>/var/mobile/Library/.sbinjectSafeMode</code></td>
<td></td>
</tr>
<tr>
<td><code>/var/mobile/Library/Preferences/jp.akusio.kernbypass.plist</code></td>
<td></td>
</tr>
</tbody>
</table>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>iPhone 6 running on iOS 14.2 with checkra1n.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>We can identify them by trial and error.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>ETA: likely by the end of the year&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>The Mach-O format is very suitable for this feature as
the header in mapped in memory. Therefore, it eases the parsing.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>More generally, it can encode local data (strings, bytes arrays, &hellip;)&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>Protobuf strings can be identified as they usually start with <code>0xA</code>, <code>0xB</code>, followed by their lengths
and the string itself (see: <a href="https://developers.google.com/protocol-buffers/docs/encoding#strings">protocol-buffers/docs/encoding</a>)&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded><media:content medium="image" width="918" height="517" url="https://www.romainthomas.fr/post/21-07-pokemongo-anti-frida-jailbreak-bypass/featured.png"/></item><item><title>r2-pay: whitebox (part 2)</title><dc:creator>Romain Thomas</dc:creator><link>https://www.romainthomas.fr/post/20-09-r2con-obfuscated-whitebox-part2/</link><pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/20-09-r2con-obfuscated-whitebox-part2/</guid><description>This second blog post explains how to recover the whitebox&amp;rsquo;s key from the obfuscated library libnative-lib.so</description><content:encoded><![CDATA[<style>
  .green {
    color:green;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .blue {
    color: blue;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }
  .orange {
    color: #FF6347;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .red {
    color: #df2b04;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .hl-comment {
    color: #df2b04;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .hl-keyword {
    color: #A90D91;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .hl-literal {
    color: #1C01CE;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .hl-preproc {
    color: #633820;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .hl-strings {
    color: #C41A16;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }
  .yellow {
    color: #CC7000;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

#
</style>
<h2 id="introduction">Introduction</h2>
<p>In the <a href="/post/20-09-r2con-obfuscated-whitebox-part1/">first part</a> of this write-up, we described the
anti-frida, anti-debug and anti-root techniques used in the application and how to remove most of them.</p>
<p>This second part digs into the JNI function <code>gXftm3iswpkVgBNDUp</code> and the underlying whitebox implementation.</p>
<h2 id="library-shimming">Library Shimming</h2>
<p>The inputs of the function <code>gXftm3iswpkVgBNDUp</code> are provided by the GUI widgets and the function
is triggered when we press the <em>Generate R2Coin</em> button.
Nevertheless, the behavior of <code>gXftm3iswpkVgBNDUp</code> does not rely on UI features nor
the application&rsquo;s context<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>To take a closer look at the logic of <code>gXftm3iswpkVgBNDUp</code>, it would be pretty useful to be able to feed
the function&rsquo;s inputs with our <strong>own standalone binary</strong>. Basically, we would like to achieve this kind
of interface:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#b00040">int</span> <span style="color:#00f">main</span>(<span style="color:#b00040">int</span> argc, <span style="color:#b00040">char</span><span style="color:#666">**</span> argv) {
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">void</span><span style="color:#666">*</span> dlopen(<span style="color:#ba2121">&#34;libnative-lib.so&#34;</span>, RTLD_NOW);
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  jbyteArray out <span style="color:#666">=</span> gXftm3iswpkVgBNDUp(env, ...);
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span> <span style="color:#666">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This technique is not new and has been already described in a blog post by <a href="https://twitter.com/caleb_fenton">Caleb Fenton</a><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. The idea is to get
the <code>JNIEnv* env</code> variable with <code>JNI_CreateJavaVM</code> which is exported by the Android runtime: <code>libart.so</code>.</p>
<p>Once we have this variable, we can call the <code>gXftm3iswpkVgBNDUp</code> function as well as manipulating the JNI buffers:</p>
<ul>
<li><code>env-&gt;NewByteArray()</code></li>
<li><code>env-&gt;GetArrayLength()</code></li>
<li>&hellip;</li>
</ul>
<p><img src="shim_mechanism.png" alt="Shimming of whitebox library"></p>
<p>Long story short, we can instantiate the Android runtime with the following piece of code:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#b00040">int</span> <span style="color:#00f">main</span>(<span style="color:#b00040">int</span> argc, <span style="color:#b00040">char</span><span style="color:#666">**</span> argv) {
</span></span><span style="display:flex;"><span>  JavaVMOption opt[<span style="color:#666">2</span>];
</span></span><span style="display:flex;"><span>  opt[<span style="color:#666">0</span>].optionString <span style="color:#666">=</span> <span style="color:#ba2121">&#34;-Djava.class.path=/data/local/tmp/re.pwnme.1.0.apk&#34;</span>;
</span></span><span style="display:flex;"><span>  opt[<span style="color:#666">1</span>].optionString <span style="color:#666">=</span> <span style="color:#ba2121">&#34;-Djava.library.path=/data/local/tmp&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  JavaVMInitArgs args;
</span></span><span style="display:flex;"><span>  args.version            <span style="color:#666">=</span> JNI_VERSION_1_6;
</span></span><span style="display:flex;"><span>  args.options            <span style="color:#666">=</span> opt;
</span></span><span style="display:flex;"><span>  args.nOptions           <span style="color:#666">=</span> <span style="color:#666">2</span>;
</span></span><span style="display:flex;"><span>  args.ignoreUnrecognized <span style="color:#666">=</span> JNI_FALSE;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">void</span><span style="color:#666">*</span> handler <span style="color:#666">=</span> dlopen(<span style="color:#ba2121">&#34;/system/lib64/libart.so&#34;</span>, RTLD_NOW);
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">auto</span> JNI_CreateJavaVM_f <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span><span style="color:#008000;font-weight:bold">decltype</span>(JNI_CreateJavaVM)<span style="color:#666">*&gt;</span>(dlsym(handler, <span style="color:#ba2121">&#34;JNI_CreateJavaVM&#34;</span>));
</span></span><span style="display:flex;"><span>  JNI_CreateJavaVM_f(<span style="color:#666">&amp;</span>jvm, <span style="color:#666">&amp;</span>env, <span style="color:#666">&amp;</span>args);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then, we can resolve the <code>gXftm3iswpkVgBNDUp</code> function with the base address of <code>libnative-lib.so</code>
and its offset <code>0x9B41C</code>:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#b00040">void</span><span style="color:#666">*</span> hdl <span style="color:#666">=</span> dlopen(<span style="color:#ba2121">&#34;libnative-lib.so&#34;</span>, RTLD_NOW);
</span></span><span style="display:flex;"><span>uintptr_t base_address <span style="color:#666">=</span> get_base_address(<span style="color:#ba2121">&#34;libnative-lib.so&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">using</span> gXftm3iswpkVgBNDUp_t <span style="color:#666">=</span> jbyteArray(<span style="color:#666">*</span>)(JNIEnv<span style="color:#666">*</span>, jobject, jbyteArray, jbyte);
</span></span><span style="display:flex;"><span>gXftm3iswpkVgBNDUp <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span>gXftm3iswpkVgBNDUp_t<span style="color:#666">&gt;</span>(base_address <span style="color:#666">+</span> <span style="color:#666">0x9B41C</span>);
</span></span></code></pre></div><p>Finally, we can run the function with our own inputs:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#666">::</span>string pin_amount <span style="color:#666">=</span> <span style="color:#ba2121">&#34;0000123400004567&#34;</span>;
</span></span><span style="display:flex;"><span>jbyteArray array <span style="color:#666">=</span> convert_to_jbyteArray(pin_amount, ptr);
</span></span><span style="display:flex;"><span>jbyteArray jencrypted_buffer <span style="color:#666">=</span> gXftm3iswpkVgBNDUp(env, <span style="color:#008000;font-weight:bold">nullptr</span>, array, <span style="color:#666">0xF0</span>);
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">const</span> std<span style="color:#666">::</span>vector<span style="color:#666">&lt;</span><span style="color:#b00040">uint8_t</span><span style="color:#666">&gt;</span> encrypted_buffer <span style="color:#666">=</span> from_jbytes(jencrypted_buffer);
</span></span><span style="display:flex;"><span>std<span style="color:#666">::</span>string hex_str <span style="color:#666">=</span> to_hex(encrypted_buffer);
</span></span><span style="display:flex;"><span>LOG_INFO(<span style="color:#ba2121">&#34;{} --&gt; {}&#34;</span>, pin_amount, ref_str);
</span></span></code></pre></div><div class="alert alert-info" role="alert"  style="border: none !important; background-color: #FAFCFF">
  The whole implementation is available <a href="https://github.com/romainthomas/r2pay/blob/master/shim-whitebox">here <i class="fab fa-github"></i></a>.
</div>
<h2 id="function-tracing">Function Tracing</h2>
<p>Now that we are able to run the <code>gXftm3iswpkVgBNDUp</code> function without the GUI layer, we can easily
create an interface with <a href="https://qbdi.quarkslab.com">QBDI</a>:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>VM vm;
</span></span><span style="display:flex;"><span>vm.addInstrumentedModule(<span style="color:#ba2121">&#34;libnative-lib.so&#34;</span>);
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>jbyteArray array <span style="color:#666">=</span> to_jarray(pin_amount, ptr);
</span></span><span style="display:flex;"><span>jbyteArray qbdi_encrypted_buffer;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vm.call(
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic">/* ret    */</span> <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span>uintptr_t<span style="color:#666">*&gt;</span>(<span style="color:#666">&amp;</span>qbdi_encrypted_buffer),
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic">/* target */</span> <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span>uintptr_t<span style="color:#666">&gt;</span>(gXftm3iswpkVgBNDUp),
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic">/* params */</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#408080;font-style:italic">/* p_0: JNIEnv* */</span>      <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span>rword<span style="color:#666">&gt;</span>(env),
</span></span><span style="display:flex;"><span>      <span style="color:#408080;font-style:italic">/* p_1: jobject thiz */</span> <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span>rword<span style="color:#666">&gt;</span>(<span style="color:#008000;font-weight:bold">nullptr</span>),
</span></span><span style="display:flex;"><span>      <span style="color:#408080;font-style:italic">/* p_2: inbuffer */</span>     <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span>rword<span style="color:#666">&gt;</span>(array),
</span></span><span style="display:flex;"><span>                              <span style="color:#666">0xF0</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><p>The execution in QBDI <strong>without user&rsquo;s callbacks</strong> takes about <strong>3min 30s</strong> which is quite huge compared to
the <strong>real execution</strong> that takes about <strong>853ms</strong>:</p>
<p><img src="benchmark.svg" alt="Performances with different configurations"></p>
<p>This overhead is mostly due to the function <code>0x1038f0</code> that is executed ~20 000 times. After a quick
analysis, it turns out that this function is not relevant to instrument to break the whitebox.
We can force its <em>real</em> execution
(i.e. outside QBDI) <strong>by removing the function&rsquo;s address from the instrumented range</strong><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">static</span> <span style="color:#008000;font-weight:bold">constexpr</span> uintptr_t HEAVY_FUNCTION <span style="color:#666">=</span> <span style="color:#666">0x1038f0</span>;
</span></span><span style="display:flex;"><span>vm.removeInstrumentedRange(
</span></span><span style="display:flex;"><span>  base_address <span style="color:#666">+</span> HEAVY_FUNCTION,
</span></span><span style="display:flex;"><span>  base_address <span style="color:#666">+</span> HEAVY_FUNCTION <span style="color:#666">+</span> <span style="color:#666">1</span>
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><p>This small adjustment <strong>drops the execution to 3'30sec</strong>.</p>
<hr>
<p>Some cryptographic algorithms can be fingerprinted either with predefined constants or with their memory accesses.
According to the Quarkslab&rsquo;s blog post: <a href="https://blog.quarkslab.com/differential-fault-analysis-on-white-box-aes-implementations.html">Differential Fault Analysis on White-box AES Implementations</a>,
the whitebox lookup tables are likely to be stored in the <code>.data, .rodata, ...</code> sections.</p>
<p>By looking at the sizes of these sections, only the <code>.data</code> section seems to have an appropriate size.
We can generate a memory trace on this section to see if we can outline some patterns.
It can be made with the following piece of code:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>vm.recordMemoryAccess(MEMORY_READ_WRITE);
</span></span><span style="display:flex;"><span>vm.addMemRangeCB(
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic">/* .data start address           */</span> base_address <span style="color:#666">+</span> <span style="color:#666">0x127000</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic">/* .data end address             */</span> base_address <span style="color:#666">+</span> <span style="color:#666">0x127000</span> <span style="color:#666">+</span> <span style="color:#666">0x8e000</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic">/* Record both: reads and writes */</span> MEMORY_READ_WRITE,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic">/* Memory callback */</span>
</span></span><span style="display:flex;"><span>    [] (VM<span style="color:#666">*</span> vm, GPRState<span style="color:#666">*</span>, FPRState<span style="color:#666">*</span>, <span style="color:#b00040">void</span><span style="color:#666">*</span> data) {
</span></span><span style="display:flex;"><span>      <span style="color:#008000;font-weight:bold">auto</span> ctx <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span>qbdi_ctx<span style="color:#666">*&gt;</span>(data);
</span></span><span style="display:flex;"><span>      <span style="color:#408080;font-style:italic">/*
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">       * &#39;for&#39; loop since on AArch64 we can have multiple reads / writes
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">       * at once. (e.g. stp x0, x1, [sp, #128])
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">       */</span>
</span></span><span style="display:flex;"><span>      <span style="color:#008000;font-weight:bold">for</span> (<span style="color:#008000;font-weight:bold">const</span> MemoryAccess<span style="color:#666">&amp;</span> <span style="color:#a0a000">mem_access</span> : vm<span style="color:#666">-&gt;</span>getInstMemoryAccess()) {
</span></span><span style="display:flex;"><span>        ctx<span style="color:#666">-&gt;</span>trace<span style="color:#666">-&gt;</span>push_back({
</span></span><span style="display:flex;"><span>            mem_access.instAddress   <span style="color:#666">-</span> base_address,
</span></span><span style="display:flex;"><span>            mem_access.accessAddress <span style="color:#666">-</span> base_address,
</span></span><span style="display:flex;"><span>            mem_access.size,
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#008000;font-weight:bold">return</span> VMAction<span style="color:#666">::</span>CONTINUE;
</span></span><span style="display:flex;"><span>    }, <span style="color:#666">&amp;</span>ctx);
</span></span></code></pre></div><div class="alert alert-info" role="alert"  style="border: none !important; background-color: #FAFCFF">
  Generating the memory trace takes about 11sec which is acceptable.
</div>
<p>It leads to the following graph in which we can notice a characteristic pattern at the end of the trace:</p>
<p><img src="memory_trace.png" alt="Memory trace generated with QBDI"></p>
<h2 id="fault-injection">Fault Injection</h2>
<p>The pattern at the end of the trace is quite characteristic of AES-128 where we can identify 10 rounds.
<img src="rounds.png" alt="AES rounds"></p>
<p>We now have all the necessary information to make a <em>fault injection attack</em>:</p>
<ol>
<li>We can identify the 9th round</li>
<li>We can <strong>accurately</strong> fault the <code>.data</code> section thanks to the memory trace</li>
</ol>
<p><img src="injection.png" alt="Fault injection in the 9th round"></p>
<div class="alert alert-info" role="alert"  style="border: none !important; background-color: #FAFCFF">
  The memory trace is available in the <a href="https://github.com/romainthomas/r2pay/blob/master/assets/mem_trace.json"><i class="fab fa-github"></i> mem_trace.json</a> file of the repository.
</div>
<p>To efficiently make
the injection, we can first reduce the memory addresses to only keep those that are used in the last 2 rounds:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>trace_file <span style="color:#666">=</span> CWD <span style="color:#666">/</span> <span style="color:#ba2121">&#34;..&#34;</span> <span style="color:#666">/</span> <span style="color:#ba2121">&#34;assets&#34;</span> <span style="color:#666">/</span> <span style="color:#ba2121">&#34;mem_trace.json&#34;</span>
</span></span><span style="display:flex;"><span>trace <span style="color:#666">=</span> json<span style="color:#666">.</span>loads(trace_file<span style="color:#666">.</span>read_bytes())[<span style="color:#666">0</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"># Keep the entries that are involved in the last 2-rounds (empirical number)</span>
</span></span><span style="display:flex;"><span>nice_trace <span style="color:#666">=</span> trace[<span style="color:#666">-</span><span style="color:#666">1000</span>:]
</span></span></code></pre></div><p>Then, we can use our shim mechanism to inject the faults in the <code>.data</code> section with the addresses previously selected.
Moreover, we can reduce the set of <code>.data</code> addresses with the faults that introduce exactly <strong>4 differences</strong> in the ciphertext:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// Make sure the .data section is writable
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>mprotect(
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span><span style="color:#b00040">void</span><span style="color:#666">*&gt;</span>(base_address <span style="color:#666">+</span> <span style="color:#408080;font-style:italic">/* .data */</span> <span style="color:#666">0x127000</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#666">0x8e000</span>,
</span></span><span style="display:flex;"><span>  PROT_READ <span style="color:#666">|</span> PROT_WRITE
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">for</span> (uintptr_t <span style="color:#a0a000">fault_addr</span> : selected_addresses) {
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">uint8_t</span><span style="color:#666">&amp;</span> target_byte <span style="color:#666">=</span> <span style="color:#666">*</span><span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span><span style="color:#b00040">uint8_t</span><span style="color:#666">*&gt;</span>(base_address <span style="color:#666">+</span> fault_addr);
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">uint8_t</span> backup <span style="color:#666">=</span> target_byte;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic">// Fault 1 byte:
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  target_byte <span style="color:#666">^=</span> <span style="color:#666">0x33</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic">// Run the whitebox with the faulty byte
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  <span style="color:#008000;font-weight:bold">const</span> std<span style="color:#666">::</span>vector<span style="color:#666">&lt;</span><span style="color:#b00040">uint8_t</span><span style="color:#666">&gt;</span> encrypted <span style="color:#666">=</span> encrypt(msg);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic">// Restore the original byte
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  target_byte <span style="color:#666">=</span> backup;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic">// Compute the number of errors
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  <span style="color:#408080;font-style:italic">// ...
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>}
</span></span></code></pre></div><p>Finally, with the subset of the addresses that affect exactly 4 bytes, we can generate several faults for a given
address:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">for</span> (uintptr_t <span style="color:#a0a000">nice_fault_addr</span> : four_bytes_fault_addresses) {
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">for</span> (size_t i <span style="color:#666">=</span> <span style="color:#666">0</span>; i <span style="color:#666">&lt;</span> <span style="color:#666">255</span>; <span style="color:#666">++</span>i) {
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">const</span> std<span style="color:#666">::</span>vector<span style="color:#666">&lt;</span><span style="color:#b00040">uint8_t</span><span style="color:#666">&gt;&amp;</span> output <span style="color:#666">=</span> inject_fault(addr, PIN_AMOUNT, i);
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">const</span> size_t nb_errors <span style="color:#666">=</span> get_error(genuine_value, output);
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">if</span> (nb_errors <span style="color:#666">==</span> <span style="color:#666">4</span> and unique.insert(output).second) {
</span></span><span style="display:flex;"><span>      <span style="color:#408080;font-style:italic">// Record the entry ...
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The aforementioned code gives an idea about how to generate the faults. One can find the whole implementation in
this file: <a href="https://github.com/romainthomas/r2pay/blob/master/shim-whitebox/src/main.cpp#L343-L365">shim-whitebox/src/main.cpp</a> that produces
this set of files <a href="https://github.com/romainthomas/r2pay/blob/master/assets/wb-traces">assets/wb-traces</a>.</p>
<h2 id="key-extraction">Key Extraction</h2>
<p>Thanks to the <a href="https://github.com/SideChannelMarvels"><i class="fab fa-github"></i> Side-Channel Marvels</a> project,
we can use <a href="https://github.com/SideChannelMarvels/JeanGrey">JeanGrey</a> &mdash; developed by Philippe Teuwen &mdash; to recover the whitebox&rsquo;s key from the faulty traces:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">import</span> <span style="color:#00f;font-weight:bold">pathlib</span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">import</span> <span style="color:#00f;font-weight:bold">phoenixAES</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>CWD <span style="color:#666">=</span> pathlib<span style="color:#666">.</span>Path(__file__)<span style="color:#666">.</span>parent
</span></span><span style="display:flex;"><span>trace_dir <span style="color:#666">=</span> CWD <span style="color:#666">/</span> <span style="color:#ba2121">&#34;..&#34;</span> <span style="color:#666">/</span> <span style="color:#ba2121">&#34;assets&#34;</span> <span style="color:#666">/</span> <span style="color:#ba2121">&#34;wb-traces&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">for</span> f <span style="color:#a2f;font-weight:bold">in</span> trace_dir<span style="color:#666">.</span>iterdir():
</span></span><span style="display:flex;"><span>    x <span style="color:#666">=</span> phoenixAES<span style="color:#666">.</span>crack_file(f)
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">if</span> x <span style="color:#a2f;font-weight:bold">is</span> <span style="color:#a2f;font-weight:bold">not</span> <span style="color:#008000;font-weight:bold">None</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#008000">print</span>(x, f<span style="color:#666">.</span>name)
</span></span></code></pre></div><p>It provides the following results which enable to retrieve the key:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> python wb_key_recovery.py
</span></span><span style="display:flex;"><span><span style="color:#888">..8D....7F............9A....79.. injection-1a930d.trace
</span></span></span><span style="display:flex;"><span><span style="color:#888">..8D....7F............9A....79.. injection-1a95bd.trace
</span></span></span><span style="display:flex;"><span><span style="color:#888">....19....62....B0............8F injection-1a91b2.trace
</span></span></span><span style="display:flex;"><span><span style="color:#888">....19....62....B0............8F injection-1a8fdf.trace
</span></span></span><span style="display:flex;"><span><span style="color:#888">76............1E....D3....E1.... injection-1a8549.trace
</span></span></span><span style="display:flex;"><span><span style="color:#888">......E1....A0....CD....28...... injection-1a8978.trace
</span></span></span><span style="display:flex;"><span><span style="color:#888">....19....62....B0............8F injection-1a90ce.trace
</span></span></span><span style="display:flex;"><span><span style="color:#888">....19....62....B0............8F injection-1a8efd.trace
</span></span></span><span style="display:flex;"><span><span style="color:#888">r 2 p 4 y 1 s N 0 w S e c u r 3
</span></span></span></code></pre></div><p>Finally, we can verify that <strong>r2p4y1sN0wSecur3</strong> is the right key by trying to decrypt <code>9497cdf1df2600e7f63778d0ae91dcbb</code><sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">from</span> <span style="color:#00f;font-weight:bold">Crypto.Cipher</span> <span style="color:#008000;font-weight:bold">import</span> AES
</span></span><span style="display:flex;"><span>WB_KEY <span style="color:#666">=</span> <span style="color:#ba2121">b</span><span style="color:#ba2121">&#34;r2p4y1sN0wSecur3&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher <span style="color:#666">=</span> AES<span style="color:#666">.</span>new(WB_KEY, AES<span style="color:#666">.</span>MODE_ECB)
</span></span><span style="display:flex;"><span>output <span style="color:#666">=</span> cipher<span style="color:#666">.</span>decrypt(<span style="color:#008000">bytes</span><span style="color:#666">.</span>fromhex(<span style="color:#ba2121">&#34;9497cdf1df2600e7f63778d0ae91dcbb&#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#008000">print</span>(output<span style="color:#666">.</span>decode())
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> python ./aes_test.py
</span></span><span style="display:flex;"><span><span style="color:#888">0000123400004567
</span></span></span></code></pre></div><h2 id="side-note-about-the-data-section">Side note about the <code>.data</code> section</h2>
<p>Most of the obfuscators encode strings so that we don&rsquo;t have any clue about functions&rsquo; logic. The obfuscator
used in the challenge follows this rule and running the <code>strings</code> utility on the library does not reveal any interesting information.</p>
<p>Nevertheless, we can find a lot of <code>.datadiv_decode&lt;random hex&gt;</code> in the ELF constructors of the library.
As explained in the previous part, they are generated by the obfuscator and aimed to decode the strings.</p>
<p>Since these functions are in the <strong>ELF constructors</strong>, this means that they are executed as soon as the library is loaded.
In particular, when calling <code>dlopen(...)</code> these constructors are executed. It can be confirmed by
dumping the <code>.data</code> section right after <code>dlopen()</code>:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>dlopen(<span style="color:#ba2121">&#34;libnative-lib.so&#34;</span>, RTLD_NOW);
</span></span><span style="display:flex;"><span>std<span style="color:#666">::</span>ofstream ofs{fmt<span style="color:#666">::</span>format(<span style="color:#ba2121">&#34;/data/local/tmp/{}&#34;</span>, output)};
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">auto</span> start <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span><span style="color:#008000;font-weight:bold">const</span> <span style="color:#b00040">char</span><span style="color:#666">*&gt;</span>(base_address <span style="color:#666">+</span> <span style="color:#666">0x127000</span>);
</span></span><span style="display:flex;"><span>ofs.write(start, <span style="color:#408080;font-style:italic">/* sizeof(.data) */</span> <span style="color:#666">0x8d49f</span>);
</span></span></code></pre></div><p>Then, we can compare the bytes distribution with <a href="https://binvis.io/">binvis.io</a>:</p>
<p><img src="data_strings.png" alt="Bytes distribution in the .data section"></p>
<p>At the end of the in-memory <code>.data</code> section, we can found interesting strings used to detect Frida and the
device&rsquo;s root state.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Thanks again to <u>Eduardo Novella</u> (<a href="https://twitter.com/enovella_">@enovella_</a>)
and <u>Gautam Arvind</u> (<a href="https://twitter.com/darvincisec">@darvincisec</a>) for this second part of the challenge :)</p>
<p>Also thanks to <u><a href="https://www.quarkslab.com">Quarkslab</a></u> that allowed this publication.
One can find related blog posts about whitebox attacks on the Quarkslab&rsquo;s blog:</p>
<ul>
<li>
<p><a href="https://blog.quarkslab.com/introduction-to-whiteboxes-and-collision-based-attacks-with-qbdi.html">Introduction to Whiteboxes and Collision-Based Attacks With QBDI
</a> by Paul Hernault (<a href="https://twitter.com/0xAcid">@0xAcid</a>)</p>
</li>
<li>
<p><a href="https://blog.quarkslab.com/when-sidechannelmarvels-meet-lief.html">When SideChannelMarvels meet LIEF </a></p>
</li>
<li>
<p><a href="https://blog.quarkslab.com/differential-fault-analysis-on-white-box-aes-implementations.html">Differential Fault Analysis on White-box AES
Implementations</a> by Philippe Teuwen (<a href="https://twitter.com/doegox">@doegox</a>).
<em>I used this blog post as a reference to resolve this part of the challenge.</em></p>
</li>
</ul>
<h3 id="references">References</h3>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://developer.android.com/reference/android/content/Context">https://developer.android.com/reference/android/content/Context</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://calebfenton.github.io/2017/04/05/creating_java_vm_from_android_native_code/">https://calebfenton.github.io/2017/04/05/creating_java_vm_from_android_native_code/</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>QBDI will execute the function using the <a href="https://qbdi.readthedocs.io/en/stable/api_cpp.html#execution-filtering">ExecBroker</a> mechanism.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>It is the output of the function when entering <code>1234</code> in the PIN field and <code>4567</code> in the amount field.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded><media:content medium="image" width="918" height="517" url="https://www.romainthomas.fr/post/20-09-r2con-obfuscated-whitebox-part2/featured.png"/></item><item><title>r2-pay: anti-debug, anti-root &amp; anti-frida (part 1)</title><dc:creator>Romain Thomas</dc:creator><link>https://www.romainthomas.fr/post/20-09-r2con-obfuscated-whitebox-part1/</link><pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/20-09-r2con-obfuscated-whitebox-part1/</guid><description>This first blog post describes the protections in the challenge r2-pay.</description><content:encoded><![CDATA[<style>
  .green {
    color:green;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .blue {
    color: blue;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }
  .orange {
    color: #FF6347;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .red {
    color: #df2b04;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .hl-comment {
    color: #df2b04;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .hl-keyword {
    color: #A90D91;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .hl-literal {
    color: #1C01CE;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .hl-preproc {
    color: #633820;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

  .hl-strings {
    color: #C41A16;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }
  .yellow {
    color: #CC7000;
    font-family: 'Fira Code', monospace;
    font-size: 87.5%;
  }

#
</style>
<h2 id="introduction">Introduction</h2>
<p>This series of blog posts explains one way to resolve the r2-pay challenge released during the <a href="https://rada.re/con/2020/">r2con2020</a> conference. This first part is about the
anti-analysis tricks used to hinder reverse-engineering while the second part will be more focused on
breaking the whitebox.</p>
<p>The resolution took me more than a week-end but it covers nice topics that worth it: <strong>obfuscation &amp; whitebox</strong>.
It was also the opportunity to practice attacks against whiteboxes
and to test <a href="https://github.com/SideChannelMarvels/JeanGrey">SideChannelMarvels/JeanGrey</a> developed by Philippe Teuwen (aka. <a href="https://twitter.com/doegox">@doegox</a>).</p>
<p>The challenge has been resolved with the AArch64 version on a device running on Android 9 and rooted with Magisk.</p>
<div class="col-12 col-md-12 mb-4 mb-lg-4 mt-4">
  <div class="p-4 rounded col-12 alert alert-info" style="border: none !important; background-color: #FAFCFF">
  <div class="d-flex px-3"><div>
    <div class="icon icon-sm icon-secondary">
      <span class="fas fa-circle-info" style="color: #084298" ></span>
    </div>
  </div>
  <div class="ps-4" style="color: #084298">
    <h3 class="h5 m-0 mb-1" style="color: #084298">Note</h3>
    <p>Here are the files used in this write-up:</p>
<p><i class="fas fa-mobile-alt"></i> <a href="re.pwnme.1.0.apk">re.pwnme.1.0.apk - af019d3016720592aade7bde9890110c</a></p>
<p><i class="fas fa-shield-alt"></i> <a href="libnative-lib.so">libnative-lib.so (arm64-v8a version)</a></p>
  </div>
  </div>
  </div>
</div>
<h2 id="overview">Overview</h2>
<p>When opening the application on a non-tempered device (or with Magisk hide enabled), we are asked to enter
a PIN and an amount that is used to generate a <em>token</em>.</p>
<p>To resolve the challenge, we have to find the <em>master key</em> that is used to generate the token.
Few days before the CTF I was told that one of the challenges
would involve an obfuscated whitebox&hellip;</p>
<p>The main interface of the APK is located in the Java class <code>re.pwnme.MainActivity</code> which forwards the user inputs (PIN &amp; amount)
to a JNI function named <code>gXftm3iswpkVgBNDUp</code>. This function takes the concatenated input $PIN\ ||\ Amount$
and returns the token as a byte array.</p>
<p>The <strong>static constructor</strong> of the class loads the &ldquo;native-lib&rdquo; library which is available for the architectures:
<code>arm64-v8a</code>, <code>armeabi-v7a</code>, and <code>x86_64</code>. Unsurprisingly, this library is obfuscated and some symbols suggest that it has
been compiled with a fork of O-LLVM <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p><img src="mainactivity_tag.png" alt="re.pwnme.MainActivity in r2pay"></p>
<p>In addition, the library does not export the expected symbol <code>Java_re_pwnme_MainActivity_gXftm3iswpkVgBNDUp</code> but prefers
to use the <code>JNI_OnLoad</code> technique <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. <code>JNI_OnLoad()</code> is also obfuscated along with control-flow-flattening.</p>
<p>The main task of the challenge is to understand the logic of the <code>gXftm3iswpkVgBNDUp</code> function to figure out how the
<em>token</em> is generated.</p>
<h2 id="anti-root--anti-frida">Anti-Root &amp; Anti-Frida</h2>
<p>Along with the <code>libnative-lib.so</code> library, the applications embeds another library <code>libtool-checker.so</code>
whose name sounds quite familiar: it comes from the open-source project <a href="https://github.com/scottyab/rootbeer">rootbeer</a>
which is used to detect if the device is rooted.</p>
<p>Some of the root-checks are done in the MainActivity class and if the device is rooted the application raises
an exception by dividing a number with 0.</p>
<p>On this point, we can disable the check by using <a href="https://frida.re/">Frida</a> on the rootbeer&rsquo;s functions involved in the detection:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// frida -U -l ./bypass-root.js --no-pause -f re.pwnme
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>Java.perform(<span style="color:#008000;font-weight:bold">function</span> () {
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">var</span> RootCheck <span style="color:#666">=</span> Java.use(<span style="color:#ba2121">&#39;\u266b.\u1d64&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  RootCheck[<span style="color:#ba2121">&#39;₤&#39;</span>].implementation <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">function</span> () {
</span></span><span style="display:flex;"><span>    console.log(<span style="color:#ba2121">&#34;Skip root&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">return</span> <span style="color:#008000;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  RootCheck[<span style="color:#ba2121">&#39;θ&#39;</span>].overload().implementation <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">function</span> () {
</span></span><span style="display:flex;"><span>    console.log(<span style="color:#ba2121">&#34;Skip root&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">return</span> <span style="color:#008000;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p>Nevertheless, the application still crashes as soon as it starts and generates the following backtrace:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>F libc    : Fatal signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0xfa929095 in tid 8875 (re.pwnme), pid 8849 (re.pwnme)
</span></span><span style="display:flex;"><span>F DEBUG   : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
</span></span><span style="display:flex;"><span>F DEBUG   : Build fingerprint: &#39;google/taimen/taimen:9/PQ3A.190801.002/5670241:user/release-keys&#39;
</span></span><span style="display:flex;"><span>F DEBUG   : Revision: &#39;rev_10&#39;
</span></span><span style="display:flex;"><span>F DEBUG   : ABI: &#39;arm64&#39;
</span></span><span style="display:flex;"><span>F DEBUG   : pid: 8849, tid: 8875, name: re.pwnme  &gt;&gt;&gt; com.google.android.gms &lt;&lt;&lt;
</span></span><span style="display:flex;"><span>F DEBUG   : signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0xfa929095
</span></span><span style="display:flex;"><span>F DEBUG   :     x0  0000007f041f6610  x1  0000007f2565c800  x2  0000007f25600000  x3  000000000000001d
</span></span><span style="display:flex;"><span>F DEBUG   :     x4  000000000000005c  x5  0000000000000001  x6  0000000000000001  x7  0000000000000000
</span></span><span style="display:flex;"><span>F DEBUG   :     x8  0000007f041f6610  x9  0000007f041f6600  x10 00000000fa929095  x11 00000000000035b2
</span></span><span style="display:flex;"><span>F DEBUG   :     x12 00000000e34d79ac  x13 00000000fffffff7  x14 00000000a139577d  x15 0000000000000001
</span></span><span style="display:flex;"><span>F DEBUG   :     x16 0000007fa66af220  x17 0000007fa65e3608  x18 0000000000000000  x19 0000007f041f6680
</span></span><span style="display:flex;"><span>F DEBUG   :     x20 0000000000000000  x21 0000000000000000  x22 0000229100002291  x23 0000000000000000
</span></span><span style="display:flex;"><span>F DEBUG   :     x24 0000007f041ff570  x25 0000007f04102000  x26 0000007fab1ad5e0  x27 0000007f0421a690
</span></span><span style="display:flex;"><span>F DEBUG   :     x28 0000007f04209080  x29 0000007f041ff490
</span></span><span style="display:flex;"><span>F DEBUG   :     sp  0000007f041f65f0  lr  0000007f0423de04  pc  0000007f0423f980
</span></span><span style="display:flex;"><span>F DEBUG   :
</span></span><span style="display:flex;"><span>F DEBUG   : backtrace:
</span></span><span style="display:flex;"><span>F DEBUG   :     #00 pc 000000000003f980  /data/app/re.pwnme-7O3ynhSmMsg2_E5_uqbQxQ==/lib/arm64/libnative-lib.so
</span></span></code></pre></div><p>The backtrace suggests that other checks are performed in the native library. By looking at the ELF&rsquo;s constructors,
we can notice two functions that differ from those generated by the obfuscator:</p>
<p><img src="elf_ctor.png" alt="ELF constructors involved in the detection"></p>
<div class="alert alert-info" role="alert"  style="border: none !important; background-color: #FAFCFF">
  <code>.datadiv_decode13003153710004289592</code> functions are in the ELF constructors since they decode global strings that need to be
available as soon as the library is loaded.
</div>
<p>By tracing these functions with <a href="https://qbdi.quarkslab.com/">QBDI</a>, we quickly understand that <span class="green">sub_9080</span> iterates over
<code>/proc/self/maps</code> with the syscalls <span class="blue">openat</span>/<span class="hl-keyword">read</span>
that are located at the addresses <span class="blue">0x009870</span> and <span class="hl-keyword">0x00b448</span>.</p>
<p>Then, we observe the following sequence:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0x011fb0: syscall: openat(0xffffffffffffff9c, &#39;/system/lib64/libc.so&#39;)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>0x012884: syscall: read(51, 0x7ffc006c58, 64): &#39;ELF@)@8@&#39;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>0x013170: syscall: lseek(51, 0x112918, 0)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>0x0145f8: syscall: read(51, 0x7ffc006c18, 64)
</span></span><span style="display:flex;"><span>0x0145f8: syscall: read(51, 0x7ffc006c18, 64)
</span></span><span style="display:flex;"><span>0x0145f8: syscall: read(51, 0x7ffc006c18, 64): &#39;/ &#39;
</span></span><span style="display:flex;"><span>0x0145f8: syscall: read(51, 0x7ffc006c18, 64): &#39;B88&#39;
</span></span><span style="display:flex;"><span>0x0145f8: syscall: read(51, 0x7ffc006c18, 64): &#39;J&gt;&#39;
</span></span><span style="display:flex;"><span>0x0145f8: syscall: read(51, 0x7ffc006c18, 64): &#39;RoP)&#39;
</span></span><span style="display:flex;"><span>0x0145f8: syscall: read(51, 0x7ffc006c18, 64): &#39;\o((&#39;
</span></span><span style="display:flex;"><span>0x0145f8: syscall: read(51, 0x7ffc006c18, 64): &#39;io&#39;
</span></span><span style="display:flex;"><span>0x0145f8: syscall: read(51, 0x7ffc006c18, 64): &#39;xo0&#39;
</span></span><span style="display:flex;"><span>0x0145f8: syscall: read(51, 0x7ffc006c18, 64)
</span></span><span style="display:flex;"><span>0x0145f8: syscall: read(51, 0x7ffc006c18, 64): &#39;Bxx`-&#39;
</span></span><span style="display:flex;"><span>0x0145f8: syscall: read(51, 0x7ffc006c18, 64): &#39;PP`&#39;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>0x0151f4: malloc(0x18): 0x7f0c21f4c0
</span></span><span style="display:flex;"><span>0x0156e4: syscall: lseek(51, 0x1a650, 0)
</span></span><span style="display:flex;"><span>0x015a68: malloc(0x1e60): 0x7f0acb2000
</span></span><span style="display:flex;"><span>0x015fa0: syscall: read(51, 0x7f0acb2000, 0x1e60): &#39;{n@b r@ v@ z@ ~@ @ @&#34; @B @b @ @ @ @ @ @&#34; @B @b @ @ @ @ @ @&#34; @B @b @ @ @ @ @ @&#34; @B @b @ @ @ @ A A&#34; AB Ab A A A A &#34;A &amp;A&#34; *AB .Ab 2A 6A :A &gt;A BA FA&#34; JAB NAb RA VA ZA ^A bA fA&#34; jAB nAb rA vA zA ~A A A&#34; AB Ab A A A A A A&#34; AB Ab A A A A A A&#34; AB Ab A A A A A A&#34; AB Ab A A A A B B&#34; BB Bb B B B B &#34;B &amp;B&#34; *BB .Bb 2B 6B :B &gt;B BB FB&#34; JBB NBb RB VB ZB ^B bB fB&#34; jBB nBb rB vB zB ~B B B&#34; BB Bb B B B B B B&#34; B ...&#39;
</span></span><span style="display:flex;"><span>0x016cfc: free(0x7f0acb2000) -&gt; {n@b    r@ v@ z@ ~@ @ @&#34; @B @b @ @ @ @ @ @&#34; @B @b @ @ @ @ @ @&#34; @B @b @ @ @ @ @ @&#34; @B @b @ @ @ @ A A&#34; AB Ab A A A A &#34;A &amp;A&#34; *AB .Ab 2A 6A :A &gt;A BA FA&#34; JAB NAb RA VA ZA ^A bA fA&#34; jAB nAb rA vA zA ~A A A&#34; AB Ab A A A A A A&#34; AB Ab A A A A A A&#34; AB Ab A A A A A A&#34; AB Ab A A A A B B&#34; BB Bb B B B B &#34;B &amp;B&#34; *BB .Bb 2B 6B :B &gt;B BB FB&#34; JBB NBb RB VB ZB ^B bB fB&#34; jBB nBb rB vB zB ~B B B&#34; BB Bb B B B B B B&#34; B ...
</span></span><span style="display:flex;"><span>0x017118: syscall: close(51)
</span></span></code></pre></div><p>From this output, we can infer the following logic:</p>
<ol>
<li><code>0x011fb0</code>: the function opens the libc</li>
<li><code>0x012884</code>: it reads the ELF header</li>
<li><code>0x013170</code>: it jumps to the ELF sections table</li>
<li><code>0x0145f8</code>: it looks for the <code>.plt</code> section</li>
<li><code>0x015a68</code>, <code>0x015fa0</code>: it reads the content of the <code>.plt</code> section</li>
</ol>
<p>These operations suggest that the function checks if the <code>.plt</code> of <code>/system/lib64/libc.so</code> is not tampered with.
In particular, if we use Frida on a libc&rsquo;s function this check won&rsquo;t pass.</p>
<p>After this check, the function <span class="green">sub_9080</span> spawns a thread:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0x0195dc: pthread_create(0xf1079f10, 0x0, 0x1a690, 0x0)
</span></span></code></pre></div><p>The libc integrity check makes more sense as it is probably used to protect the library against a hook of <code>pthread_create()</code>.</p>
<p>The thread&rsquo;s routine <span class="red">sub_1a690</span> starts by making two calls to the mathematical function <code>tan()</code>:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0x01b774: tan(0.): 0.
</span></span><span style="display:flex;"><span>0x01b79c: tan(-7832.0): -0.00951489
</span></span><span style="display:flex;"><span>0x01cc74: memcpy(0x7ffc006598, libnative-lib.so!0x1267f0, 80) -&gt; !7Nl
</span></span><span style="display:flex;"><span>0x01ceb8: rand()
</span></span><span style="display:flex;"><span>0x01f774: tan(0.): 0.
</span></span><span style="display:flex;"><span>0x01f79c: tan(-7832.0): -0.00951489
</span></span></code></pre></div><p>My understanding of these calls is that the application tries to protect against tools that would not support
floating-point instructions such as <code>FCMP</code> or <code>FMOV</code>. In addition, I think that if we mock the behavior of
<code>tan()</code> with a constant value it would trigger a crash.</p>
<p><img src="tan_instruction.png" alt="tan"></p>
<p>Then it follows a check of <code>TracerPid</code> value in <code>/proc/self/status</code>. This value is set when
the process is ptrace-debugged (which is the case with gdb).
Dynamically, we observe syscalls that open <code>/proc/self/status</code> and read the content
byte-per-byte:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0x020ee0: syscall: openat(0xffffffffffffff9c, &#39;/proc/self/status&#39;): 51
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &#39;N&#39;
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &#39;a&#39;
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &#39;m&#39;
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &#39;e&#39;
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &#39;:&#39;
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1)
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &#39;r&#39;
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &#39;e&#39;
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &#39;.&#39;
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &#39;p&#39;
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &#39;w&#39;
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &#39;n&#39;
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &#39;m&#39;
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &#39;e&#39;
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1)
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &#39;S&#39;
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &#39;t&#39;
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &#39;a&#39;
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &#39;t&#39;
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &#39;e&#39;
</span></span><span style="display:flex;"><span>0x0231e8: syscall: read(51, 0x7ffc00656c, 1): &#39;:&#39;
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><h2 id="anti-frida-1">Anti-Frida #1</h2>
<p>Still in the thread&rsquo;s routine <span class="red">sub_1a690</span>, the function checks if Frida is running by looking
at all the values of <code>/proc/self/task/&lt;tid&gt;/status</code> and by checking if one of the names is <span class="red"><b><u>gmain</u></b></span>.
It turns out that it&rsquo;s the case when Frida is used in the application :-)</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0x0368e4: snprintf(&#39;/proc/self/task/9719/status&#39;, &#39;/proc/self/task/%s/status&#39;): &#39;/proc/self/task/9719/status&#39;
</span></span><span style="display:flex;"><span>0x036a1c: syscall: openat(0xffffffffffffff9c, &#39;/proc/self/task/9719/status&#39;)
</span></span><span style="display:flex;"><span>0x03897c: syscall: read(73, 0x7ffc400af4, 1): &#39;N&#39;
</span></span><span style="display:flex;"><span>0x03897c: syscall: read(73, 0x7ffc400af4, 1): &#39;a&#39;
</span></span><span style="display:flex;"><span>0x03897c: syscall: read(73, 0x7ffc400af4, 1): &#39;m&#39;
</span></span><span style="display:flex;"><span>0x03897c: syscall: read(73, 0x7ffc400af4, 1): &#39;e&#39;
</span></span><span style="display:flex;"><span>0x03897c: syscall: read(73, 0x7ffc400af4, 1): &#39;:&#39;
</span></span><span style="display:flex;"><span>0x03897c: syscall: read(73, 0x7ffc400af4, 1)
</span></span><span style="display:flex;"><span>0x03897c: syscall: read(73, 0x7ffc400af4, 1): &#39;g&#39;
</span></span><span style="display:flex;"><span>0x03897c: syscall: read(73, 0x7ffc400af4, 1): &#39;m&#39;
</span></span><span style="display:flex;"><span>0x03897c: syscall: read(73, 0x7ffc400af4, 1): &#39;a&#39;
</span></span><span style="display:flex;"><span>0x03897c: syscall: read(73, 0x7ffc400af4, 1): &#39;i&#39;
</span></span><span style="display:flex;"><span>0x03897c: syscall: read(73, 0x7ffc400af4, 1): &#39;n&#39;
</span></span><span style="display:flex;"><span>0x03897c: syscall: read(73, 0x7ffc400af4, 1)
</span></span><span style="display:flex;"><span>0x03897c: closedir()
</span></span><span style="display:flex;"><span># Crash!
</span></span></code></pre></div><p>To bypass this check, one can statically patch the syscall or we can dynamically
change the behavior of <code>snprintf(..., '/proc/self/task/%s/status')</code> in order to <strong>always</strong> returns the same status (e.g. <code>/proc/self/task/123/status</code>).
Concretely, it could be done by hooking <code>snprintf</code> and by forcing the <em>output</em> string to <code>/proc/self/task/123/status</code>.</p>
<h2 id="anti-frida-2">Anti-Frida #2</h2>
<p>Still in the <span class="red">sub_1a690</span> function, the anti-frida checks continue by inspecting the file descriptors
of the process. It iterates over <code>/proc/self/fd/%s</code> and looks at the underlying symlink.</p>
<p>Frida <span class="blue">server</span> &mdash; which is running globally on the device &mdash; and Frida agent &mdash; which is injected in the
process &mdash; communicate with named pipes that are associated with a file descriptor.</p>
<p>If Frida server is running, we can observe the following values:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0x04308c: lstat(&#39;/proc/self/fd/32&#39;)
</span></span><span style="display:flex;"><span>0x043448: syscall: readlinkat(0xffffffffffffff9c, &#39;/proc/self/fd/32&#39;, 0x7ffbffdc10, 256): &#39;anon_inode:[eventfd]&#39;
</span></span><span style="display:flex;"><span>0x041844: readdir(&#39;33&#39;)
</span></span><span style="display:flex;"><span>0x043078: snprintf(&#39;/proc/self/fd/33&#39;, &#39;/proc/self/fd/%s&#39;): &#39;/proc/self/fd/33&#39;
</span></span><span style="display:flex;"><span>0x04308c: lstat(&#39;/proc/self/fd/33&#39;)
</span></span><span style="display:flex;"><span>0x043448: syscall: readlinkat(0xffffffffffffff9c, &#39;/proc/self/fd/33&#39;, 0x7ffbffdc10, 256): &#39;anon_inode:[eventfd]&#39;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>0x041844: readdir(&#39;34&#39;)
</span></span><span style="display:flex;"><span>0x043078: snprintf(&#39;/proc/self/fd/34&#39;, &#39;/proc/self/fd/%s&#39;): &#39;/proc/self/fd/34&#39;
</span></span><span style="display:flex;"><span>0x04308c: lstat(&#39;/proc/self/fd/34&#39;)
</span></span><span style="display:flex;"><span>0x043448: syscall: readlinkat(0xffffffffffffff9c, &#39;/proc/self/fd/34&#39;, 0x7ffbffdc10, 256): &#39;/data/local/tmp/re.frida.server/linjector-500&#39;
</span></span><span style="display:flex;"><span># Crash!
</span></span></code></pre></div><p>In this case, the file descriptor <code>34</code> is associated with <code>/data/local/tmp/re.frida.server/linjector-500</code>
which triggers the detection and the application crashes.</p>
<p>As for <code>/proc/self/task/&lt;tid&gt;/status</code>, one can disable this check by <strong>statically patching</strong> the syscalls or
by <strong>dynamically changing</strong> the result of <code>readlinkat()</code>. For instance, we can use <a href="https://qbdi.quarkslab.com/">QBDI</a> to
instrument syscall instructions and process the result of <code>readlinkat()</code> in an user callback:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vm.addMnemonicCB(<span style="color:#ba2121">&#34;SVC&#34;</span>, POST_INST,
</span></span><span style="display:flex;"><span>  [] (VMInstanceRef vm, GPRState<span style="color:#666">*</span> gprState, FPRState<span style="color:#666">*</span>, <span style="color:#b00040">void</span><span style="color:#666">*</span> data) {
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">if</span> (gprState<span style="color:#666">-&gt;</span>x8 <span style="color:#666">!=</span> __NR_readlinkat) {
</span></span><span style="display:flex;"><span>      <span style="color:#008000;font-weight:bold">return</span> VMAction<span style="color:#666">::</span>CONTINUE;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    std<span style="color:#666">::</span>string buf <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span><span style="color:#b00040">char</span><span style="color:#666">*&gt;</span>(gprState<span style="color:#666">-&gt;</span>x2);
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">if</span> (buf.find(<span style="color:#ba2121">&#34;re.frida.server&#34;</span>) <span style="color:#666">!=</span> std<span style="color:#666">::</span>string<span style="color:#666">::</span>npos) {
</span></span><span style="display:flex;"><span>      <span style="color:#008000;font-weight:bold">static</span> <span style="color:#008000;font-weight:bold">const</span> std<span style="color:#666">::</span>string FAKE_VALUE <span style="color:#666">=</span> <span style="color:#ba2121">&#34;anon_inode:[eventfd]&#34;</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#408080;font-style:italic">// Bypass Frida detection!
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>      memcpy(
</span></span><span style="display:flex;"><span>        <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span><span style="color:#b00040">void</span><span style="color:#666">*&gt;</span>(gprState<span style="color:#666">-&gt;</span>x2),
</span></span><span style="display:flex;"><span>        <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span><span style="color:#b00040">void</span><span style="color:#666">*&gt;</span>(FAKE_VALUE.c_str()),
</span></span><span style="display:flex;"><span>        FAKE_VALUE.size() <span style="color:#666">+</span> <span style="color:#666">1</span>
</span></span><span style="display:flex;"><span>      );
</span></span><span style="display:flex;"><span>      gprState<span style="color:#666">-&gt;</span>x0 <span style="color:#666">=</span> FAKE_VALUE.size() <span style="color:#666">+</span> <span style="color:#666">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">return</span> VMAction<span style="color:#666">::</span>CONTINUE;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  }, ctx);
</span></span></code></pre></div><h2 id="anti-frida-3-">Anti-Frida #3 ?</h2>
<p>I&rsquo;m not sure if the following calls sequence is used to check the libc&rsquo;s integrity against Frida but
at the end of the thread&rsquo;s routine, we can observe these syscalls:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0x048ff0: syscall: openat(0xffffffffffffff9c, &#39;/proc/self/maps&#39;): 51
</span></span><span style="display:flex;"><span>0x04ae6c: syscall: read(51, 0x7ffc006578, 1): &#39;1&#39;
</span></span><span style="display:flex;"><span>0x04ae6c: syscall: read(51, 0x7ffc006578, 1): &#39;2&#39;
</span></span><span style="display:flex;"><span>0x04ae6c: syscall: read(51, 0x7ffc006578, 1): &#39;c&#39;
</span></span><span style="display:flex;"><span>0x04ae6c: syscall: read(51, 0x7ffc006578, 1): &#39;0&#39;
</span></span><span style="display:flex;"><span>0x04ae6c: syscall: read(51, 0x7ffc006578, 1): &#39;0&#39;
</span></span><span style="display:flex;"><span>0x04ae6c: syscall: read(51, 0x7ffc006578, 1): &#39;0&#39;
</span></span><span style="display:flex;"><span>0x04ae6c: syscall: read(51, 0x7ffc006578, 1): &#39;0&#39;
</span></span><span style="display:flex;"><span>0x04ae6c: syscall: read(51, 0x7ffc006578, 1): &#39;0&#39;
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>0x0513f8: sscanf(&#39;7fa65c0000-7fa65dc000 r-xp 00000000 08:07 1275/system/lib64/libc.so&#39;, &#39;%lx-%lx %s %s %s %s %s&#39;)
</span></span><span style="display:flex;"><span>0x056034: syscall: close(51)
</span></span></code></pre></div><p>The result of <code>sscanf()</code> could be used to check the page permissions (e.g. <code>r</code><span class="blue">w</span><code>xp</code>)
or to the libc&rsquo;s base address (to check if it is consistent).</p>
<h2 id="anti-root">Anti-Root</h2>
<p>In addition to the root-beer detection, the library embeds another root detection located in the <strong>second</strong> ELF constructor.
This constructor &mdash; <span class="yellow">sub_77D14</span> &mdash; performs the same early checks as the first constructor
on the libc&rsquo;s <code>.plt</code> integrity before spawning another thread routine, <span class="yellow">sub_98c00</span>.</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0x08861c: pthread_create(0xfa780b70, 0x0, 0x98c00, 0x0)
</span></span></code></pre></div><p><img src="ctor_pthread.png" alt="ELF constructors: anti-frida and anti-root"></p>
<p>By tracing the thread&rsquo;s routine, we notice that it checks if <code>su</code> files are present on the device through
three different calls:</p>
<ol>
<li>One call to <code>open()</code>: <span class="hl-literal">0x099180: open(<span class="hl-strings">&rsquo;/system/xbin/su&rsquo;</span>)</span></li>
<li>One syscall to <code>openat()</code>: <span class="hl-literal">0x0992a4: syscall: openat(&hellip;, <span class="hl-strings">&rsquo;/data/su&rsquo;</span>)</span></li>
<li>One syscall to <code>faccessat()</code>: <span class="hl-literal">0x0993f0: syscall: faccessat(<span class="hl-strings">&rsquo;/sbin/su&rsquo;</span>)</span></li>
</ol>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0x099180: open(&#39;/data/local/su&#39;): -1
</span></span><span style="display:flex;"><span>0x0992a4: syscall: openat(0xffffffffffffff9c, &#39;/data/local/su&#39;): -2
</span></span><span style="display:flex;"><span>0x0993f0: syscall: faccessat(&#39;/data/local/su&#39;): -2
</span></span><span style="display:flex;"><span>0x099180: open(&#39;/data/local/bin/su&#39;): -1
</span></span><span style="display:flex;"><span>0x0992a4: syscall: openat(0xffffffffffffff9c, &#39;/data/local/bin/su&#39;): -2
</span></span><span style="display:flex;"><span>0x0993f0: syscall: faccessat(&#39;/data/local/bin/su&#39;): -2
</span></span><span style="display:flex;"><span>0x099180: open(&#39;/data/local/xbin/su&#39;): -1
</span></span><span style="display:flex;"><span>0x0992a4: syscall: openat(0xffffffffffffff9c, &#39;/data/local/xbin/su&#39;): -2
</span></span><span style="display:flex;"><span>0x0993f0: syscall: faccessat(&#39;/data/local/xbin/su&#39;): -2
</span></span><span style="display:flex;"><span>0x099180: open(&#39;/sbin/su&#39;): 51
</span></span><span style="display:flex;"><span>0x0992a4: syscall: openat(0xffffffffffffff9c, &#39;/sbin/su&#39;): 52
</span></span><span style="display:flex;"><span>0x0993f0: syscall: faccessat(&#39;/sbin/su&#39;): 52
</span></span><span style="display:flex;"><span>Crash!
</span></span></code></pre></div><p>By forcing the results of these functions to <code>-1</code> or <code>-2</code>, we can disable the checks.</p>
<p>Here is the list of the su-files that are used in this detection:</p>
<ul>
<li><span class="hl-strings">/data/local/su</span></li>
<li><span class="hl-strings">/data/local/bin/su</span></li>
<li><span class="hl-strings">/data/local/xbin/su</span></li>
<li><span class="hl-strings">/sbin/su</span></li>
<li><span class="hl-strings">/su/bin/su</span></li>
<li><span class="hl-strings">/system/bin/su</span></li>
<li><span class="hl-strings">/system/bin/.ext/su</span></li>
<li><span class="hl-strings">/system/bin/failsafe/su</span></li>
<li><span class="hl-strings">/system/sd/xbin/su</span></li>
<li><span class="hl-strings">/system/usr/we-need-root/su</span></li>
<li><span class="hl-strings">/system/xbin/su</span></li>
<li><span class="hl-strings">/cache/su</span></li>
<li><span class="hl-strings">/data/su</span></li>
<li><span class="hl-strings">/dev/su</span></li>
</ul>
<p>At the end of the thread&rsquo;s routine, we can also observe the following calls that
are probably used to check if the application is running on a real Android system.</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0x099e30: syscall: faccessat(&#39;/system&#39;)
</span></span><span style="display:flex;"><span>0x099e30: syscall: faccessat(&#39;/system/bin&#39;)
</span></span><span style="display:flex;"><span>0x099e30: syscall: faccessat(&#39;/system/sbin&#39;)
</span></span><span style="display:flex;"><span>0x099e30: syscall: faccessat(&#39;/system/xbin&#39;)
</span></span><span style="display:flex;"><span>0x099e30: syscall: faccessat(&#39;/vendor/bin&#39;)
</span></span><span style="display:flex;"><span>0x099e30: syscall: faccessat(&#39;/sbin&#39;)
</span></span><span style="display:flex;"><span>0x099e30: syscall: faccessat(&#39;/etc&#39;)
</span></span></code></pre></div><h2 id="static-bypass-with-lief">Static bypass with LIEF</h2>
<p>In the previous sections, we described the anti-root, anti-debug and anti-frida checks
made in the ELF constructors. The <strong>same</strong> dynamic checks are also performed in the <code>gXftm3iswpkVgBNDUp</code> function
at the following locations:</p>
<ul>
<li><span class="hl-keyword">0x09f2f8</span>: <span class="hl-literal">/proc/self/status</span></li>
<li><span class="hl-keyword">0x0d4840</span>: <span class="hl-literal">/proc/self/fd/</span></li>
<li><span class="hl-keyword">0x0dec8c</span>: <span class="hl-literal">/proc/self/task/&lt;tid&gt;/status</span></li>
</ul>
<p>While the checks in <code>gXftm3iswpkVgBNDUp</code> can be dynamically disabled when instrumenting the function,
the checks in the ELF constructors are annoying.</p>
<p>One way to disable the checks in the thread&rsquo;s routines is to disable the <code>pthread_create(...)</code>. It can
be achieved by patching the <code>.plt</code> entry associated with the function:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-armasm" data-lang="armasm"><span style="display:flex;"><span>mov <span style="color:#00f;font-weight:bold">x0</span>, <span style="">xzr</span><span style="color:#408080;font-style:italic">;
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>ret<span style="color:#408080;font-style:italic">;
</span></span></span></code></pre></div><p>Thanks to <code>llvm-mc</code>, we can get the raw bytes of these instructions:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> <span style="color:#008000">echo</span> <span style="color:#ba2121">&#34;mov x0, xzr;ret;&#34;</span>|llvm-mc -arch<span style="color:#666">=</span>aarch64 -show-encoding
</span></span><span style="display:flex;"><span><span style="">
</span></span></span><span style="display:flex;"><span><span style=""></span><span style="color:#888">.text
</span></span></span><span style="display:flex;"><span><span style="color:#888">mov     x0, xzr                 // encoding: [0xe0,0x03,0x1f,0xaa]
</span></span></span><span style="display:flex;"><span><span style="color:#888">ret                             // encoding: [0xc0,0x03,0x5f,0xd6]
</span></span></span></code></pre></div><p>Finally, we can patch the <code>.plt</code> with <a href="https://lief.quarkslab.com">LIEF</a>:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">import</span> <span style="color:#00f;font-weight:bold">lief</span>
</span></span><span style="display:flex;"><span>lib <span style="color:#666">=</span> lief<span style="color:#666">.</span>parse(<span style="color:#ba2121">&#34;./libnative-lib.so&#34;</span>)
</span></span><span style="display:flex;"><span>lib<span style="color:#666">.</span>patch_address(<span style="color:#666">0x5870</span>, [<span style="color:#666">0xe0</span>,<span style="color:#666">0x03</span>,<span style="color:#666">0x1f</span>,<span style="color:#666">0xaa</span>])
</span></span><span style="display:flex;"><span>lib<span style="color:#666">.</span>patch_address(<span style="color:#666">0x5874</span>, [<span style="color:#666">0xc0</span>,<span style="color:#666">0x03</span>,<span style="color:#666">0x5f</span>,<span style="color:#666">0xd6</span>])
</span></span><span style="display:flex;"><span>lib<span style="color:#666">.</span>write(<span style="color:#ba2121">&#34;./libnative-lib-patched.so&#34;</span>)
</span></span></code></pre></div><p><img src="patching.png" alt="pthread_create patches"></p>
<p>Using these patches and the Frida script exposed in the first section, we are able to <strong>load</strong> the application but the other
detections are triggered in <code>gXftm3iswpkVgBNDUp</code>. Nevertheless, with
the Frida&rsquo;s stalker or QBDI we can trace the instructions and disable the other checks.</p>
<p>If one wants to completely bypass all the protections statically, here are the patches:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">import</span> <span style="color:#00f;font-weight:bold">lief</span>
</span></span><span style="display:flex;"><span>lib <span style="color:#666">=</span> lief<span style="color:#666">.</span>parse(<span style="color:#ba2121">&#34;./libnative-lib.so&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"># Keys are str objects for a better understanding :)</span>
</span></span><span style="display:flex;"><span>INST <span style="color:#666">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ba2121">&#34;mov x0, #0&#34;</span>:  [<span style="color:#666">0xe0</span>, <span style="color:#666">0x03</span>, <span style="color:#666">0x1f</span>, <span style="color:#666">0xaa</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#ba2121">&#34;ret&#34;</span>:         [<span style="color:#666">0xc0</span>, <span style="color:#666">0x03</span>, <span style="color:#666">0x5f</span>, <span style="color:#666">0xd6</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#ba2121">&#34;nop&#34;</span>:         [<span style="color:#666">0x1f</span>, <span style="color:#666">0x20</span>, <span style="color:#666">0x03</span>, <span style="color:#666">0xd5</span>],
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>PATCHES <span style="color:#666">=</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic"># Patch the .plt entry of pthread_create</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#666">0x5870</span>, INST[<span style="color:#ba2121">&#34;mov x0, #0&#34;</span>]),
</span></span><span style="display:flex;"><span>    (<span style="color:#666">0x5874</span>, INST[<span style="color:#ba2121">&#34;ret&#34;</span>]),
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic"># Disable anti-frida checks</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#666">0x0d718c</span>, INST[<span style="color:#ba2121">&#34;mov x0, #0&#34;</span>]), <span style="color:#408080;font-style:italic"># /proc/self/fd : patch the result of readlinkat syscall</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#666">0x0e1940</span>, INST[<span style="color:#ba2121">&#34;mov x0, #0&#34;</span>]), <span style="color:#408080;font-style:italic"># /proc/self/task/&lt;tid&gt;/status: patch the result of read syscall</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic"># Disable .text integrity checks</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#666">0xB64D0</span>, INST[<span style="color:#ba2121">&#34;nop&#34;</span>]),
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">for</span> patch <span style="color:#a2f;font-weight:bold">in</span> PATCHES:
</span></span><span style="display:flex;"><span>    lib<span style="color:#666">.</span>patch_address(<span style="color:#666">*</span>patch)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>lib<span style="color:#666">.</span>write(<span style="color:#ba2121">&#34;libnative-lib.so&#34;</span>)
</span></span></code></pre></div><p>When writing this write-up, I realized that patching the syscalls involved in the anti-frida (<span class="hl-literal">/proc/self/fd/</span> and <span class="hl-literal">/proc/self/task/&lt;tid&gt;/status</span>)
makes the application crash.</p>
<p>It turns out that the library seems to implement <strong>code integrity on the <code>.text</code> section</strong> that I didn&rsquo;t notice when running
the function through QBDI.
Nevertheless, by tracing the basic block<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>
we can identify the basic block involved in the integrity check and patch it.</p>
<p><img src="code_integrity.png" alt="Code integrity patches"></p>
<div class="alert alert-info" role="alert"  style="border: none !important; background-color: #FAFCFF">
  The scripts and the patched library are available <a href="https://github.com/romainthomas/r2pay">here <i class="fab fa-github"></i></a>.
</div>
<p>Regarding <code>JNI_OnLoad()</code>, a trace generated with <a href="https://github.com/QBDI/examples/blob/d589d28b237f46d16cab3b11aa36bbb51102e307/packer-android-x86/src/libshellx_qbdi.cpp#L18-L85">QBDI&rsquo;s ExecBroker</a>
leads to following result:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>JNI_OnLoad() {
</span></span><span style="display:flex;"><span>    <span style="color:#666">0x09af3c</span><span style="color:#666">:</span> GetEnv(<span style="color:#666">0x7fcb507460</span>, <span style="color:#666">0x10006</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#666">0x09b0ac</span><span style="color:#666">:</span> FindClass(<span style="color:#ba2121">&#34;re/pwnme/MainActivity&#34;</span>)<span style="color:#666">:</span> <span style="color:#666">537</span>
</span></span><span style="display:flex;"><span>    <span style="color:#666">0x09b1b4</span><span style="color:#666">:</span> RegisterNatives()
</span></span><span style="display:flex;"><span>        gXftm3iswpkVgBNDUp ([BB)[B <span style="color:#666">-&gt;</span> <span style="color:#ba2121">&#34;libnative-lib.so@0x9b41c&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then, we can extract the function&rsquo;s offset: <span class="blue">gXftm3iswpkVgBNDUp</span>: <span class="red">0x9b41c</span>.</p>
<h2 id="summary--conclusion">Summary &amp; Conclusion</h2>
<p>Whilst Frida detections are usually based on sockets and library names in <code>/proc/self/maps</code>,
this challenge introduces two detections based on named pipes:<code>/proc/self/fd</code> and thread status: <code>/proc/self/task/&lt;tid&gt;/status</code>
which are pretty cool :-)</p>
<p>These checks are performed in two locations:</p>
<ol>
<li>The ELF constructors</li>
<li>The function <code>gXftm3iswpkVgBNDUp()</code></li>
</ol>
<p>The implementation in the ELF constructors might be tricky to analyse since the functions are called before <strong>any</strong>
other classical functions (which includes <code>JNI_OnLoad()</code>). Nevertheless, thanks to the interface of the ELF loader,
it exposes the function <code>call_array(...)</code><sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> which is handy to process the ELF constructors.</p>
<div class="alert alert-info" role="alert"  style="border: none !important; background-color: #FAFCFF">
  This function is mangled as <code>__dl__ZL10call_arrayIPFviPPcS1_EEvPKcPT_mbS5_</code> in <code>/system/bin/linker64</code>
</div>
<p><img src="protection_overview.png" alt="Overview of the anti-root and anti-frida"></p>
<p>Since QBDI is not detected in this challenge, it&rsquo;s a good opportunity to give it a try:</p>
<center>
<p>
<i class="fab fa-github"></i> <a href="https://github.com/QBDI/QBDI">https://github.com/QBDI/QBDI</a>
</p>
</center>
<h2 id="acknowledgments">Acknowledgments</h2>
<p>Thanks to <u>Eduardo Novella</u> (<a href="https://twitter.com/enovella_">@enovella_</a>)
and <u>Gautam Arvind</u> (<a href="https://twitter.com/darvincisec">@darvincisec</a>) for this interesting and realistic challenge they created!</p>
<p>Also thanks to <u><a href="https://www.quarkslab.com">Quarkslab</a></u> that allowed this publication.
For those who are interested in similar topics, you can take a look at the Quarkslab&rsquo;s <a href="https://blog.quarkslab.com/">blog</a>.</p>
<h3 id="references">References</h3>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://github.com/GoSSIP-SJTU/Armariris">GoSSIP-SJTU/Armariris</a> - <a href="https://github.com/GoSSIP-SJTU/Armariris/blob/0cba41329244a29c7cb94e25458191b68967b6e8/lib/Transforms/Obfuscation/StringObfuscation.cpp#L140"><code>StringObfuscation.cpp#L140</code></a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://developer.android.com/training/articles/perf-jni#native-libraries">https://developer.android.com/training/articles/perf-jni#native-libraries</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://github.com/QBDI/QBDI/blob/a20653f07df3ae78250e7ecf28ed699b2d727027/include/QBDI/VM.h#L296-L305"><code>addVMEventCB(VMEvent::BASIC_BLOCK_ENTRY, ...);</code></a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://android.googlesource.com/platform/bionic/+/refs/tags/android-9.0.0_r60/linker/linker_soinfo.cpp#420"><code>linker/linker_soinfo.cpp:420</code></a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded><media:content medium="image" width="918" height="517" url="https://www.romainthomas.fr/post/20-09-r2con-obfuscated-whitebox-part1/featured.png"/></item><item><title>A Glimpse Into Tencent's Legu Packer</title><dc:creator>Romain Thomas</dc:creator><link>https://www.romainthomas.fr/post/a-glimpse-into-tencents-legu-packer/</link><pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/a-glimpse-into-tencents-legu-packer/</guid><description>Analysis of Tencent Legu: a packer for Android applications.</description><content:encoded><![CDATA[<style>
  .packedfile {
    color:green;
    font-family: 'Lucida Console', monospace;
  }
  .keyfile {
    color: blue;
    font-family: 'Lucida Console', monospace;
  }
  .libshell {
    color: #FF6347;
    font-family: 'Lucida Console', monospace;
  }
  .tencentclass {
    color: #df2b04;
    font-family: 'Lucida Console', monospace;
  }
</style>
<div class="col-12 col-md-12 mb-4 mb-lg-4 mt-4">
  <div class="p-4 rounded col-12 alert alert-info" style="background-color: #FAFCFF">
    <div class="d-flex px-3"><div>
        <div class="icon icon-sm icon-secondary">
          <span class="fa-duotone fa-link-horizontal" style="color: #084298" ></span>
        </div>
      </div>
      <div class="ps-4">
        <span class="h6 m-0 mb-1"  style="color: #084298">
        This post has been originally posted on the <a href=https://blog.quarkslab.com/a-glimpse-into-tencents-legu-packer.html>Quarkslab&rsquo;s Blog</a>
        </span>
      </div>
    </div>
  </div>
</div>
<h2 id="introduction">Introduction</h2>
<p>This blog post deals with the Legu packer, an Android protector developed by Tencent that is currently one of the
state-of-the-art solutions to protect APK DEX files. The packer is updated frequently and this blog post focuses on
versions <code>4.1.0.15</code> and <code>4.1.0.18</code>.</p>
<h2 id="overview">Overview</h2>
<p>An application protected with Legu is composed of two native libraries: <span class="libshell">libshell-super.2019.so</span>
and <code>libshella-4.1.0.XY.so</code> as well as raw binary files embedded in the resources of the APK:</p>
<ul>
<li><span class="keyfile">tosversion</span></li>
<li><span class="packedfile">0OO00l111l1l</span></li>
<li><code>0OO00oo01l1l</code></li>
<li><code>o0oooOO0ooOo.dat</code></li>
</ul>
<p>The main logic of the packer is located in the native library <span class="libshell">libshell-super.2019.so</span> which basically
unpacks and loads the protected DEX files from the resources.</p>
<p>Some functions of the library are obfuscated but thanks to Frida/QBDI their analysis is not a big deal.</p>
<h2 id="internals">Internals</h2>
<p>Basically, the original DEX files are located in the <span class="packedfile">assets/0OO00l111l1l</span> file along with the information required to
unpack them.</p>
<p>The following figure lays out the structure of this file.</p>
<p><img src="packed_file.png" alt=""></p>
<p>In the <span class="packedfile">assets/0OO00l111l1l</span> file, the first part contains the original DEX files with the same number of <code>classes&lt;N&gt;.dex</code> according to the multi-DEX feature of the original APK. These
DEX files are not exactly the original ones, as their Dalvik bytecode have been <em>NOP-ed</em> by Legu.
Therefore, a dump of these files only gives information about the classes&rsquo; names, not the code logic:</p>
<p><img src="noped.png" alt=""></p>
<p>Then follows what we called a <em>hashmap</em> that is used to link a class name (e.g. <span class="tencentclass">Lcom/tencent/mmkv/MMKV;</span>) to an offset in
the data block located in the third part of the file.
This data block contains the original Dalvik bytecode of the methods.</p>
<p>Actually, the first part that contains the altered DEX files, is compressed with <strong>NRV</strong> <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.
The second part — the hashmap — is also compressed with NRV but the packer adds a layer of
encryption through a slightly modified version of <strong>XTEA</strong> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. Finally, the last part is compressed and encrypted with the
same algorithms as the previous one.</p>
<p>Regarding the <em>hashmap</em>, it uses a custom structure that has been reversed and lead to a Kaitai structure available
here: <a href="https://github.com/quarkslab/legu_unpacker_2019/blob/master/legu_packed_file.ksy">legu_packed_file.ksy</a>, <a href="https://github.com/quarkslab/legu_unpacker_2019/blob/master/legu_hashmap.ksy">legu_hashmap.ksy</a></p>
<p>Its overall layout is exposed in the next figure:</p>
<p><img src="hashmap.png" alt=""></p>
<h2 id="unpacking-process">Unpacking process</h2>
<p>Let&rsquo;s say that the application needs to use the packed Java class <span class="tencentclass">Lcom/tencent/mmkv/MMKV;</span>.</p>
<p>First, the packer&rsquo;s runtime transforms the class name into an integer with the <code>dvmComputeUtf8Hash()</code> hash function <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. This integer is then used
as an index into the <em>hashmap</em> whose value is a structure that contains information about the class in the packed data (blue area in
the figure). The first attribute of this structure — <code>utf8_hash</code> — is a copy of the hash value which is used to check that it is the right key/value association.</p>
<p>The <code>class_info</code> structure (blue block in the figure) next contains the packed method information (yellow area in the figure) whose size is the same as the original number of
methods in the class. This structure makes the relationship between the NOP-ed bytecode offset in the altered DEX
files and the offset in the original bytecode (red block).
Finally, the packer copies the original bytecode into the altered DEX files.</p>
<p>To summarize, the first part contains the original DEX files with the Dalvik bytecode removed (<em>NOP-ed</em>).
The last part contains the missing Dalvik bytecode and the second part makes the
bridge between the altered DEX files and the Dalvik bytecode.</p>
<h1 id="compression--encryption">Compression &amp; Encryption</h1>
<p>To decrypt the hashmap and the Dalvik bytecode, the packer uses the first 16 bytes of <span class="keyfile">assets/tosversion</span>
xored with a hard-coded key: <code>^hHc7Ql]N9Z4:+1m~nTcA&amp;3a7|?GB1z@</code>.</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>LIB_KEY <span style="color:#666">=</span> <span style="color:#ba2121">b</span><span style="color:#ba2121">&#34;^hHc7Ql]N9Z4:+1m~nTcA&amp;3a7|?GB1z@&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">def</span> <span style="color:#00f">key_derivation</span>(key: <span style="color:#008000">bytes</span>) <span style="color:#666">-&gt;</span> <span style="color:#008000">bytes</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span> <span style="color:#008000">bytes</span>(x1 <span style="color:#666">^</span> x2 <span style="color:#008000;font-weight:bold">for</span> x1, x2 <span style="color:#a2f;font-weight:bold">in</span> <span style="color:#008000">zip</span>(LIB_KEY, cycle(key)))
</span></span></code></pre></div><p>Then, it uses a slightly modified version of XTEA that is given in the next listing:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#b00040">int</span> <span style="color:#00f">xtea_decrypt</span>(<span style="color:#b00040">uint32_t</span><span style="color:#666">*</span> key, <span style="color:#b00040">uint32_t</span><span style="color:#666">*</span> buf, size_t ilen, size_t nb_round) {
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">const</span> size_t count <span style="color:#666">=</span> ilen <span style="color:#666">/</span> <span style="color:#666">8</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">const</span> size_t key_off <span style="color:#666">=</span> (ilen <span style="color:#666">&amp;</span> <span style="color:#666">8</span>) <span style="color:#666">/</span> <span style="color:#666">4</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">static</span> <span style="color:#008000;font-weight:bold">constexpr</span> <span style="color:#b00040">uint32_t</span> DELTA <span style="color:#666">=</span> <span style="color:#666">0x9e3779b9</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">const</span> <span style="color:#b00040">uint32_t</span> key_0 <span style="color:#666">=</span> key[key_off <span style="color:#666">+</span> <span style="color:#666">0</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">const</span> <span style="color:#b00040">uint32_t</span> key_1 <span style="color:#666">=</span> key[key_off <span style="color:#666">+</span> <span style="color:#666">1</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">for</span> (size_t i <span style="color:#666">=</span> <span style="color:#666">0</span>; i <span style="color:#666">&lt;</span> count <span style="color:#666">*</span> <span style="color:#666">2</span>; i <span style="color:#666">+=</span> <span style="color:#666">2</span>) {
</span></span><span style="display:flex;"><span>    buf[i <span style="color:#666">+</span> <span style="color:#666">0</span>] <span style="color:#666">^=</span> key_0;
</span></span><span style="display:flex;"><span>    buf[i <span style="color:#666">+</span> <span style="color:#666">1</span>] <span style="color:#666">^=</span> key_1;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#b00040">uint32_t</span> sum <span style="color:#666">=</span> DELTA <span style="color:#666">*</span> nb_round;
</span></span><span style="display:flex;"><span>    <span style="color:#b00040">uint32_t</span> temp0 <span style="color:#666">=</span> buf[i <span style="color:#666">+</span> <span style="color:#666">0</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#b00040">uint32_t</span> temp1 <span style="color:#666">=</span> buf[i <span style="color:#666">+</span> <span style="color:#666">1</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">for</span> (size_t j <span style="color:#666">=</span> <span style="color:#666">0</span>; j <span style="color:#666">&lt;</span> nb_round; <span style="color:#666">++</span>j) {
</span></span><span style="display:flex;"><span>      temp1 <span style="color:#666">-=</span> (key[<span style="color:#666">2</span>] <span style="color:#666">+</span> (temp0 <span style="color:#666">&lt;&lt;</span> <span style="color:#666">4</span>)) <span style="color:#666">^</span> (key[<span style="color:#666">3</span>] <span style="color:#666">+</span> (temp0 <span style="color:#666">&gt;&gt;</span> <span style="color:#666">5</span>)) <span style="color:#666">^</span> (temp0 <span style="color:#666">+</span> sum);
</span></span><span style="display:flex;"><span>      temp0 <span style="color:#666">-=</span> (key[<span style="color:#666">0</span>] <span style="color:#666">+</span> (temp1 <span style="color:#666">&lt;&lt;</span> <span style="color:#666">4</span>)) <span style="color:#666">^</span> (key[<span style="color:#666">1</span>] <span style="color:#666">+</span> (temp1 <span style="color:#666">&gt;&gt;</span> <span style="color:#666">5</span>)) <span style="color:#666">^</span> (temp1 <span style="color:#666">+</span> sum);
</span></span><span style="display:flex;"><span>      sum <span style="color:#666">-=</span> DELTA;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    buf[i <span style="color:#666">+</span> <span style="color:#666">0</span>] <span style="color:#666">=</span> temp0;
</span></span><span style="display:flex;"><span>    buf[i <span style="color:#666">+</span> <span style="color:#666">1</span>] <span style="color:#666">=</span> temp1;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span> <span style="color:#666">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>After the decryption routine, the packer decompresses the data with <code>NRV</code>, the same algorithm used to compress the altered DEX
files:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>key <span style="color:#666">=</span> key_derivation(<span style="color:#008000">open</span>(<span style="color:#ba2121">&#34;assets/tosversion&#34;</span>, <span style="color:#ba2121">&#34;rb&#34;</span>)<span style="color:#666">.</span>read()[:<span style="color:#666">16</span>])
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">for</span> i <span style="color:#a2f;font-weight:bold">in</span> <span style="color:#008000">range</span>(nb_dex_files):
</span></span><span style="display:flex;"><span>  hashmap[i]          <span style="color:#666">=</span> nrv_decompress(xtea_decrypt(blob1, key))
</span></span><span style="display:flex;"><span>  dalvik_bytecodes[i] <span style="color:#666">=</span> nrv_decompress(xtea_decrypt(blob2, key))
</span></span></code></pre></div><h2 id="unpacking">Unpacking</h2>
<p>Putting all the pieces together, we can <strong>statically</strong> unpack protected APKs and recover the original bytecode:</p>
<p><img src="unpacked.png" alt=""></p>
<p>Hence, as we can automatically unpack such APKs, the unpacking process could be integrated into an automatic analysis pipeline.</p>
<p>The script and the Kaitai structures are available on the Quarkslab&rsquo;s repository: <a href="https://github.com/quarkslab/legu_unpacker_2019">legu_unpacker_2019</a>,
along with a suspicious application <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>, <a href="https://github.com/quarkslab/legu_unpacker_2019/blob/master/samples/com.intotherain.voicechange.apk">packed</a> and <a href="https://github.com/quarkslab/legu_unpacker_2019/blob/master/samples/com.intotherain.voicechange_unpacked.apk">unpacked</a>.</p>
<h2 id="acknowledgments">Acknowledgments</h2>
<p>Thanks to my colleagues who proofread this article.</p>
<h3 id="references">References</h3>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="http://www.oberhumer.com/opensource/ucl/">http://www.oberhumer.com/opensource/ucl/</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://en.wikipedia.org/wiki/XTEA">https://en.wikipedia.org/wiki/XTEA</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="http://androidxref.com/4.4.4_r1/xref/dalvik/vm/UtfString.cpp#88">http://androidxref.com/4.4.4_r1/xref/dalvik/vm/UtfString.cpp#88</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://www.virustotal.com/gui/file/708e6967920dcf2789b7183d714e73ab79a2f8b3ca71929b12aadeb2c58c2867/detection">https://www.virustotal.com/gui/file/708e6967920dcf2789b7183d714e73ab79a2f8b3ca71929b12aadeb2c58c2867/detection</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded><media:content medium="image" width="918" height="517" url="https://www.romainthomas.fr/post/a-glimpse-into-tencents-legu-packer/featured.png"/></item><item><title>Android Native Library Analysis with QBDI</title><dc:creator>Romain Thomas</dc:creator><link>https://www.romainthomas.fr/post/android-native-library-analysis-with-qbdi/</link><pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/android-native-library-analysis-with-qbdi/</guid><description>This blog post deals with QBDI and how it can be used to reverse an Android JNI library</description><content:encoded><![CDATA[<div class="col-12 col-md-12 mb-4 mb-lg-4 mt-4">
  <div class="p-4 rounded col-12 alert alert-info" style="background-color: #FAFCFF">
    <div class="d-flex px-3"><div>
        <div class="icon icon-sm icon-secondary">
          <span class="fa-duotone fa-link-horizontal" style="color: #084298" ></span>
        </div>
      </div>
      <div class="ps-4">
        <span class="h6 m-0 mb-1"  style="color: #084298">
        This post has been originally posted on the <a href=https://blog.quarkslab.com/android-native-library-analysis-with-qbdi.html>Quarkslab&rsquo;s Blog</a>
        </span>
      </div>
    </div>
  </div>
</div>
<h2 id="introduction">Introduction</h2>
<p>During the past few months we improved the ARM support in QBDI. More precisely, we enhanced the QBDI&rsquo;s engine
to support Thumb and Thumb2 instructions as well as Neon registers.</p>
<p>Development is still in progress and we need to clean the code and add non-regression tests
compared to the x86-64 support.</p>
<p>To add Thumb and Thumb2 support, we tested the DBI against well-known obfuscators such as <a href="https://epona.quarkslab.com">Epona</a>,
<a href="https://github.com/obfuscator-llvm/obfuscator">O-LLVM</a>
or <a href="https://www.arxan.com/">Arxan</a>, as we could expect good instruction coverage, corner cases and nice use cases.
The native code came from Android JNI libraries embedded in different APKs.</p>
<p>This blog post introduces some QBDI features that could be useful to assess native code
and speedup reverse engineering.
To expose these features, we analyzed an Android SDK that aims to protect applications against API misuse.</p>
<h2 id="dynamic-instrumentation-on-android">Dynamic Instrumentation on Android</h2>
<p><a href="https://www.frida.re/">Frida</a> is one of the Android day-to-day dynamic instrumentation framework widely
used to instrument applications.
It can address both native code with inline hooking and <em>Java</em> side thanks to ART instrumentation <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>Frida works at the function level and in some cases we may need to have a finer granularity
at the basic-block level or at the instruction level (i.e. have <em>hooks</em> on instructions)</p>
<p>To address this limitation, one trick commonly used is to combine hooking with emulation.
One can use Frida to hook the function that we are interested in, then we can dump the CPU context
and the memory state of the process and eventually continue the execution through an emulator like <a href="https://miasm.re/blog/">Miasm</a>
or <a href="https://www.unicorn-engine.org/">Unicorn</a></p>
<p>This approach works pretty well but has a few limitations:</p>
<ul>
<li><strong>Speed</strong>: For large sets of functions.</li>
<li><strong>External calls</strong>: One needs to mock external calls behavior (e.g. <code>strlen</code>, <code>malloc</code>, &hellip;).</li>
<li><strong>Some behaviors can be difficult to emulate</strong>: Thread, Android internal frameworks, &hellip;</li>
</ul>
<p>Moreover, while it is quite simple to mock the behavior of <code>strlen</code>, it may be more challenging to mock
JNI functions behavior like <code>FindClass()</code>, <code>GetMethodID()</code>, <code>RegisterNatives()</code>, &hellip;</p>
<p>The design of QBDI provides a good trade-off between full instrumentation and partial emulation thanks to
the <code>ExecBrocker</code> that enables to switch between instrumented code — our function — and non-instrumented
code: <code>strlen()</code>, <code>FindClass()</code>, <code>pthread_call_once()</code>, &hellip;</p>
<p>This diagram represents the instrumentation flow for the different scenarios:</p>
<p><img src="qbdi_flow.png" alt=""></p>
<p>For those who are interested in QBDI internals you can look at the 34C3 talk by Charles and Cédric <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.
There are also examples in the GitHub repository <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>To summarize, we can bootstrap QBDI as follows:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// QBDI main interface
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>QBDI<span style="color:#666">::</span>VM vm;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// QBDI CPU state for GPR registers
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>GPRState<span style="color:#666">*</span> state <span style="color:#666">=</span> vm.getGPRState();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// Setup virtual stack
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span><span style="color:#b00040">uint8_t</span> <span style="color:#666">*</span>fakestack <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">nullptr</span>;
</span></span><span style="display:flex;"><span>QBDI<span style="color:#666">::</span>allocateVirtualStack(state, <span style="color:#408080;font-style:italic">/* size */</span><span style="color:#666">0x100000</span>, <span style="color:#666">&amp;</span>fakestack);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// {
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">//    Setup instrumentation ranges, callbacks etc, ...
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// }
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// Start Instrumentation:
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>uintptr_t retval;
</span></span><span style="display:flex;"><span><span style="color:#b00040">bool</span> ok <span style="color:#666">=</span> vm.call(<span style="color:#666">&amp;</span>retval, <span style="color:#408080;font-style:italic">/* Address of the function to instrument */</span>);
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// Instrumentation Finished
</span></span></span></code></pre></div><h2 id="sdk-overview">SDK Overview</h2>
<p>Among the QBDI tests, we analyzed an SDK that aims to protect applications against API abuses.
This kind of protection is used to protect API endpoints against illegitimate uses: emulator, bots, &hellip;</p>
<p>To protect the main application, the solution collects information about the device state: rooted, debugged,
custom, then encodes this information with a <em>proprietary</em> algorithm and sends the encoded data to a server.</p>
<p>The <strong>server</strong> decodes the information sent by the device collector, performs analyses to check the device
integrity and sends back a token that handles the information about whether the device is corrupted or not.</p>
<p>The following figure summarizes this process:</p>
<p><img src="overview.png" alt=""></p>
<p>Such architecture is robust and similar to the one in <a href="https://developer.android.com/training/safetynet/attestation">Safetynet</a> <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>. On the other hand,
the SDK has fewer permissions than Safetynet, therefore it cannot collect as much data about
the device as SafetyNet does.</p>
<p>We started the analysis by monitoring the network traffic between the SDK and its server. At some point,
we can observe the following request:</p>
<p><img src="network.png" alt=""></p>
<p>It is JSON encoded and the characters that look like random values are the encoded information sent
by the device collector.</p>
<p>The analysis of the SDK aims to address these questions:</p>
<ul>
<li>How the SDK checks if the device is rooted or not ?</li>
<li>How the SDK detects if the application is being debugged ?</li>
<li>What kind of information is collected from the device and how it is encoded ?</li>
</ul>
<p>After a look at the Java layer, we found that the logic of the solution is implemented
in a JNI library that will be named <code>libApp.so</code> <sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>. The library exposes the following JNI functions:</p>
<p>! <a href="exports.png"></a></p>
<p>With static analysis, we can identify that the function <code>Java_XXX_JNIWrapper_ca3_14008()</code> is the one
involved in the generation of the sequence <code>&quot;QJRR{JJJGQJ~|MJJJ...&quot;</code>. It returns the encoded data as a
<code>java.lang.String</code> and takes two parameters that are not mandatory: <code>bArr</code>, <code>iArr</code> <sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>.</p>
<p><img src="java.png" alt=""></p>
<p>The library as a whole is not especially obfuscated. Nonetheless, we find strings encoding
and syscall replacement on well-known <code>libc</code> functions:</p>
<ul>
<li><code>read</code></li>
<li><code>openat</code></li>
<li><code>close</code></li>
<li>&hellip;</li>
</ul>
<p>This technique is commonly used to avoid hooking but the fact is that the given syscalls are wrapped
in functions that are not inlined. Hence, one can hook the functions that wrap
the associated syscall.</p>
<h2 id="get-started-with-qbdi">Get Started with QBDI</h2>
<p>In order to fully understand the logic of this function, we instrumented the function through QBDI <sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup> associated
with a set of instrumentation callbacks.</p>
<p>These callbacks aim to provide different kinds of information that will be useful to the analyst to understand the
function logic. For instance, we can setup a first callback that records
all the syscall instructions, we can also add a callback that records memory access.</p>
<p>The purpose of this blog post is to show how few — but well chosen — callbacks enable to understand the
logic of the function.</p>
<p>First of all, the native library embedded in the SDK can be loaded outside of the original APK using
<code>dlopen()</code> / <code>dlsym()</code>.
Moreover, one can instantiate a JVM thanks to the ART runtime (<code>libart.so</code>):</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#b00040">int</span> <span style="color:#00f">main</span>(<span style="color:#b00040">int</span> argc, <span style="color:#b00040">char</span><span style="color:#666">**</span> argv) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#008000;font-weight:bold">static</span> <span style="color:#008000;font-weight:bold">constexpr</span> <span style="color:#008000;font-weight:bold">const</span> <span style="color:#b00040">char</span><span style="color:#666">*</span> TARGET_LIB  <span style="color:#666">=</span> <span style="color:#ba2121">&#34;libApp.so&#34;</span>;
</span></span><span style="display:flex;"><span>   <span style="color:#b00040">void</span><span style="color:#666">*</span> hdl <span style="color:#666">=</span> dlopen(TARGET_LIB, RTLD_NOW);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#008000;font-weight:bold">using</span> jni_func_t <span style="color:#666">=</span> jstring(<span style="color:#666">*</span>)(JNIEnv<span style="color:#666">*</span> <span style="color:#408080;font-style:italic">/* Other parameters are not required */</span>);
</span></span><span style="display:flex;"><span>   <span style="color:#008000;font-weight:bold">auto</span> jni_func  <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span>jni_func_t<span style="color:#666">&gt;</span>(dlsym(hdl, <span style="color:#ba2121">&#34;Java_XXX_JNIWrapper_ca3_14008&#34;</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   JavaVM<span style="color:#666">*</span> jvm, JNIEnv<span style="color:#666">*</span> env;
</span></span><span style="display:flex;"><span>   ART_Kitchen(jvm, env); <span style="color:#408080;font-style:italic">// Instantiate the JVM and initialize the jvm and env pointers
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>}
</span></span></code></pre></div><p>At this point, the <code>jni_func()</code> function is tied to <code>Java_XXX_JNIWrapper_ca3_14008</code> and ready to be
executed in <code>main()</code>:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>jstring output <span style="color:#666">=</span> jni_func(env);
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">const</span> <span style="color:#b00040">char</span><span style="color:#666">*</span> cstring <span style="color:#666">=</span> env<span style="color:#666">-&gt;</span>GetStringUTFChars(output, <span style="color:#008000;font-weight:bold">nullptr</span>);
</span></span><span style="display:flex;"><span>console<span style="color:#666">-&gt;</span>info(<span style="color:#ba2121">&#34;Real Output: {}&#34;</span>, cstring);
</span></span></code></pre></div><p><img src="real_output.png" alt=""></p>
<p>The output seems consistent with the network capture and the value <code>&quot;root: 1&quot;</code> too since we are on a rooted device <sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup></p>
<p>Now, let&rsquo;s run the function through QBDI:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>console<span style="color:#666">-&gt;</span>info(<span style="color:#ba2121">&#34;Initializing VM ...&#34;</span>);
</span></span><span style="display:flex;"><span>QBDI<span style="color:#666">::</span>VM vm;
</span></span><span style="display:flex;"><span>GPRState<span style="color:#666">*</span> state <span style="color:#666">=</span> vm.getGPRState();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#b00040">uint8_t</span> <span style="color:#666">*</span>fakestack <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">nullptr</span>;
</span></span><span style="display:flex;"><span>QBDI<span style="color:#666">::</span>allocateVirtualStack(state, <span style="color:#666">0x100000</span>, <span style="color:#666">&amp;</span>fakestack);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>console<span style="color:#666">-&gt;</span>info(<span style="color:#ba2121">&#34;Instument module: {}&#34;</span>, TARGET_LIB);
</span></span><span style="display:flex;"><span>vm.addInstrumentedModule(TARGET_LIB);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>console<span style="color:#666">-&gt;</span>info(<span style="color:#ba2121">&#34;Simulate call in QBDI&#34;</span>);
</span></span><span style="display:flex;"><span>jstring dbioutput;
</span></span><span style="display:flex;"><span><span style="color:#b00040">bool</span> ok <span style="color:#666">=</span> vm.call(<span style="color:#666">&amp;</span>dbioutput, <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span>rword<span style="color:#666">&gt;</span>(jni_func), {<span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span>rword<span style="color:#666">&gt;</span>(env)});
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">if</span> (ok and dbioutput <span style="color:#666">!=</span> <span style="color:#008000;font-weight:bold">nullptr</span>) {
</span></span><span style="display:flex;"><span>  console<span style="color:#666">-&gt;</span>info(<span style="color:#ba2121">&#34;DBI output {:x}&#34;</span>, env<span style="color:#666">-&gt;</span>GetStringUTFChars(dbioutput, <span style="color:#008000;font-weight:bold">nullptr</span>));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This code provides the following output:</p>
<p><img src="dbi_output.png" alt=""></p>
<p>Everything looks good, QBDI managed to <strong>fully</strong> instrument the function (which includes ARM / Thumb switch)
and the result is similar to the real execution.</p>
<h1 id="analysis">Analysis</h1>
<p>Now that we are able to run and instrument the function,
we can start to add instrumentation callbacks to analyze its behavior.</p>
<p>One of the first callbacks that is useful to setup is a callback that instruments syscall
instructions (i.e. <code>svc #0</code>). To do so, we can use the <code>vm.addSyscallCB(position, callback, data)</code>.</p>
<ul>
<li><strong>position</strong> - It stands for the position of the callback: Before or after the syscall.</li>
<li><strong>callback</strong> - The callback itself.</li>
<li><strong>data</strong> - Pointer to user data (e.g. user context that register dynamic information)</li>
</ul>
<p>It leads to the following piece of code:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">auto</span> syscall_enter_cbk <span style="color:#666">=</span> [] (VMInstanceRef vm, GPRState <span style="color:#666">*</span>gprState, FPRState <span style="color:#666">*</span>fprState, <span style="color:#b00040">void</span> <span style="color:#666">*</span>data) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#008000;font-weight:bold">const</span> InstAnalysis<span style="color:#666">*</span> analysis <span style="color:#666">=</span> vm<span style="color:#666">-&gt;</span>getInstAnalysis(ANALYSIS_INSTRUCTION <span style="color:#666">|</span> ANALYSIS_DISASSEMBLY);
</span></span><span style="display:flex;"><span>   rword syscall_number <span style="color:#666">=</span> gprState<span style="color:#666">-&gt;</span>r7;
</span></span><span style="display:flex;"><span>   <span style="color:#408080;font-style:italic">/*
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">    * std::string sys_str = lookup[syscall_number]; // Lookup table that convert syscall number to function
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">    */</span>
</span></span><span style="display:flex;"><span>   console<span style="color:#666">-&gt;</span>info(<span style="color:#ba2121">&#34;0x{:06x} {} ({})&#34;</span>, addr, analysis<span style="color:#666">-&gt;</span>disassembly, sys_str);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#008000;font-weight:bold">return</span> VMAction<span style="color:#666">::</span>CONTINUE;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vm.addSyscallCB(PREINST,  syscall_enter_cbk, <span style="color:#408080;font-style:italic">/* data */</span> <span style="color:#008000;font-weight:bold">nullptr</span>);
</span></span></code></pre></div><p>Before any syscall instructions, we perform a basic lookup on the syscall number stored in the <strong>R7</strong> register
to resolve its name.</p>
<p>It results in the following output:</p>
<p><img src="syscall.1.png" alt=""></p>
<p>Since we are able to resolve syscall numbers into function names, we can improve the logic of callback
to dispatch and print function parameters:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">auto</span> syscall_enter_cbk <span style="color:#666">=</span> [] (...) {
</span></span><span style="display:flex;"><span>   ...
</span></span><span style="display:flex;"><span>   <span style="color:#408080;font-style:italic">/*
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">    * Lookup table (syscall number, function pointer)
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">    * {
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">    *   322 -&gt; on_openat
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">    * }
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">    */</span>
</span></span><span style="display:flex;"><span>   <span style="color:#008000;font-weight:bold">auto</span> function_wrapper <span style="color:#666">=</span> func_lookup[syscall_number];
</span></span><span style="display:flex;"><span>   <span style="color:#008000;font-weight:bold">return</span> <span style="color:#00f">function_wrapper</span>(...)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// Wrapper for openat syscall
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>VMAction on_openat(VMInstanceRef vm, GPRState <span style="color:#666">*</span>gprState, ...) {
</span></span><span style="display:flex;"><span>   <span style="color:#008000;font-weight:bold">auto</span> path <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span><span style="color:#008000;font-weight:bold">const</span> <span style="color:#b00040">char</span><span style="color:#666">*&gt;</span>(gprState<span style="color:#666">-&gt;</span>r1);
</span></span><span style="display:flex;"><span>   console<span style="color:#666">-&gt;</span>info(<span style="color:#ba2121">&#34;openat({})&#34;</span>, path);
</span></span><span style="display:flex;"><span>   <span style="color:#008000;font-weight:bold">return</span> VMAction<span style="color:#666">::</span>CONTINUE;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>By doing so on the common syscalls number, we get this new trace:</p>
<p><img src="syscall.2.png" alt=""></p>
<p>Based on this output, we can figure out how root check (orange area) is done. It is performed by checking
the existence of the following binaries:</p>
<ul>
<li>/system/bin/su</li>
<li>/system/xbin/su</li>
<li>/sbin/su</li>
<li>&hellip;</li>
</ul>
<p>The function also checks if some directories are present on the device (<code>faccessat</code> syscall):</p>
<ul>
<li>/data</li>
<li>/tmp</li>
<li>/system</li>
<li>&hellip;</li>
</ul>
<p>Especially, it would be suspicious if the directory <code>/tmp</code> were present on the <em>device</em> while it is standard to
have <code>/system</code> and <code>/data</code> directories.</p>
<p>Regarding the debug state of the process (blue area), it is done by looking at <code>/proc/self/status</code>.  After
analysis, the function checks the <code>TracerPID</code> attribute
(cf <a href="https://www.vantagepoint.sg/blog/89-more-android-anti-debugging-fun">More Android Anti-Debugging Fun - B. Mueller</a>)</p>
<p>Finally, the function processes the output of <code>/proc/self/maps</code> right before to returning the encoded values.
It suggests that the data collected by the solution are based on this resource.</p>
<h3 id="encoding-routine">Encoding Routine</h3>
<p>In the previous part we got a global overview about how the solution achieves root detection,
debug detection and what kind of data is collected (i.e. process memory map).</p>
<p>However, some questions are pending:</p>
<ul>
<li>What part of the process memory map is used: Base addresses ? Module paths ? Permissions ?</li>
<li>How the data are encoded (i.e. how <code>QJRR{JJJGQJ~|MJJJ...</code> is generated) ?</li>
</ul>
<p>Along with the QBDI ARM support, we also added ARM support to resolve <strong>memory addresses</strong> during the
instrumentation.
It means that QBDI is now able to resolve <strong>the effective memory address</strong> of instructions such as:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-armasm" data-lang="armasm"><span style="display:flex;"><span>LDR <span style="">R0</span>, <span style="">[R1</span>, <span style="">R2]</span><span style="color:#408080;font-style:italic">;         # Resolve R1 + R2
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>STR <span style="">R1</span>, <span style="">[R2</span>, <span style="">R3</span>, <span style="">LSL</span> #<span style="color:#666">2</span><span style="">]</span><span style="color:#408080;font-style:italic">; # Resolve R2 + R3 * 4
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>LDRB    <span style="">[PC</span>, #<span style="color:#666">4</span><span style="">]</span><span style="color:#408080;font-style:italic">;         # Resolve **real** PC + 4
</span></span></span></code></pre></div><p>Moreover, QBDI is also able to get <strong>the effective memory value</strong> that is read or written. This feature
is quite useful in the case of conditional instructions such as:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-armasm" data-lang="armasm"><span style="display:flex;"><span>ITT <span style="">LS</span><span style="color:#408080;font-style:italic">;
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>LDRLS <span style="">R0</span>, <span style="">[R4]</span><span style="color:#408080;font-style:italic">;
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>LDRLS <span style="">R1</span>, <span style="">[R0</span>, #<span style="color:#666">4</span><span style="">]</span>
</span></span></code></pre></div><p>The <strong>effective</strong> value of <code>R0</code> and <code>R1</code> is stored in QBDI. It may not be
<code>*(r4)</code> and <code>*(r0 + 4)</code> since the <code>LS</code> condition may not be verified.</p>
<p>To add a callback on memory accesses, we can use the <code>addMemAccessCB(...)</code> function on the VM instance:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>vm.addMemAccessCB(MEMORY_READ_WRITE, memory_callback, <span style="color:#408080;font-style:italic">/* data */</span> <span style="color:#008000;font-weight:bold">nullptr</span>);
</span></span></code></pre></div><p>In the given <code>memory_callback(...)</code> function, we perform the following actions:</p>
<ul>
<li>Track memory <strong>byte</strong> accesses.</li>
<li>Check if the value is printable.</li>
<li>Pretty print the R/W value.</li>
</ul>
<p>The idea of this callback is to track memory accesses that are performed on printable characters. It enables
to quickly identify strings encoding/decoding routines.</p>
<p>Here is the implementation of the callback:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>VMAction <span style="color:#00f">memory_callback</span>(VMInstanceRef vm, GPRState <span style="color:#666">*</span>gprState, ...) {
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">auto</span><span style="color:#666">&amp;&amp;</span> acc <span style="color:#666">=</span> vm<span style="color:#666">-&gt;</span>getInstMemoryAccess();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic">// Get last memory access
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  MemoryAccess maccess <span style="color:#666">=</span> acc.back();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic">// Retrieve access information:
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  rword addr  <span style="color:#666">=</span> maccess.accessAddress; <span style="color:#408080;font-style:italic">// Address accessed
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  rword value <span style="color:#666">=</span> maccess.value;         <span style="color:#408080;font-style:italic">// Value read or written
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  rword size  <span style="color:#666">=</span> maccess.size;          <span style="color:#408080;font-style:italic">// Access size
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic">// Only look for byte access
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  <span style="color:#008000;font-weight:bold">if</span> (size <span style="color:#666">!=</span> <span style="color:#008000;font-weight:bold">sizeof</span>(<span style="color:#b00040">char</span>)) {
</span></span><span style="display:flex;"><span>     <span style="color:#008000;font-weight:bold">return</span> VMAction<span style="color:#666">::</span>CONTINUE;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic">// Read / Write operation as a string
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  <span style="color:#008000;font-weight:bold">const</span> std<span style="color:#666">::</span>string kind <span style="color:#666">=</span> maccess.type <span style="color:#666">==</span> MemoryAccessType<span style="color:#666">::</span>MEMORY_READ <span style="color:#666">?</span> <span style="color:#ba2121">&#34;[R]&#34;</span> <span style="color:#666">:</span> <span style="color:#ba2121">&#34;[W]&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic">// Cast the value into a char
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  <span style="color:#008000;font-weight:bold">const</span> <span style="color:#b00040">char</span> cvalue <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">static_cast</span><span style="color:#666">&lt;</span><span style="color:#b00040">char</span><span style="color:#666">&gt;</span>(value);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic">// Check if the value read or written is printable
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  <span style="color:#008000;font-weight:bold">if</span> (<span style="color:#666">::</span>isprint(cvalue)) {
</span></span><span style="display:flex;"><span>     logger<span style="color:#666">-&gt;</span>info(<span style="color:#ba2121">&#34;0x{:x} {}: {}&#34;</span>, addr, kind, cvalue); <span style="color:#408080;font-style:italic">// Pretty print
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic">// Continue this execution
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>  <span style="color:#008000;font-weight:bold">return</span> VMAction<span style="color:#666">::</span>CONTINUE;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>With this new callback, we can observe such output between two <code>openat()</code> syscalls involved in the
<code>root</code> check routine:</p>
<p><img src="su_decode.png" alt=""></p>
<p>It is basically the string decoding routine in action. Note that some read operations are missing
since we only track <strong>printable</strong> characters. However all write operations are present.</p>
<p>The routine <strong>loads</strong> characters with the instruction at address <strong>0x295e</strong> and <strong>stores</strong> the decoded
value at address <strong>0x2972</strong>. If we look at the function that handles these two addresses, we find
the decoding routine:</p>
<p><img src="decoding_routine.png" alt=""></p>
<p>In the above figure, the <strong>green</strong> section highlights the memory <strong>load access</strong> while the <strong>red</strong> one highlights
the <strong>write operation</strong>. The <strong>blue</strong> area is the <strong>decoding logic</strong>.</p>
<p>The output of <strong>all</strong> read / write accesses turns out to be quite verbose on the whole execution of the function.
We can improve the instrumentation by adding two callbacks before and after function <strong>calls</strong>
with this purpose:</p>
<ol>
<li>Before calls, we print the target address (e.g. <code>0x123: blx r3 -&gt; .text!0xABC</code>).</li>
<li>After calls we print <strong>all</strong> printable characters being read or written <strong>within the called function</strong>.</li>
</ol>
<p>The <code>addCallCB(...)</code> is still in experimentation but it aims to put callbacks before or after call instructions:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// Callback before ``call`` instructions
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>vm.addCallCB(PRECALL,  on_call_enter, <span style="color:#008000;font-weight:bold">nullptr</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">// Callback when a ``call`` returns
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>vm.addCallCB(POSTCALL, on_call_exit, <span style="color:#008000;font-weight:bold">nullptr</span>);
</span></span></code></pre></div><p>With these two callbacks we get the following output:</p>
<p><img src="memtrace.0.png" alt=""></p>
<p>By going further in the memory trace, we can observe this output:</p>
<p><img src="memtrace.png" alt=""></p>
<p>From this output we can infer the behavior of the collector (pseudo-code):</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>f <span style="color:#666">=</span> <span style="color:#008000">open</span>(<span style="color:#ba2121">&#34;/proc/self/maps&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">for</span> line <span style="color:#a2f;font-weight:bold">in</span> f<span style="color:#666">.</span>readlines():
</span></span><span style="display:flex;"><span>   <span style="color:#008000;font-weight:bold">if</span> <span style="color:#a2f;font-weight:bold">not</span> <span style="color:#ba2121">&#34;/&#34;</span> <span style="color:#a2f;font-weight:bold">in</span> line: <span style="color:#408080;font-style:italic"># Avoid entries such as XXX-YYY ... [anon:linker_alloc]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#008000;font-weight:bold">continue</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#008000;font-weight:bold">if</span> <span style="color:#a2f;font-weight:bold">not</span> <span style="color:#ba2121">&#34;-xp&#34;</span> <span style="color:#a2f;font-weight:bold">in</span> line <span style="color:#408080;font-style:italic"># Process executable segments only</span>
</span></span><span style="display:flex;"><span>      <span style="color:#008000;font-weight:bold">continue</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    buffer <span style="color:#666">+=</span> encode(line)
</span></span></code></pre></div><p>We can also observe a sequence of</p>
<ol>
<li><strong>READ</strong> <code>line[i]</code></li>
<li><strong>CALL</strong> <code>.text!0xd2ba</code></li>
<li><strong>WRITE</strong> <code>encoded(line[i])</code></li>
</ol>
<p>It suggests that the logic of the <code>encode()</code> function is implemented at address <strong>0xd2ba</strong>.</p>
<p>The CFG of this function is compounded by instructions that compare the input against <em>magic</em> printable
values and we manually checked that it is the encoding function. Moreover this function is — by design — reversible since
the server side algorithm needs to process the <em>encoded</em> data.</p>
<p><img src="encoding_routine.png" alt=""></p>
<h1 id="library-lifting">Library lifting</h1>
<p>In the previous parts, we targeted the ARM version of the library. It turns out that SDKs which use
native libraries usually provide the libraries for all architectures (<code>arm</code>, <code>arm64</code>, <code>x86</code>, <code>x86-64</code>).</p>
<p>Indeed, they do not want to limit developers to some architectures. The solution previously analyzed also
comes with a <code>x86-64</code> version of <code>libApp.so</code> with the exact same interface.</p>
<p>Moreover, the analysis done in the previous sections shows that there are no real dependencies to the Android system:</p>
<ul>
<li>Syscall are standards and available on Linux.</li>
<li><code>/proc/self/maps</code> and <code>/proc/self/status</code> are available on Linux.</li>
</ul>
<p>Thus, we can <em>lift</em> the library and run it on Linux. This technique has already been described in this
blog post: <a href="https://blog.quarkslab.com/when-sidechannelmarvels-meet-lief.html">When SideChannelMarvels meet LIEF</a>.</p>
<p>In a first step, we have to patch the library with LIEF:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">import</span> <span style="color:#00f;font-weight:bold">lief</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>libApp <span style="color:#666">=</span> lief<span style="color:#666">.</span>parse(<span style="color:#ba2121">&#34;libApp.so&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"># Patch library names</span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"># ===================</span>
</span></span><span style="display:flex;"><span>libApp<span style="color:#666">.</span>get_library(<span style="color:#ba2121">&#34;libc.so&#34;</span>)<span style="color:#666">.</span>name   <span style="color:#666">=</span> <span style="color:#ba2121">&#34;libc.so.6&#34;</span>
</span></span><span style="display:flex;"><span>libApp<span style="color:#666">.</span>get_library(<span style="color:#ba2121">&#34;liblog.so&#34;</span>)<span style="color:#666">.</span>name <span style="color:#666">=</span> <span style="color:#ba2121">&#34;libc.so.6&#34;</span>
</span></span><span style="display:flex;"><span>libApp<span style="color:#666">.</span>get_library(<span style="color:#ba2121">&#34;libm.so&#34;</span>)<span style="color:#666">.</span>name   <span style="color:#666">=</span> <span style="color:#ba2121">&#34;libm.so.6&#34;</span>
</span></span><span style="display:flex;"><span>libApp<span style="color:#666">.</span>get_library(<span style="color:#ba2121">&#34;libdl.so&#34;</span>)<span style="color:#666">.</span>name  <span style="color:#666">=</span> <span style="color:#ba2121">&#34;libdl.so.2&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"># Patch dynamic entries</span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"># =====================</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"># 1. Remove ELF constructors</span>
</span></span><span style="display:flex;"><span>libApp[lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DYNAMIC_TAGS<span style="color:#666">.</span>INIT_ARRAY]<span style="color:#666">.</span>array   <span style="color:#666">=</span> []
</span></span><span style="display:flex;"><span>libApp[lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DYNAMIC_TAGS<span style="color:#666">.</span>INIT_ARRAY]<span style="color:#666">.</span>tag     <span style="color:#666">=</span> lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DYNAMIC_TAGS<span style="color:#666">.</span>DEBUG
</span></span><span style="display:flex;"><span>libApp[lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DYNAMIC_TAGS<span style="color:#666">.</span>INIT_ARRAYSZ]<span style="color:#666">.</span>value <span style="color:#666">=</span> <span style="color:#666">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>libApp[lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DYNAMIC_TAGS<span style="color:#666">.</span>FINI_ARRAY]<span style="color:#666">.</span>array   <span style="color:#666">=</span> []
</span></span><span style="display:flex;"><span>libApp[lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DYNAMIC_TAGS<span style="color:#666">.</span>FINI_ARRAY]<span style="color:#666">.</span>tag     <span style="color:#666">=</span> lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DYNAMIC_TAGS<span style="color:#666">.</span>DEBUG
</span></span><span style="display:flex;"><span>libApp[lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DYNAMIC_TAGS<span style="color:#666">.</span>FINI_ARRAYSZ]<span style="color:#666">.</span>value <span style="color:#666">=</span> <span style="color:#666">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"># 2. Remove symbol versioning</span>
</span></span><span style="display:flex;"><span>libApp[lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DYNAMIC_TAGS<span style="color:#666">.</span>VERNEEDNUM]<span style="color:#666">.</span>tag <span style="color:#666">=</span> lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DYNAMIC_TAGS<span style="color:#666">.</span>DEBUG
</span></span><span style="display:flex;"><span>libApp[lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DYNAMIC_TAGS<span style="color:#666">.</span>VERNEED]<span style="color:#666">.</span>tag    <span style="color:#666">=</span> lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DYNAMIC_TAGS<span style="color:#666">.</span>DEBUG
</span></span><span style="display:flex;"><span>libApp[lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DYNAMIC_TAGS<span style="color:#666">.</span>VERDEFNUM]<span style="color:#666">.</span>tag  <span style="color:#666">=</span> lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DYNAMIC_TAGS<span style="color:#666">.</span>DEBUG
</span></span><span style="display:flex;"><span>libApp[lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DYNAMIC_TAGS<span style="color:#666">.</span>VERDEF]<span style="color:#666">.</span>tag     <span style="color:#666">=</span> lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DYNAMIC_TAGS<span style="color:#666">.</span>DEBUG
</span></span><span style="display:flex;"><span>libApp[lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DYNAMIC_TAGS<span style="color:#666">.</span>VERSYM]<span style="color:#666">.</span>tag     <span style="color:#666">=</span> lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DYNAMIC_TAGS<span style="color:#666">.</span>DEBUG
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>libApp<span style="color:#666">.</span>write(<span style="color:#ba2121">&#34;libApp-x86-64.so&#34;</span>)
</span></span></code></pre></div><p>Then, we can instantiate a Linux JVM and run the native function:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#b00040">int</span> <span style="color:#00f">main</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   JavaVM <span style="color:#666">*</span>jvm <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">nullptr</span>;
</span></span><span style="display:flex;"><span>   JNIEnv<span style="color:#666">*</span> env <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">nullptr</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#408080;font-style:italic">// JVM options
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>   JavaVMOption opt[<span style="color:#666">1</span>];
</span></span><span style="display:flex;"><span>   JavaVMInitArgs args;
</span></span><span style="display:flex;"><span>   ...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#408080;font-style:italic">// JVM instantiation
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>   JNI_CreateJavaVM(<span style="color:#666">&amp;</span>jvm, <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span><span style="color:#b00040">void</span><span style="color:#666">**&gt;</span>(<span style="color:#666">&amp;</span>env), <span style="color:#666">&amp;</span>args);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#408080;font-style:italic">// Load the library
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>   <span style="color:#b00040">void</span><span style="color:#666">*</span> hdl <span style="color:#666">=</span> dlopen(<span style="color:#ba2121">&#34;libApp-x86-64.so&#34;</span>, RTLD_LAZY <span style="color:#666">|</span> RTLD_LOCAL);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#408080;font-style:italic">// Resolve the functions
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>   <span style="color:#008000;font-weight:bold">using</span> abi_t      <span style="color:#666">=</span> jint(<span style="color:#666">*</span>)(JNIEnv<span style="color:#666">*</span>);
</span></span><span style="display:flex;"><span>   <span style="color:#008000;font-weight:bold">using</span> jni_func_t <span style="color:#666">=</span> jstring(<span style="color:#666">*</span>)(JNIEnv<span style="color:#666">*</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#008000;font-weight:bold">auto</span><span style="color:#666">&amp;&amp;</span> jni_get_abi <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span>abi_t<span style="color:#666">&gt;</span>(dlsym(hdl, <span style="color:#ba2121">&#34;Java_XXX_JNIWrapper_ca3_14007&#34;</span>));
</span></span><span style="display:flex;"><span>   <span style="color:#008000;font-weight:bold">auto</span><span style="color:#666">&amp;&amp;</span> jni_func    <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span>jni_func_t<span style="color:#666">&gt;</span>(dlsym(hdl, <span style="color:#ba2121">&#34;Java_XXX_JNIWrapper_ca3_14008&#34;</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#408080;font-style:italic">// Execute
</span></span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"></span>   jint abi <span style="color:#666">=</span> jni_get_abi(env);
</span></span><span style="display:flex;"><span>   console<span style="color:#666">-&gt;</span>info(<span style="color:#ba2121">&#34;ABI: {:d}&#34;</span>, abi);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   jstring encoded <span style="color:#666">=</span> jni_func(env);
</span></span><span style="display:flex;"><span>   console<span style="color:#666">-&gt;</span>info(<span style="color:#ba2121">&#34;ca3_14008(): {}&#34;</span>, env<span style="color:#666">-&gt;</span>GetStringUTFChars(encoded, <span style="color:#008000;font-weight:bold">nullptr</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#008000;font-weight:bold">return</span> EXIT_SUCCESS;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>By executing this code, we get a similar output as seen in the previous parts:</p>
<p><img src="rip.png" alt=""></p>
<p>We can also run the <code>strace</code> utility to inspect the syscalls:</p>
<p><img src="strace.png" alt=""></p>
<p>Since we are able to run the function on Linux, we could also use <code>gdb</code>, <code>Intel PIN</code> or <code>QBDI(x86-64)</code>
to analyze the library.</p>
<h2 id="conclusion">Conclusion</h2>
<p>While it has been quite challenging to add the whole ARM support in QBDI, it starts to work pretty well on real
use cases. Such support should also lead to interesting applications among which:</p>
<ul>
<li>HongFuzz / QBDI for Android.</li>
<li><a href="https://github.com/SideChannelMarvels">SideChannelMarvels</a> integration for CPA attacks.</li>
<li>Trustlets instrumentation.</li>
</ul>
<p>The raw traces used in this blog post are available here: <a href="traces.zip">traces.zip</a></p>
<h2 id="acknowledgments">Acknowledgments</h2>
<p>Many thanks to Charles Hubain and Cédric Tessier who developed and designed QBDI. It is really pleasant
to work on the concepts involved in this DBI.</p>
<p>Thanks to the LLVM community to provide such framework without which this project would not be possible.</p>
<p>Thanks to my Quarkslab colleagues who proofread this article.</p>
<h2 id="references">References</h2>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Frida modifies fields of the <code>art::ArtMethod</code> object associated with the Java method.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://qbdi.quarkslab.com/QBDI_34c3.pdf">Slides</a> - <a href="https://media.ccc.de/v/34c3-9006-implementing_an_llvm_based_dynamic_binary_instrumentation_framework">Talk</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://github.com/QBDI/QBDI/blob/master/examples">https://github.com/QBDI/QBDI/blob/master/examples</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>DroidGuard being the SafetyNet module that collects information about the device.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>The name has been intentionally changed.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>Plus the <code>this</code> parameter which is a <code>jclass</code> object for a static method.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>Even though static analysis would be enough in this case.&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p>Nexus 5X - Android 8.1.0 - Rooted with Magisk.&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded><media:content medium="image" width="918" height="517" url="https://www.romainthomas.fr/post/android-native-library-analysis-with-qbdi/featured.png"/></item><item><title>Android crackme challenge</title><dc:creator>Romain Thomas</dc:creator><link>https://www.romainthomas.fr/post/android-crackme/</link><pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/android-crackme/</guid><description>Android crackme that uses system&amp;rsquo;s internals</description><content:encoded><![CDATA[<div class="col-12 col-md-12 mb-4 mb-lg-4 mt-4">
  <div class="p-4 rounded col-12 alert alert-info" style="background-color: #FAFCFF">
    <div class="d-flex px-3"><div>
        <div class="icon icon-sm icon-secondary">
          <span class="fa-duotone fa-link-horizontal" style="color: #084298" ></span>
        </div>
      </div>
      <div class="ps-4">
        <span class="h6 m-0 mb-1"  style="color: #084298">
        This post has been originally posted on the <a href=https://blog.quarkslab.com/android-challenge.html>Quarkslab&rsquo;s Blog</a>
        </span>
      </div>
    </div>
  </div>
</div>
<p>Here is an Android crackme developed for the Android training given at Quarkslab.</p>
<p>The objective is to find the correct phone number that leads to the following message:</p>
<p><img src="screen.png" alt="success"></p>
<p>The application can be run on an emulator or a real device (whatever the architecture) but the Android version must be at <strong>least Marshmallow</strong> (&gt; 6.0).</p>
<p><a href="crackme-telegram.apk">crackme-telegram.apk</a> - <code>SHA256: d66b82ebc14708b214a581760e99894af17e10598bcef95e75441a12b948bbf0</code></p>
]]></content:encoded><media:content medium="image" width="918" height="517" url="https://www.romainthomas.fr/post/android-crackme/featured.png"/></item><item><title>Android OAT formats</title><dc:creator>Romain Thomas</dc:creator><link>https://www.romainthomas.fr/post/android-oat/</link><pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/android-oat/</guid><description>Internal structures of OAT format</description><content:encoded><![CDATA[<p>Here are internal structures of Android OAT:</p>
<h1 id="oat-124">OAT 124</h1>
<p><img src="oat_124.png" alt="OAT 124"></p>
<p><a href="oat_124.pdf">PDF Version</a></p>
<h1 id="oat-79">OAT 79</h1>
<p><img src="oat_79.png" alt="OAT 79"></p>
<p><a href="oat_79.pdf">PDF Version</a></p>
<h1 id="oat-64">OAT 64</h1>
<p><img src="oat_64.png" alt="OAT 64"></p>
<p><a href="oat_64.pdf">PDF Version</a></p>
]]></content:encoded><media:content medium="image" width="918" height="517" url="https://www.romainthomas.fr/post/android-oat/featured.png"/></item><item><title>Android VDEX formats</title><dc:creator>Romain Thomas</dc:creator><link>https://www.romainthomas.fr/post/android-vdex/</link><pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/android-vdex/</guid><description>Internal structures of VDEX format</description><content:encoded><![CDATA[<p>Here are internal structures of Android VDEX:</p>
<h1 id="vdex-10">VDEX 10</h1>
<p><img src="vdex_10.png" alt="VDEX 10"></p>
<p><a href="vdex_10.pdf">PDF Version</a></p>
<h1 id="vdex-06">VDEX 06</h1>
<p><img src="vdex_06.png" alt="VDEX 06"></p>
<p><a href="vdex_06.pdf">PDF Version</a></p>
]]></content:encoded><media:content medium="image" width="918" height="517" url="https://www.romainthomas.fr/post/android-vdex/featured.png"/></item><item><title>When SideChannelMarvels meets LIEF</title><dc:creator>Romain Thomas</dc:creator><link>https://www.romainthomas.fr/post/18-05-when-sidechannelmarvels-meets-lief/</link><pubDate>Thu, 03 May 2018 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/18-05-when-sidechannelmarvels-meets-lief/</guid><description>On how we used LIEF to lift an Android x86_64 library to Linux to perform our usual white-box attacks on it.</description><content:encoded><![CDATA[<div class="col-12 col-md-12 mb-4 mb-lg-4 mt-4">
  <div class="p-4 rounded col-12 alert alert-info" style="background-color: #FAFCFF">
    <div class="d-flex px-3"><div>
        <div class="icon icon-sm icon-secondary">
          <span class="fa-duotone fa-link-horizontal" style="color: #084298" ></span>
        </div>
      </div>
      <div class="ps-4">
        <span class="h6 m-0 mb-1"  style="color: #084298">
        This post has been originally posted on the <a href="https://blog.quarkslab.com/when-sidechannelmarvels-meet-lief.html">Quarkslab&rsquo;s Blog</a>
        </span>
      </div>
    </div>
  </div>
</div>
<h2 id="introduction">Introduction</h2>
<p>For those of you following our SideChannelMarvels<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, you know that whenever we stumble on a non-commercial
white-box implementation, we like to add it to the Deadpool project, a repository of various public white-box
cryptographic implementations and their practical attacks.</p>
<p>This time, we wanted to have a look at the white-box created by Sanghwan (h2spice) Ahn and proposed during
SECCON2016 CTF<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. Apparently only PPP solved it during the competition and Sanghwan wrote himself a write-up<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>The challenge consists in an Android APK. When you launch it, it displays a flag encrypted a random number of
times (between 1 and 3601). When encrypted only once, the flag is <code>g1UlZafiuGdCgpTkWYjaZg3kE6qCd7kF3kV+nMKcGHc=</code>.</p>
<p>To be able to ‘plug’ the challenge into our tools, we need to get an easy access to the input and output of
the AES encryption function. A quick look reveals that the actual cryptographic operations are done in a
native library called libnative-lib.so, conveniently available for several architectures. The function
<code>TfcqPqf1lNhu0DC2qGsAAeML0SEmOBYX4jpYUnyT8qYWIlEq(unsigned char*, unsigned char*)</code> is the AES encryption
function we want to attack. Note that the library is obfuscated with Obfuscator-LLVM 3.6.1, as we can see
from its <code>.comment</code> section.</p>
<p>But we&rsquo;re lazy, so we&rsquo;d like to reuse the x86-64 version of <code>libnative-lib.so</code> under a Linux environment, where
all the SideChannelMarvels toolchain is ready to crunch white-boxes. That&rsquo;s not that simple because, even if
they look alike, dynamic libraries compiled for Android or for Linux have a number of differences and a naive
attempt to load an Android dynamic library under Linux will simply fail.</p>
<p>Fortunately, we have a nifty tool for parsing and modifying binaries. We&rsquo;re talking about LIEF<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> of course!</p>
<h2 id="converting-an-android-library-to-linux-with-lief">Converting an Android library to Linux with LIEF</h2>
<p>The white-box is implemented in the <code>libnative-lib.so</code> which is available for ARM, AMR64, x86 and x86-64
architectures. It&rsquo;s a tiny library exporting one <strong>JNI</strong> function: <code>Java_kr_repo_h2spice_crypto500_MainActivity_a</code>
and importing three functions from external libraries.</p>
<p>Lifting this library to Linux is possible because the three imported functions
(<code>__cxa_finalize</code>, <code>__cxa_atexit</code>, <code>__stack_chk_fail</code>) are not specific to Android.</p>
<p>The linked libraries of <code>libnative-lib.so</code> are standard: <code>libc</code>, <code>libstdc++</code> &hellip; except for <code>liblog</code>. But
<code>libnative-lib.so</code> doesn&rsquo;t use any of liblog functions, as we can see in readelf output:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> readelf -s -d -W ./libnative-lib.so
</span></span><span style="display:flex;"><span><span style="">
</span></span></span><span style="display:flex;"><span><span style=""></span><span style="color:#888">Dynamic section at offset 0x2ad00 contains 31 entries:
</span></span></span><span style="display:flex;"><span><span style="color:#888">  Tag  Type    Name/Value
</span></span></span><span style="display:flex;"><span><span style="color:#888">...
</span></span></span><span style="display:flex;"><span><span style="color:#888"> 0x01 (NEEDED) Shared library: [liblog.so]
</span></span></span><span style="display:flex;"><span><span style="color:#888"> 0x01 (NEEDED) Shared library: [libm.so]
</span></span></span><span style="display:flex;"><span><span style="color:#888"> 0x01 (NEEDED) Shared library: [libstdc++.so]
</span></span></span><span style="display:flex;"><span><span style="color:#888"> 0x01 (NEEDED) Shared library: [libdl.so]
</span></span></span><span style="display:flex;"><span><span style="color:#888"> 0x01 (NEEDED) Shared library: [libc.so]
</span></span></span><span style="display:flex;"><span><span style="color:#888">...
</span></span></span><span style="display:flex;"><span><span style="color:#888">Symbol table &#39;.dynsym&#39; contains 32 entries:
</span></span></span><span style="display:flex;"><span><span style="color:#888"> Num: Value  Size Type    Bind   Vis      Ndx Name
</span></span></span><span style="display:flex;"><span><span style="color:#888">   0: 00000     0 NOTYPE  LOCAL  DEFAULT  UND
</span></span></span><span style="display:flex;"><span><span style="color:#888">   1: 00000     0 FUNC    GLOBAL DEFAULT  UND __cxa_finalize@LIBC (2)
</span></span></span><span style="display:flex;"><span><span style="color:#888">   2: 00000     0 FUNC    GLOBAL DEFAULT  UND __cxa_atexit@LIBC (2)
</span></span></span><span style="display:flex;"><span><span style="color:#888">   3: 04fe0   865 FUNC    GLOBAL DEFAULT   11 Java_kr_repo_h2spice_crypto500_MainActivity_a
</span></span></span><span style="display:flex;"><span><span style="color:#888">   4: 02070  2281 FUNC    GLOBAL DEFAULT   11 _Z48APtMDGO79Go3cbIkFca2rN0KszanZXOZ7dIPsxDBletW5gdoPcPKci
</span></span></span><span style="display:flex;"><span><span style="color:#888">   5: 01100  3916 FUNC    GLOBAL DEFAULT   11 _Z48DENCPKY6hzMem3SuzgIXu4u6vxbF1sajPOJ75aN2VTdc7SCLPcPKc
</span></span></span><span style="display:flex;"><span><span style="color:#888">   6: 00bb0  1345 FUNC    GLOBAL DEFAULT   11 _Z48KwUmSQBCaOVJKeqvABGpVnuErM7j8YCSOagNYBmr2ah0NZBePKc
</span></span></span><span style="display:flex;"><span><span style="color:#888">   7: 03860  6011 FUNC    GLOBAL DEFAULT   11 _Z48TfcqPqf1lNhu0DC2qGsAAeML0SEmOBYX4jpYUnyT8qYWIlEqPhS_
</span></span></span><span style="display:flex;"><span><span style="color:#888">   8: 02050    30 FUNC    GLOBAL DEFAULT   11 _Z48h8AU0jPcyu9vXF9Kvg0bGDSl6H3TtcJIoOoU1ZOObCvegZ84i
</span></span></span><span style="display:flex;"><span><span style="color:#888">   9: 00000     0 FUNC    GLOBAL DEFAULT  UND __stack_chk_fail@LIBC (2)
</span></span></span><span style="display:flex;"><span><span style="color:#888">  10: 02960  3836 FUNC    GLOBAL DEFAULT   11 _Z48lrsFdMdlAT0vSMVedxmqOkCBF7sCTbhCjYEp1rLP8vatWEGDPh
</span></span></span><span style="display:flex;"><span><span style="color:#888">  29: 2c008     0 NOTYPE  GLOBAL DEFAULT  ABS _edata
</span></span></span><span style="display:flex;"><span><span style="color:#888">  30: 2c008     0 NOTYPE  GLOBAL DEFAULT  ABS __bss_start
</span></span></span><span style="display:flex;"><span><span style="color:#888">  31: 2c050     0 NOTYPE  GLOBAL DEFAULT  ABS _end
</span></span></span></code></pre></div>
<p>Thus we can simply remove the <code>liblog</code> library by setting its dynamic tag to <code>DT_NULL</code>:</p>
<div class="highlight"><div style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">import</span> <span style="color:#00f;font-weight:bold">lief</span>
</span></span><span style="display:flex;"><span>libnative <span style="color:#666">=</span> lief<span style="color:#666">.</span>parse(<span style="color:#ba2121">&#34;libnative-lib.so&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>liblog     <span style="color:#666">=</span> libnative<span style="color:#666">.</span>get_library(<span style="color:#ba2121">&#34;liblog.so&#34;</span>)
</span></span><span style="display:flex;"><span>liblog<span style="color:#666">.</span>tag <span style="color:#666">=</span> lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DYNAMIC_TAGS<span style="color:#666">.</span>NULL</span></span></code></pre></td></tr></table>
</div>
</div>
<p>We also notice that the <code>libc</code> is named <code>libc.so</code> while the one on the current Linux version is named libc.so.6.
To address this issue, one solution would be to create a symbol link of <code>libc.so.6</code> to <code>libc.so</code> and set the
environment variable <code>LD_LIBRARY_PATH</code> to the directory that contains the symlink.</p>
<p>A more elegant solution is to rename the library with LIEF:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>libnative<span style="color:#666">.</span>get_library(<span style="color:#ba2121">&#34;libc.so&#34;</span>)<span style="color:#666">.</span>name <span style="color:#666">=</span> <span style="color:#ba2121">&#34;libc.so.6&#34;</span></span></span></code></pre></div>
<p>Lastly, <code>libnative-lib.so</code> imports <code>__cxa_finalize</code>, <code>__cxa_atexit</code> and <code>__stack_chk_fail</code> with a specific version.
The version can be seen in the imported names, next to the <code>@</code> character. For these symbols, the associated
version is &ldquo;<code>LIBC</code>&rdquo; and, during the loading step, the loader will look for the <code>__cxa_finalize</code> in <code>libc.so.6</code>
with this exact version.</p>
<p>But the Linux <code>libc.so.6</code> defines these symbols with a &ldquo;<code>GLIBC_2.2.5</code>&rdquo; version:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> readelf -s -W /usr/lib64/libc.so.6|grep __cxa_finalize
</span></span><span style="display:flex;"><span><span style="color:#888">1944: 00037cf0 535 FUNC GLOBAL DEFAULT 12 __cxa_finalize@@GLIBC_2.2.5
</span></span></span></code></pre></div>
<p>To fix the version issue, we can simply change the version to unspecified by setting its value to <code>1</code>:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">for</span> s <span style="color:#a2f;font-weight:bold">in</span> <span style="color:#008000">filter</span>(<span style="color:#008000;font-weight:bold">lambda</span> e: e<span style="color:#666">.</span>has_version, libnative<span style="color:#666">.</span>dynamic_symbols):
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">if</span> s<span style="color:#666">.</span>symbol_version<span style="color:#666">.</span>value <span style="color:#666">&gt;</span> <span style="color:#666">1</span>: <span style="color:#408080;font-style:italic"># Library-defined version</span>
</span></span><span style="display:flex;"><span>      s<span style="color:#666">.</span>symbol_version<span style="color:#666">.</span>value <span style="color:#666">=</span> <span style="color:#666">1</span> <span style="color:#408080;font-style:italic"># Set to unspecified</span></span></span></code></pre></div>
<p>And then build the modified library:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>libnative<span style="color:#666">.</span>write(<span style="color:#ba2121">&#34;libnative-fixed.so&#34;</span>)</span></span></code></pre></div>
<p>Finally, we can load and execute the lifted library with <code>dlopen</code> / <code>dlsym</code>: (error handling being stripped for readability)</p>
<div class="highlight"><div style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">using</span> fnc_t <span style="color:#666">=</span> <span style="color:#b00040">uint64_t</span>(<span style="color:#666">*</span>)(<span style="color:#b00040">unsigned</span> <span style="color:#b00040">char</span><span style="color:#666">*</span>, <span style="color:#b00040">unsigned</span> <span style="color:#b00040">char</span><span style="color:#666">*</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#b00040">int</span> <span style="color:#00f">main</span>(<span style="color:#b00040">void</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">void</span><span style="color:#666">*</span> h <span style="color:#666">=</span> dlopen(<span style="color:#ba2121">&#34;./libnative-fixed.so&#34;</span>, RTLD_NOW);
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">void</span><span style="color:#666">*</span> sh <span style="color:#666">=</span> dlsym(h, <span style="color:#ba2121">&#34;_Z48TfcqPqf1lNhu0DC2qGsAAeML0SEmOBYX4jpYUnyT8qYWIlEqPhS_&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  fnc_t AES_128_encrypt <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">reinterpret_cast</span><span style="color:#666">&lt;</span>fnc_t<span style="color:#666">&gt;</span>(sh);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">unsigned</span> <span style="color:#b00040">char</span> plaintext[<span style="color:#666">16</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">unsigned</span> <span style="color:#b00040">char</span> ciphertext[<span style="color:#666">16</span>];
</span></span><span style="display:flex;"><span>  fread(plaintext, <span style="color:#666">1</span>, <span style="color:#666">16</span>, stdin);
</span></span><span style="display:flex;"><span>  AES_128_encrypt(plaintext, ciphertext);
</span></span><span style="display:flex;"><span>  fwrite(ciphertext, <span style="color:#666">1</span>, <span style="color:#666">16</span>, stdout);
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span> <span style="color:#666">0</span>;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></td></tr></table>
</div>
</div>
<p>This native library has a special structure that enables the transformation:</p>
<ol>
<li>It doesn&rsquo;t use functions specific to Android.</li>
<li>It doesn&rsquo;t use packed relocations.</li>
<li>It doesn&rsquo;t use exceptions.</li>
<li>It doesn&rsquo;t use Thread Local Storage (TLS).</li>
</ol>
<p>The first point is very uncommon for JNI libraries and this transformation won&rsquo;t be possible for usual libraries.</p>
<h2 id="eventually-breaking-the-white-box">Eventually breaking the white-box</h2>
<p>Now that we got a Linux binary of the AES white-box with standardized input/output, we&rsquo;re back into usual
white-box attacks business. The Differential Fault Analysis attack on white-box using our tools is largely
explained in a <a href="https://blog.quarkslab.com/differential-fault-analysis-on-white-box-aes-implementations.html">previous blogpost</a>.
In short, we inject statically some faults in the white-box tables (here,
we&rsquo;ll shoot on the entire <code>.rodata</code> section of the dynamic library), execute the AES on a constant input, and
observe the output for faults. These steps are automated in the <code>deadpool_dfa.Acquisition</code> function, part of
our <a href="https://github.com/SideChannelMarvels/Deadpool">SideChannelMarvels/Deadpool</a> repository.
Once we collected enough faulty outputs, we can apply a well-known
DFA attack to recover the AES key, which is implemented in the <code>phoenixAES.crack</code> function from the
<a href="https://github.com/SideChannelMarvels/JeanGrey">SideChannelMarvels/JeanGrey</a> repository.</p>
<div class="highlight"><div style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">import</span> <span style="color:#00f;font-weight:bold">deadpool_dfa</span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">import</span> <span style="color:#00f;font-weight:bold">phoenixAES</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">def</span> <span style="color:#00f">processinput</span>(iblock, blocksize):
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">return</span> (<span style="color:#008000">bytes</span><span style="color:#666">.</span>fromhex(<span style="color:#ba2121">&#39;</span><span style="color:#b68;font-weight:bold">%0*x</span><span style="color:#ba2121">&#39;</span> <span style="color:#666">%</span> (<span style="color:#666">2</span><span style="color:#666">*</span>blocksize, iblock)), <span style="color:#008000;font-weight:bold">None</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">def</span> <span style="color:#00f">processoutput</span>(output, blocksize):
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">return</span> <span style="color:#008000">int</span><span style="color:#666">.</span>from_bytes(output, byteorder<span style="color:#666">=</span><span style="color:#ba2121">&#39;big&#39;</span>, signed<span style="color:#666">=</span><span style="color:#008000;font-weight:bold">False</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>engine <span style="color:#666">=</span> deadpool_dfa<span style="color:#666">.</span>Acquisition(
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic"># main white-box executable</span>
</span></span><span style="display:flex;"><span>    targetbin<span style="color:#666">=</span><span style="color:#ba2121">&#39;./main64&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic"># file where to inject faults, and a reference copy</span>
</span></span><span style="display:flex;"><span>    targetdata<span style="color:#666">=</span><span style="color:#ba2121">&#39;./libnative-fixed.so&#39;</span>, goldendata<span style="color:#666">=</span><span style="color:#ba2121">&#39;./libnative-fixed.so.gold&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic"># hook to the DFA library, to validate faulty outputs</span>
</span></span><span style="display:flex;"><span>    dfa<span style="color:#666">=</span>phoenixAES,
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic"># hooks to process I/O as expected by the white-box executable</span>
</span></span><span style="display:flex;"><span>    processinput<span style="color:#666">=</span>processinput, processoutput<span style="color:#666">=</span>processoutput,
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic"># some tuning, telling we want to try up to single byte faults</span>
</span></span><span style="display:flex;"><span>    verbose<span style="color:#666">=</span><span style="color:#666">2</span>, minleaf<span style="color:#666">=</span><span style="color:#666">1</span>, minleafnail<span style="color:#666">=</span><span style="color:#666">1</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#408080;font-style:italic"># the libnative-fixed.so .rodata section address range</span>
</span></span><span style="display:flex;"><span>    addresses<span style="color:#666">=</span>[<span style="color:#666">0x6350</span>,<span style="color:#666">0x2b490</span>]
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>outputs <span style="color:#666">=</span> engine<span style="color:#666">.</span>run()[<span style="color:#666">0</span>][<span style="color:#666">0</span>]
</span></span><span style="display:flex;"><span>phoenixAES<span style="color:#666">.</span>crack(outputs)</span></span></code></pre></td></tr></table>
</div>
</div>
<p>Execution:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>Lvl 016 [0x000226DF-0x000226E0[ xor 0x86 -&gt; B25BE351AD6986FF15D1E152E7802EC7 GoodEncFault Column:1 Logged
</span></span><span style="display:flex;"><span>Lvl 016 [0x000226DF-0x000226E0[ xor 0x69 -&gt; B235E351806986FF15D1E1A4E780A6C7 GoodEncFault Column:1 Logged
</span></span><span style="display:flex;"><span>Saving 17 traces in dfa_enc_20180427_112029-112038_17.txt
</span></span><span style="display:flex;"><span>Last round key #N found:
</span></span><span style="display:flex;"><span>040D08DA68001026F3DC0D68897148B4</span></span></code></pre></div>
<p>The DFA recovers the last (tenth) round key but the AES key schedule is invertible so we can go back to the
original AES key:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> aes_keyschedule 040D08DA68001026F3DC0D68897148B4 <span style="color:#666">10</span>
</span></span><span style="display:flex;"><span><span style="color:#888">K00: 6C2893F21B6185E8567238CB78184945
</span></span></span></code></pre></div>
<p>The key falls in 10.2s and 3300 executions. This is indeed the correct AES key:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> <span style="color:#008000">echo</span> g1UlZafiuGdCgpTkWYjaZg3kE6qCd7kF3kV+nMKcGHc<span style="color:#666">=</span>|base64 -d|<span style="color:#b62;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#b62;font-weight:bold"></span><span style="color:#888">    openssl enc -d -aes-128-ecb -nopad -K 6C2893F21B6185E8567238CB78184945
</span></span></span><span style="display:flex;"><span><span style="color:#888">SECCON{owSkwPeH1CHQdPV9KWrSmz9n}
</span></span></span></code></pre></div>
<h2 id="final-words">Final Words</h2>
<p>We hope this little exercise will make you feel like using our tools!</p>
<p>The whitebox and all the scripts to convert the library and apply the attack are available online <sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>
and LIEF has its own website<sup id="fnref1:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.</p>
<p>Thanks to all Quarkslab colleagues who proofread this article and provided valuable feedback.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Side-Channel Marvels repository, on <a href="https://github.com/SideChannelMarvels">GitHub</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>SECCON2016 Online CTF-Binary / Crypto500 Obfuscated AES, archived <a href="https://github.com/SECCON/SECCON2016_online_CTF/tree/master/Binary/500_Obfuscated%20AES">here</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Sanghwan&rsquo;s Obfuscated AES Write-Up, in <a href="http://www.repo.kr/2016/12/seccon-2016-online-ctf-binarycrypto500_13.html">english</a>, <a href="http://www.repo.kr/2016/12/seccon-2016-online-ctf-binarycrypto500.html">korean</a> and <a href="http://www.repo.kr/2016/12/seccon-2016-online-ctf-binarycrypto500_30.html">japanese</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://lief-project.github.io">Library to Instrument Executable Formats</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>SECCON 2016 Obfuscated AES artifacts <a href="https://github.com/SideChannelMarvels/Deadpool/tree/master/wbs_aes_seccon2016">in Deadpool</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded><media:content medium="image" width="918" height="517" url="https://www.romainthomas.fr/post/18-05-when-sidechannelmarvels-meets-lief/featured.png"/></item><item><title>How to use frida on a non-rooted device</title><dc:creator>Romain Thomas</dc:creator><link>https://www.romainthomas.fr/post/how-to-use-frida-on-a-non-rooted-device/</link><pubDate>Sat, 03 Mar 2018 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/how-to-use-frida-on-a-non-rooted-device/</guid><description>This post explains how to use Frida gadget on a non-rooted device.</description><content:encoded><![CDATA[<p>This post is a part of the LIEF tutorials. It explains how to combine <a href="https://www.frida.re/">Frida</a> and <a href="https://lief-project.github.io/">LIEF</a> to
run <code>frida-gadget</code> on a non rooted device.</p>
<p><a href="https://lief-project.github.io/doc/latest/tutorials/09_frida_lief.html">See more</a></p>
]]></content:encoded><media:content medium="image" width="918" height="517" url="https://www.romainthomas.fr/post/how-to-use-frida-on-a-non-rooted-device/featured.png"/></item><item><title>Have fun with LIEF and Executable Formats</title><dc:creator>Romain Thomas</dc:creator><link>https://www.romainthomas.fr/post/17-11-have-fun-with-lief-and-executable-formats/</link><pubDate>Thu, 02 Nov 2017 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/17-11-have-fun-with-lief-and-executable-formats/</guid><description>This blog post introduces new features of LIEF as well as some uses cases.</description><content:encoded><![CDATA[<div class="col-12 col-md-12 mb-4 mb-lg-4 mt-4">
  <div class="p-4 rounded col-12 alert alert-info" style="background-color: #FAFCFF">
    <div class="d-flex px-3"><div>
        <div class="icon icon-sm icon-secondary">
          <span class="fa-duotone fa-link-horizontal" style="color: #084298" ></span>
        </div>
      </div>
      <div class="ps-4">
        <span class="h6 m-0 mb-1"  style="color: #084298">
        This post has been originally posted on the <a href="https://blog.quarkslab.com/have-fun-with-lief-and-executable-formats.html">Quarkslab&rsquo;s blog</a>
        </span>
      </div>
    </div>
  </div>
</div>
<p>This blog post introduces new features of LIEF as well as some uses cases.</p>
<div class="alert alert-info" role="alert"  style="border: none !important; background-color: #FAFCFF">
  <strong>Tl;DR</strong>: LIEF v0.8.3 is out. The main changelog is available <a href="https://lief.quarkslab.com/doc/changelog.html#october-16-2017">here</a>
and packages can be downloaded on the <a href="https://lief.quarkslab.com/#download">official website</a>.
</div>
<p>To install the Python package:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> pip install lief
</span></span></code></pre></div>
<h2 id="development-process">Development process</h2>
<p>We attach a great importance to the automation of some development tasks like testing, distributing, packaging, etc. Here is a summary of these processes:</p>
<p>Each commits is tested on</p>
<ul>
<li>Linux - x86-64 - Python{2.7, 3.5, 3.6}</li>
<li>Windows - x86 / x86-64 - Python{2.7, 3.5, 3.6}</li>
<li>OSX - x86-64 - Python{2.7, 3.5, 3.6}</li>
</ul>
<p>The test suite includes:</p>
<ul>
<li>Tests on the Python API</li>
<li>Tests on the C API</li>
<li>Tests on the parsers</li>
<li>Tests on the builders</li>
</ul>
<p>If tests succeeds packages are automatically uploaded on the <a href="https://github.com/lief-project/packages">https://github.com/lief-project/packages</a> repository.</p>
<p>For tagged version, packages are uploaded on the Github release page: <a href="https://github.com/lief-project/LIEF/releases">https://github.com/lief-project/LIEF/releases</a>.
Dockerlief</p>
<h3 id="dockerlief">Dockerlief</h3>
<p>To facilitate the compilation and the use of LIEF, we created the <a href="https://github.com/lief-project/Dockerlief">Dockerlief</a>
repo which includes various
<a href="https://github.com/lief-project/Dockerlief/tree/v0.1.0/dockerlief/dockerfiles">Dockerfiles</a> as well as the
<code>dockerlief</code> utility. <code>dockerlief</code> is basically a wrapper on docker build .</p>
<p>Among Dockerfiles, we provide a <a href="https://github.com/lief-project/Dockerlief/blob/v0.1.0/dockerlief/dockerfiles/android.docker">Dockerfile</a>
to cross compile LIEF for Android (<code>ARM</code>, <code>AARCH64</code>, <code>x86</code>, <code>x86-64</code>)</p>
<p>To cross compile LIEF for Android ARM, one can run:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> dockerlief build --api-level <span style="color:#666">21</span> --arm lief-android
</span></span><span style="display:flex;"><span><span style="">
</span></span></span><span style="display:flex;"><span><span style=""></span><span style="color:#888">[INFO] - Location of the Dockerfiles: ~/dockerfiles
</span></span></span><span style="display:flex;"><span><span style="color:#888">[INFO] - Building Dockerfile: &#39;lief-android&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#888">[INFO] - Target architecture: armeabi-v7a
</span></span></span><span style="display:flex;"><span><span style="color:#888">[INFO] - Target API Level: 21
</span></span></span></code></pre></div>
<p>The SDK package <code>LIEF-0.8.3-Android_API21_armeabi-v7a.tar.gz</code> is automatically pulled from the Docker to
the current directory.</p>
<h3 id="integration-of-libfuzzer">Integration of LibFuzzer</h3>
<p>Fuzzing our own library is a good way to detect bugs, memory leak, unsanitized inputs &hellip;</p>
<p>Thus, we integrated <a href="https://llvm.org/docs/LibFuzzer.html">LibFuzzer</a> in the project.
Fuzzing the LIEF ELF, PE, Mach-O parser is as simple as:</p>
<div class="highlight"><div style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#bc7a00">#include</span> <span style="color:#bc7a00">&lt;LIEF/LIEF.hpp&gt;</span><span style="color:#bc7a00">
</span></span></span><span style="display:flex;"><span><span style="color:#bc7a00">#include</span> <span style="color:#bc7a00">&lt;vector&gt;</span><span style="color:#bc7a00">
</span></span></span><span style="display:flex;"><span><span style="color:#bc7a00">#include</span> <span style="color:#bc7a00">&lt;memory&gt;</span><span style="color:#bc7a00">
</span></span></span><span style="display:flex;"><span><span style="color:#bc7a00"></span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">extern</span> <span style="color:#ba2121">&#34;C&#34;</span> <span style="color:#b00040">int</span> LLVMFuzzerTestOneInput(<span style="color:#008000;font-weight:bold">const</span> <span style="color:#b00040">uint8_t</span> <span style="color:#666">*</span>data, size_t size) {
</span></span><span style="display:flex;"><span>  std<span style="color:#666">::</span>vector<span style="color:#666">&lt;</span><span style="color:#b00040">uint8_t</span><span style="color:#666">&gt;</span> raw <span style="color:#666">=</span> {data, data <span style="color:#666">+</span> size};
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">try</span> {
</span></span><span style="display:flex;"><span>    std<span style="color:#666">::</span>unique_ptr<span style="color:#666">&lt;</span>LIEF<span style="color:#666">::</span>Binary<span style="color:#666">&gt;</span> b{LIEF<span style="color:#666">::</span>Parser<span style="color:#666">::</span>parse(raw)};
</span></span><span style="display:flex;"><span>  } <span style="color:#008000;font-weight:bold">catch</span> (<span style="color:#008000;font-weight:bold">const</span> LIEF<span style="color:#666">::</span>exception<span style="color:#666">&amp;</span> e) {
</span></span><span style="display:flex;"><span>    std<span style="color:#666">::</span>cout <span style="color:#666">&lt;&lt;</span> e.what() <span style="color:#666">&lt;&lt;</span> std<span style="color:#666">::</span>endl;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span> <span style="color:#666">0</span>;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></td></tr></table>
</div>
</div>
<p>To launch the fuzzer, one can run the following commands:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> make fuzz-elf   <span style="color:#408080;font-style:italic"># Launch ELF Fuzzer</span>
</span></span><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> make fuzz-pe    <span style="color:#408080;font-style:italic"># Launch PE Fuzzer</span>
</span></span><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> make fuzz-macho <span style="color:#408080;font-style:italic"># Launch MachO Fuzzer</span>
</span></span><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> make fuzz       <span style="color:#408080;font-style:italic"># Launch ELF, PE and MachO Fuzzer</span>
</span></span></code></pre></div>
<h2 id="elf">ELF</h2>
<h3 id="play-with-elf-symbols---part-2">Play with ELF symbols - Part 2</h3>
<p>In the <a href="https://lief.quarkslab.com/doc/tutorials/03_elf_change_symbols.html">tutorial #03</a> we demonstrated
how to swap dynamic symbols between a binary and a library.
In this part, we will see how we can rename these symbols.</p>
<p>Changing symbol names is not a trivial modification, since modifying the string table of the <code>PT_DYNAMIC</code>
segment has side effects:</p>
<ul>
<li>It requires to update the hash table (GNU Hash / SYSV).</li>
<li>It usually requires to extend the <code>DYNAMIC</code> part of the ELF format.</li>
</ul>
<p>The previous version of LIEF already implements the rebuilding of the hash table but not the extending of
the <code>DYNAMIC</code> part.</p>
<p>With the <code>v0.8.3</code> we can extend the <code>DYNAMIC</code> part. Therefore:</p>
<ul>
<li>We can add new entries in the <code>.dynamic</code> section</li>
<li>We can change dynamic symbols names</li>
<li>We can change <code>DT_RUNPATH</code> and <code>DT_RPATH</code> without length restriction</li>
</ul>
<p>We will rename all <strong>imported</strong> functions of <code>gpg</code> that are imported from <code>libgcrypt.so.20</code> into
<code>a_very_long_name_of_function_XX</code> and all exported functions of <code>libgcrypt.so.20</code> into the same name
(<em>XX</em> is the symbol index). <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<div class="highlight"><div style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">import</span> <span style="color:#00f;font-weight:bold">lief</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"># Load targets</span>
</span></span><span style="display:flex;"><span>gpg <span style="color:#666">=</span> lief<span style="color:#666">.</span>parse(<span style="color:#ba2121">&#34;/usr/bin/gpg&#34;</span>)
</span></span><span style="display:flex;"><span>libgcrypt <span style="color:#666">=</span> lief<span style="color:#666">.</span>parse(<span style="color:#ba2121">&#34;/usr/lib/libgcrypt.so.20&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"># Change names</span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">for</span> idx, lsym <span style="color:#a2f;font-weight:bold">in</span> <span style="color:#008000">enumerate</span>(<span style="color:#008000">filter</span>(<span style="color:#008000;font-weight:bold">lambda</span> e : e<span style="color:#666">.</span>exported, libgcrypt<span style="color:#666">.</span>dynamic_symbols)):
</span></span><span style="display:flex;"><span>  new_name <span style="color:#666">=</span> <span style="color:#ba2121">&#39;a_very_long_name_of_function_</span><span style="color:#b68;font-weight:bold">{:d}</span><span style="color:#ba2121">&#39;</span><span style="color:#666">.</span>format(idx)
</span></span><span style="display:flex;"><span>  <span style="color:#008000">print</span>(<span style="color:#ba2121">&#34;New name for &#39;</span><span style="color:#b68;font-weight:bold">{}</span><span style="color:#ba2121">&#39;: </span><span style="color:#b68;font-weight:bold">{}</span><span style="color:#ba2121">&#34;</span><span style="color:#666">.</span>format(lsym<span style="color:#666">.</span>name, new_name))
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">for</span> bsym <span style="color:#a2f;font-weight:bold">in</span> <span style="color:#008000">filter</span>(<span style="color:#008000;font-weight:bold">lambda</span> e : e<span style="color:#666">.</span>name <span style="color:#666">==</span> lsym<span style="color:#666">.</span>name, gpg<span style="color:#666">.</span>dynamic_symbols):
</span></span><span style="display:flex;"><span>    bsym<span style="color:#666">.</span>name <span style="color:#666">=</span> new_name
</span></span><span style="display:flex;"><span>  lsym<span style="color:#666">.</span>name <span style="color:#666">=</span> new_name
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"># Write back</span>
</span></span><span style="display:flex;"><span>binary<span style="color:#666">.</span>write(gpg<span style="color:#666">.</span>name)
</span></span><span style="display:flex;"><span>libgcrypt<span style="color:#666">.</span>write(libgcrypt<span style="color:#666">.</span>name)</span></span></code></pre></td></tr></table>
</div>
</div>
<p>By using <code>readelf</code> we can check that function names have been modified:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> readelf -s ./gpg|grep <span style="color:#ba2121">&#34;a_very_long_name&#34;</span>
</span></span><span style="display:flex;"><span><span style="">
</span></span></span><span style="display:flex;"><span><span style=""></span><span style="color:#888">   2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND a_very_long_name_of_funct@GCRYPT_1.6 (2)
</span></span></span><span style="display:flex;"><span><span style="color:#888">   3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND a_very_long_name_of_funct@GCRYPT_1.6 (2)
</span></span></span><span style="display:flex;"><span><span style="color:#888">  11: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND a_very_long_name_of_funct@GCRYPT_1.6 (2)
</span></span></span><span style="display:flex;"><span><span style="color:#888">  13: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND a_very_long_name_of_funct@GCRYPT_1.6 (2)
</span></span></span><span style="display:flex;"><span><span style="color:#888">  ...
</span></span></span><span style="display:flex;"><span><span style="color:#888"></span><span style="">
</span></span></span><span style="display:flex;"><span><span style=""></span><span style="color:#000080;font-weight:bold">$</span> readelf -s ./libgcrypt.so.20|grep <span style="color:#ba2121">&#34;a_very_long_name&#34;</span>
</span></span><span style="display:flex;"><span><span style="">
</span></span></span><span style="display:flex;"><span><span style=""></span><span style="color:#888">  88: 000000000000d050     6 FUNC    GLOBAL DEFAULT   10 a_very_long_name_of_funct@@GCRYPT_1.6
</span></span></span><span style="display:flex;"><span><span style="color:#888">  89: 000000000000dcd0    69 FUNC    GLOBAL DEFAULT   10 a_very_long_name_of_funct@@GCRYPT_1.6
</span></span></span><span style="display:flex;"><span><span style="color:#888">  90: 000000000000d310    34 FUNC    GLOBAL DEFAULT   10 a_very_long_name_of_funct@@GCRYPT_1.6
</span></span></span><span style="display:flex;"><span><span style="color:#888">  91: 000000000000de70    81 FUNC    GLOBAL DEFAULT   10 a_very_long_name_of_funct@@GCRYPT_1.6
</span></span></span><span style="display:flex;"><span><span style="color:#888">  ...
</span></span></span></code></pre></div>
<p><img src="./ida_gpg.png" alt=""></p>
<p>Now if we run the new <code>gpg</code> binary, we get the following error:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> ./gpg --output bar.txt --symmetric ./foo.txt
</span></span><span style="display:flex;"><span><span style="color:#888">relocation error: ./gpg: symbol a_very_long_name_of_function_8, version GCRYPT_1.6 not defined in file libgcrypt.so.20 with link time reference
</span></span></span></code></pre></div>
<p>Because the Linux loader tries to resolve the function <code>a_very_long_name_of_function_8</code> against
<code>/usr/lib/libgcrypt.so.20</code> and that library doesn&rsquo;t include the updated names we get the error.</p>
<p>One way to fix this error is to set the environment variable <code>LD_LIBRARY_PATH</code> to the current directory:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> <span style="color:#19177c">LD_LIBRARY_PATH</span><span style="color:#666">=</span>. ./gpg --output bar.txt --symmetric ./foo.txt
</span></span><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> xxd ./bar.txt|head -n1
</span></span><span style="display:flex;"><span><span style="">
</span></span></span><span style="display:flex;"><span><span style=""></span><span style="color:#888">00000000: 8c0d 0407 0302 c5af 9fba cab1 9545 ebd2  .............E..
</span></span></span><span style="display:flex;"><span><span style="color:#888"></span><span style="">
</span></span></span><span style="display:flex;"><span><span style=""></span><span style="color:#000080;font-weight:bold">$</span> <span style="color:#19177c">LD_LIBRARY_PATH</span><span style="color:#666">=</span>. ./gpg --output foo_decrypted.txt --decrypt ./bar.txt
</span></span><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> xxd ./foo_decrypted.txt|head -n1
</span></span><span style="display:flex;"><span><span style="">
</span></span></span><span style="display:flex;"><span><span style=""></span><span style="color:#888">00000000: 4865 6c6c 6f20 576f 726c 640a            Hello World.
</span></span></span></code></pre></div>
<p>Another way to fix it is to add a new entry in <code>.dynamic</code> section.</p>
<p>As mentioned at the beginning, we can now add new entries in the <code>.dynamic</code> so let&rsquo;s add a <code>DT_RUNPATH</code> entry
with the <code>$ORIGIN</code> value so that the Linux loader resolves the modified <code>libgcrypt.so.20</code> instead of the system one:</p>
<div class="highlight"><div style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#666">...</span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"># Add a DT_RUNPATH entry</span>
</span></span><span style="display:flex;"><span>gpg <span style="color:#666">+=</span> lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>DynamicEntryRunPath(<span style="color:#ba2121">&#34;$ORIGIN&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"># Write back</span>
</span></span><span style="display:flex;"><span>binary<span style="color:#666">.</span>write(gpg<span style="color:#666">.</span>name)
</span></span><span style="display:flex;"><span>libgcrypt<span style="color:#666">.</span>write(libgcrypt<span style="color:#666">.</span>name)</span></span></code></pre></td></tr></table>
</div>
</div>
<p>And we don&rsquo;t need the <code>LD_LIBRARY_PATH</code> anymore:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> readelf -d ./gpg|grep RUNPATH
</span></span><span style="display:flex;"><span><span style="">
</span></span></span><span style="display:flex;"><span><span style=""></span><span style="color:#888">0x000000000000001d (RUNPATH)            Library runpath: [$ORIGIN]
</span></span></span><span style="display:flex;"><span><span style="color:#888"></span><span style="">
</span></span></span><span style="display:flex;"><span><span style=""></span><span style="color:#000080;font-weight:bold">$</span> ./gpg --decrypt ./bar.txt
</span></span><span style="display:flex;"><span><span style="">
</span></span></span><span style="display:flex;"><span><span style=""></span><span style="color:#888">gpg: AES encrypted data
</span></span></span><span style="display:flex;"><span><span style="color:#888">gpg: encrypted with 1 passphrase
</span></span></span><span style="display:flex;"><span><span style="color:#888">Hello World
</span></span></span></code></pre></div>
<h3 id="hiding-its-symbols">Hiding its symbols</h3>
<p>While IDA v7.0 has been released recently, among the <a href="https://www.hex-rays.com/products/ida/7.0/index.shtml">changelog</a>
one can notice two changes:</p>
<blockquote>
<ul>
<li>ELF: describe symbols using symtab from DYNAMIC section</li>
<li>ELF: IDA now uses the PHT by default instead of the SHT to load segments from ELF files</li>
</ul>
</blockquote>
<p>These changes are partially true. Let&rsquo;s see what go wrong in IDA with the following snippet:</p>
<div class="highlight"><div style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000">id</span> <span style="color:#666">=</span> lief<span style="color:#666">.</span>parse(<span style="color:#ba2121">&#34;/usr/bin/id&#34;</span>)
</span></span><span style="display:flex;"><span>dynsym <span style="color:#666">=</span> <span style="color:#008000">id</span><span style="color:#666">.</span>get_section(<span style="color:#ba2121">&#34;.dynsym&#34;</span>)
</span></span><span style="display:flex;"><span>dynsym<span style="color:#666">.</span>entry_size <span style="color:#666">=</span> dynsym<span style="color:#666">.</span>size <span style="color:#666">//</span> <span style="color:#666">2</span>
</span></span><span style="display:flex;"><span><span style="color:#008000">id</span><span style="color:#666">.</span>write(<span style="color:#ba2121">&#34;id_test&#34;</span>)</span></span></code></pre></td></tr></table>
</div>
</div>
<p>This snippet defines the size of <strong>one</strong> symbol as the entire size of <code>.dynsym</code> section divided by 2.
The <em>normal</em> size of ELF symbols would be:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#666">&gt;&gt;&gt;</span> <span style="color:#008000">print</span>(<span style="color:#008000">int</span>(lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>ELF32<span style="color:#666">.</span>SIZES<span style="color:#666">.</span>SYM)) <span style="color:#408080;font-style:italic"># For 32-bits</span>
</span></span><span style="display:flex;"><span><span style="color:#666">16</span>
</span></span><span style="display:flex;"><span><span style="color:#666">&gt;&gt;&gt;</span> <span style="color:#008000">print</span>(<span style="color:#008000">int</span>(lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>ELF64<span style="color:#666">.</span>SIZES<span style="color:#666">.</span>SYM)) <span style="color:#408080;font-style:italic"># For 64-bits</span>
</span></span><span style="display:flex;"><span><span style="color:#666">24</span></span></span></code></pre></div>
<p>In the case of the 64-bits <code>id</code> binary, we set this size to <strong>924</strong>.</p>
<p>When opening <code>id_test</code> in IDA and forcing to use <strong>Segment</strong> for parsing and not <strong>Sections</strong> we get the
following imports:</p>
<div class="row">
  <div class="d-flex col-12 col-lg-4 align-middle mb-4 mb-sm-0">
  <img src="ida_loading.png" alt="IDA Loading Dialog" />
  </div>
  <div class="d-flex col-12 col-lg-8 align-middle">
  <img src="ida_imports.png" alt="IDA Loading Dialog" />
  </div>
</div>
<p>Only one import is resolved and the others are <strong>hidden</strong>.</p>
<p>Note that <code>id_test</code> is still executable:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> id_test
</span></span><span style="display:flex;"><span><span style="color:#888">uid=1000(romain) gid=1000(romain) ...
</span></span></span></code></pre></div>
<p>By using <code>readelf</code> we can still retrieve the symbols and we have an error indicating that symbol size is corrupted.</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> readelf -s id_test
</span></span><span style="display:flex;"><span><span style="color:#888">readelf: Error: Section 5 has invalid sh_entsize of 000000000000039c
</span></span></span><span style="display:flex;"><span><span style="color:#888">readelf: Error: (Using the expected size of 24 for the rest of this dump)
</span></span></span><span style="display:flex;"><span><span style="color:#888"></span><span style="">
</span></span></span><span style="display:flex;"><span><span style=""></span><span style="color:#888">Symbol table &#39;.dynsym&#39; contains 77 entries:
</span></span></span><span style="display:flex;"><span><span style="color:#888">  Num:    Value          Size Type    Bind   Vis      Ndx Name
</span></span></span><span style="display:flex;"><span><span style="color:#888">   0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND
</span></span></span><span style="display:flex;"><span><span style="color:#888">   1: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND endgrent@GLIBC_2.2.5 (2)
</span></span></span><span style="display:flex;"><span><span style="color:#888">   2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __uflow@GLIBC_2.2.5 (2)
</span></span></span><span style="display:flex;"><span><span style="color:#888">   3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND getenv@GLIBC_2.2.5 (2)
</span></span></span><span style="display:flex;"><span><span style="color:#888">   4: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND free@GLIBC_2.2.5 (2)
</span></span></span><span style="display:flex;"><span><span style="color:#888">   5: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND abort@GLIBC_2.2.5 (2)
</span></span></span><span style="display:flex;"><span><span style="color:#888">   ...
</span></span></span></code></pre></div>
<p>In LIEF the (dynamic) symbol table address is computed through the <code>DT_SYMTAB</code> from the <code>PT_DYNAMIC</code> segment.</p>
<p>To compute the number of dynamic symbols LIEF uses three heuristics:</p>
<ol>
<li>Based on hash tables (<a href="https://github.com/lief-project/LIEF/blob/0.8.3/src/ELF/Parser.tcc#L711-L796">GNU Hash</a> / <a href="https://github.com/lief-project/LIEF/blob/0.8.3/src/ELF/Parser.tcc#L690-L708">Sysv Hash</a>)</li>
<li>Based on <a href="https://github.com/lief-project/LIEF/blob/0.8.3/src/ELF/Parser.tcc#L513-L648">relocations</a></li>
<li>Based on <a href="https://github.com/lief-project/LIEF/blob/0.8.3/src/ELF/Parser.tcc#L653-L672">sections</a></li>
</ol>
<p>Malwares start to use this kind of corruption as we will see in the next part.</p>
<h3 id="rootnik-malware">Rootnik Malware</h3>
<p>Rootnik is a malware targeting Android devices. It has been analyzed by Fortinet security researcher.</p>
<p>A full analysis of the malware is available on the <a href="https://blog.fortinet.com/2017/07/09/unmasking-android-malware-a-deep-dive-into-a-new-rootnik-variant-part-i">Fortinet blog</a>.</p>
<p>This part is focused on the ELF format analysis of one component: libshell.</p>
<p>Actually there are two libraries <code>libshella_2.10.3.1.so</code> and <code>libshellx_2.10.3.1.so</code>. As they have the same
purpose, we will use the x86 version.</p>
<p>First if we look at the ELF sections of <code>libshellx_2.10.3.1.so</code> we can notice that the <strong>address</strong>, <strong>offset</strong>
and <strong>size</strong> of some sections like <code>.text</code>, <code>.init_array</code>, <code>.dynstr</code>, <code>.dynsym</code> are set to 0.</p>
<p>This kind of modification is used to disturb tools that rely on <strong>sections</strong> to parse some ELF structures
(like objdump, readelf, IDA &hellip;)</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> readelf -S ./libshellx-2.10.3.1.so
</span></span><span style="display:flex;"><span><span style="color:#888">There are 21 section headers, starting at offset 0x2431c:
</span></span></span><span style="display:flex;"><span><span style="color:#888"></span><span style="">
</span></span></span><span style="display:flex;"><span><span style=""></span><span style="color:#888">Section Headers:
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [ 1] .dynsym           DYNSYM          00000114 000114 000300 10   A  2   1  4
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [ 2] .dynstr           STRTAB          00000414 000414 0001e2 00   A  0   0  1
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [ 3] .hash             HASH            00000000 000000 000000 04   A  1   0  4
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [ 4] .rel.dyn          REL             00000000 000000 000000 08   A  1   0  4
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [ 5] .rel.plt          REL             00000000 000000 000000 08  AI  1   6  4
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [ 6] .plt              PROGBITS        00000000 000000 000000 04  AX  0   0 16
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [ 7] .text             PROGBITS        00000000 000000 000000 00  AX  0   0 16
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [ 8] .code             PROGBITS        00000000 000000 000000 00  AX  0   0 16
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [ 9] .eh_frame         PROGBITS        00000000 000000 000000 00   A  0   0  4
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [10] .eh_frame_hdr     PROGBITS        00000000 000000 000000 00   A  0   0  4
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [11] .fini_array       FINI_ARRAY      00000000 000000 000000 00  WA  0   0  4
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [12] .init_array       INIT_ARRAY      00000000 000000 000000 00  WA  0   0  4
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [13] .dynamic          DYNAMIC         0000ce50 00be50 0000f8 08  WA  2   0  4
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [14] .got              PROGBITS        00000000 000000 000000 00  WA  0   0  4
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [15] .got.plt          PROGBITS        00000000 000000 000000 00  WA  0   0  4
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [16] .data             PROGBITS        00000000 000000 000000 00  WA  0   0 16
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [17] .bss              NOBITS          0000d398 00c395 000000 00  WA  0   0  4
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [18] .comment          PROGBITS        00000000 00c395 000045 01  MS  0   0  1
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [19] .note.gnu.gold-ve NOTE            00000000 00c3dc 00001c 00      0   0  4
</span></span></span><span style="display:flex;"><span><span style="color:#888">  [20] .shstrtab         STRTAB          00000000 024268 0000b1 00      0   0  1
</span></span></span><span style="display:flex;"><span><span style="color:#888">Key to Flags:
</span></span></span><span style="display:flex;"><span><span style="color:#888">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
</span></span></span><span style="display:flex;"><span><span style="color:#888">  L (link order), O (extra OS processing required), G (group), T (TLS),
</span></span></span><span style="display:flex;"><span><span style="color:#888">  C (compressed), x (unknown), o (OS specific), E (exclude),
</span></span></span><span style="display:flex;"><span><span style="color:#888">  p (processor specific)
</span></span></span></code></pre></div>
<p>If we open the given library in IDA we have no exports, no imports and no sections:</p>
<p><img src="libshell_ida.png" alt="IDA Shella"></p>
<p>Based on the segments and dynamic entries we can recover most of these information:</p>
<ul>
<li><code>.init_array</code> address and size are available through the <code>DT_INIT_ARRAY</code> and <code>DT_INIT_ARRAYSZ</code> entries</li>
<li><code>.dynstr</code> address and size are available through the <code>DT_STRTAB</code> and <code>DT_STRSZ</code></li>
<li><code>.dynsym</code> address is available through the <code>DT_SYMTAB</code></li>
</ul>
<p>The script <a href="https://gist.github.com/romainthomas/c262be2c29ab374451663b9f6dcdfc0d">recover_shellx.py</a>
recovers the missing values, patch sections and rebuild a <em>fixed</em> library.</p>
<p><img src="libshell_FIXED_ida.png" alt="IDA Shella recovered"></p>
<p>Now if we open the new <code>libshellx-2.10.3.1_FIXED.so</code> we have access to imports / exports and some sections.
The <code>.init_array</code> section contains 2 functions:</p>
<ol>
<li><code>tencent652524168491435794009</code></li>
<li><code>sub_60C0</code></li>
</ol>
<p>The <code>tencent652524168491435794009</code> function basically do a stack alignment and the <code>sub_60C0</code> is one of the
decryption routines<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. This function is obfuscated with graph flattening and looks like to O-LLVM graph
flattening passe<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>:</p>
<p><img src="shellx_cfg.png" alt="CFG Flattening"></p>
<p>Fortunately there are few &ldquo;<em>relevant blocks</em>&rdquo; and there are not obfuscated.</p>
<p>The function <code>sub_60C0</code> basically iterates over the program headers to find the encrypted one and decrypt
it using a custom algorithm (based on shift, xor, etc).</p>
<p><img src="shellx_cfg_1.2.png" alt="CFG Flattening Handlers"></p>
<p><img src="shellx_cfg_2.2.png" alt="CFG Flattening Decryption Routine"></p>
<h3 id="triggering-cve-2017-1000249">Triggering CVE-2017-1000249</h3>
<p>The CVE-2017-1000249 is a stack based buffer overflow in the <code>file</code> utility.
It affects the versions <code>5.29</code>, <code>5.30</code> and <code>5.31</code>.</p>
<p>Basically the overflow occurs in the size of the note description.</p>
<p>Using LIEF we can trigger the overflow as follow:</p>
<div class="highlight"><div style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">import</span> <span style="color:#00f;font-weight:bold">lief</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>target <span style="color:#666">=</span> lief<span style="color:#666">.</span>parse(<span style="color:#ba2121">&#34;/usr/bin/id&#34;</span>)
</span></span><span style="display:flex;"><span>note_build_id <span style="color:#666">=</span> target[lief<span style="color:#666">.</span>ELF<span style="color:#666">.</span>NOTE_TYPES<span style="color:#666">.</span>BUILD_ID]
</span></span><span style="display:flex;"><span>note_build_id<span style="color:#666">.</span>description <span style="color:#666">=</span> [<span style="color:#666">0x41</span>] <span style="color:#666">*</span> <span style="color:#666">30</span>
</span></span><span style="display:flex;"><span>target<span style="color:#666">.</span>write(<span style="color:#ba2121">&#34;id_overflow&#34;</span>)</span></span></code></pre></td></tr></table>
</div>
</div>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> file --version
</span></span><span style="display:flex;"><span><span style="color:#888">file-5.29
</span></span></span><span style="display:flex;"><span><span style="color:#888">magic file from /usr/share/file/misc/magic
</span></span></span><span style="display:flex;"><span><span style="color:#888"></span><span style="">
</span></span></span><span style="display:flex;"><span><span style=""></span><span style="color:#000080;font-weight:bold">$</span> id_overflow
</span></span><span style="display:flex;"><span><span style="color:#888">uid=1000(romain) gid=1000(romain) ...
</span></span></span><span style="display:flex;"><span><span style="color:#888"></span><span style="">
</span></span></span><span style="display:flex;"><span><span style=""></span><span style="color:#000080;font-weight:bold">$</span> file id_overflow
</span></span><span style="display:flex;"><span><span style="color:#888">*** buffer overflow detected ***: file terminated
</span></span></span><span style="display:flex;"><span><span style="color:#888">./id_overflow: [1] 3418 abort (core dumped)  file ./id_overflow
</span></span></span></code></pre></div>
<p>Here is the commit that introduced the bug: <a href="https://github.com/file/file/commit/9611f31313a93aa036389c5f3b15eea53510d4d1#diff-bc5c24ef9f39a5f4963ca28ecbc645b3L512">9611f3</a>.</p>
<h2 id="pe">PE</h2>
<p>The <em>Load Config</em> directory is now parsed into the <a href="https://github.com/lief-project/LIEF/blob/0.8.3/include/LIEF/PE/LoadConfigurations/LoadConfiguration.hpp">LoadConfiguration</a> object.
This structure evolves with the Windows versions and LIEF has been designed to support this evolution.
You can take a look at <a href="https://github.com/lief-project/LIEF/blob/0.8.3/include/LIEF/PE/LoadConfigurations/LoadConfigurationV0.hpp#L47-L52">LoadConfigurationV0</a>,
<a href="https://github.com/lief-project/LIEF/blob/0.8.3/include/LIEF/PE/LoadConfigurations/LoadConfigurationV6.hpp#L47-L54">LoadConfigurationV6</a>.</p>
<p>One can find the different versions of this structure in the following directories:</p>
<ul>
<li><code>include/LIEF/PE/LoadConfigurations</code></li>
<li><code>src/PE/LoadConfigurations</code></li>
</ul>
<p>The current version of LIEF is able to parse the structure up to Windows 10 build 15002 with the <em>hotpatch
table offset</em>.</p>
<p>Here are some examples of the <code>LoadConfiguration</code> API:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#666">&gt;&gt;&gt;</span> target <span style="color:#666">=</span> lief<span style="color:#666">.</span>parse(<span style="color:#ba2121">&#34;PE64_x86-64_binary_WinApp.exe&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#666">&gt;&gt;&gt;</span> target<span style="color:#666">.</span>has_configuration
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">True</span>
</span></span><span style="display:flex;"><span><span style="color:#666">&gt;&gt;&gt;</span> config <span style="color:#666">=</span> target<span style="color:#666">.</span>load_configuration
</span></span><span style="display:flex;"><span><span style="color:#666">&gt;&gt;&gt;</span> config<span style="color:#666">.</span>version
</span></span><span style="display:flex;"><span>WIN_VERSION<span style="color:#666">.</span>WIN10_0_15002
</span></span><span style="display:flex;"><span><span style="color:#666">&gt;&gt;&gt;</span> <span style="color:#008000">hex</span>(config<span style="color:#666">.</span>guard_rf_failure_routine)
</span></span><span style="display:flex;"><span><span style="color:#ba2121">&#39;0x140001040&#39;</span></span></span></code></pre></div>
<p>LIEF also provides an API to serialize any ELF or PE objects into JSON<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></p>
<p>For examples to transform <code>LoadConfiguration</code> object into JSON:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#666">&gt;&gt;&gt;</span> <span style="color:#008000;font-weight:bold">from</span> <span style="color:#00f;font-weight:bold">lief</span> <span style="color:#008000;font-weight:bold">import</span> to_json
</span></span><span style="display:flex;"><span><span style="color:#666">&gt;&gt;&gt;</span> to_json(config)
</span></span><span style="display:flex;"><span><span style="color:#ba2121">&#39;{&#34;characteristics&#34;:248,&#34;code_integrity&#34;:{&#34;catalog&#34;:0,&#34;catalog_offset&#34;:0 ... }}&#39;</span> <span style="color:#408080;font-style:italic"># Not fully printed</span></span></span></code></pre></div>
<p>One can also serialize the whole Binary object:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#666">&gt;&gt;&gt;</span> to_json(target)
</span></span><span style="display:flex;"><span><span style="color:#ba2121">&#39;{&#34;data_directories&#34;:[{&#34;RVA&#34;:0,&#34;size&#34;:0,&#34;type&#34;:&#34;EXPORT_TABLE&#34;},{&#34;RVA&#34;:62584,&#34;section&#34; ...}}&#39;</span> <span style="color:#408080;font-style:italic"># # Not fully printed</span></span></span></code></pre></div>
<h2 id="mach-o">Mach-O</h2>
<p>For Mach-O binary, dynamic executables embed the <code>LC_DYLD_INFO</code> command which is associated with the
<code>dyld_info_command</code> structure.</p>
<p>The structure is basically a list of offsets and sizes pointing to other data structures.</p>
<p>From <code>/usr/lib/mach-o/loader.h</code> the structure looks like this:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">struct</span> <span style="color:#00f;font-weight:bold">dyld_info_command</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">uint32_t</span>   cmd;
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">uint32_t</span>   cmdsize;
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">uint32_t</span>   rebase_off;
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">uint32_t</span>   rebase_size;
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">uint32_t</span>   bind_off;
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">uint32_t</span>   bind_size;
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">uint32_t</span>   weak_bind_off;
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">uint32_t</span>   weak_bind_size;
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">uint32_t</span>   lazy_bind_off;
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">uint32_t</span>   lazy_bind_size;
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">uint32_t</span>   export_off;
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">uint32_t</span>   export_size;
</span></span><span style="display:flex;"><span>};</span></span></code></pre></div>
<p>The <code>dyld</code> loader uses this structure to:</p>
<ul>
<li>Rebase the executable</li>
<li>Bind symbols to addresses</li>
<li>Retrieve exported functions (or symbols)</li>
</ul>
<p>Whereas in the ELF and PE format relocations are basically a <strong>table</strong>, Mach-O format uses <strong>byte streams</strong> to
rebase the image and to bind symbols with addresses. For exports it uses a <strong>trie</strong> as subjacent structure.</p>
<p>In the new version of LIEF, the Mach-O parser is able to handle these underlying structures to provide an user-friendly API:</p>
<p>The export trie is represented by the <a href="https://github.com/lief-project/LIEF/blob/0.8.3/include/LIEF/MachO/ExportInfo.hpp">ExportInfo</a>
object which is usually tied to a <a href="https://github.com/lief-project/LIEF/blob/master/include/LIEF/MachO/Symbol.hpp">Symbol</a>.
The binding byte stream is represented trough the <a href="https://github.com/lief-project/LIEF/blob/0.8.3/include/LIEF/MachO/BindingInfo.hpp">BindingInfo</a> object.</p>
<p>For the rebase byte stream, the parser create virtual relocations to model the rebasing process.
These virtual relocations are represented by the <a href="https://github.com/lief-project/LIEF/blob/0.8.3/include/LIEF/MachO/RelocationDyld.hpp">RelocationDyld</a>
object and among other attributes it contains <code>address</code>, <code>size</code> and <code>type</code><sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>.</p>
<p>Here is an example using the Python API:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#666">&gt;&gt;&gt;</span> <span style="color:#008000">id</span> <span style="color:#666">=</span> lief<span style="color:#666">.</span>parse(<span style="color:#ba2121">&#34;/usr/bin/id&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#666">&gt;&gt;&gt;</span> <span style="color:#008000">print</span>(<span style="color:#008000">id</span><span style="color:#666">.</span>relocations[<span style="color:#666">0</span>])
</span></span><span style="display:flex;"><span><span style="color:#666">100002000</span> POINTER <span style="color:#666">64</span> DYLDINFO __DATA<span style="color:#666">.</span>__eh_frame dyld_stub_binder
</span></span><span style="display:flex;"><span><span style="color:#666">&gt;&gt;&gt;</span> <span style="color:#008000">print</span>(<span style="color:#008000">id</span><span style="color:#666">.</span>has_dyld_info)
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">True</span>
</span></span><span style="display:flex;"><span><span style="color:#666">&gt;&gt;&gt;</span> dyldinfo <span style="color:#666">=</span> <span style="color:#008000">id</span><span style="color:#666">.</span>dyld_info
</span></span><span style="display:flex;"><span><span style="color:#666">&gt;&gt;&gt;</span> <span style="color:#008000">print</span>(dyldinfo<span style="color:#666">.</span>bindings[<span style="color:#666">0</span>])
</span></span><span style="display:flex;"><span>Class:       STANDARD
</span></span><span style="display:flex;"><span>Type:        POINTER
</span></span><span style="display:flex;"><span>Address:     <span style="color:#666">0x100002010</span>
</span></span><span style="display:flex;"><span>Symbol:      ___stderrp
</span></span><span style="display:flex;"><span>Segment:     __DATA
</span></span><span style="display:flex;"><span>Library:     <span style="color:#666">/</span>usr<span style="color:#666">/</span>lib<span style="color:#666">/</span>libSystem<span style="color:#666">.</span>B<span style="color:#666">.</span>dylib
</span></span><span style="display:flex;"><span><span style="color:#666">&gt;&gt;&gt;</span> <span style="color:#008000">print</span>(dyldinfo<span style="color:#666">.</span>exports[<span style="color:#666">0</span>])
</span></span><span style="display:flex;"><span>Node Offset: <span style="color:#666">18</span>
</span></span><span style="display:flex;"><span>Flags:       <span style="color:#666">0</span>
</span></span><span style="display:flex;"><span>Address:     <span style="color:#666">0</span>
</span></span><span style="display:flex;"><span>Symbol:      __mh_execute_header</span></span></code></pre></div>
<h2 id="conclusion">Conclusion</h2>
<p>In this release we did a large improvement of the ELF builder. Mach-O and PE parts gain new objects and new
functions. LIEF is now available on <a href="https://pypi.python.org/pypi/lief">pypi</a>
and can be added in the requirements of Python projects whatever the Python version and the target platform.</p>
<p>Since the <code>v0.7.0</code> LIEF has been presented at <a href="https://prog2017.rmll.info/programme/securite-entre-transparence-et-opacite/lief-bibliotheque-d-instrumentation-de-formats-executables-mais-ca-fait-bife-c?lang=en">RMLL</a>
and the <a href="http://www.misp-project.org/">MISP</a> project uses it for its <em>PyMISP objects</em>.</p>
<p>Some may complain about the C API. They are right! Until the <code>v1.0.0</code> we will provide a minimal C API.
Once C++ API is stable we plan to provide full APIs for Python, C, Java, OCaml<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>, etc.</p>
<p>Next version should be focused on the Mach-O builder especially for adding sections and segments.
We also plan to support PE <code>.NET</code> headers and fix some performances issues.</p>
<p>For questions you can join the <a href="https://gitter.im/lief-project">Gitter channel</a>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>All Python examples are done with the 3.5 version&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>As mentioned in the Fortinet blog post, the library is packed.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>See the blog post about O-LLVM analysis: <a href="https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html">https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>This feature is not yet available for MachO objects&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>Due to the inheritance relationship and abstraction these attributes are located in the MachO::Relocation and LIEF::Relocation objects.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p><a href="https://github.com/aziem/LIEF-ocaml">https://github.com/aziem/LIEF-ocaml</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded><media:content medium="image" width="918" height="517" url="https://www.romainthomas.fr/post/17-11-have-fun-with-lief-and-executable-formats/featured.png"/></item><item><title>Open-sourcing LIEF</title><dc:creator>Romain Thomas</dc:creator><link>https://www.romainthomas.fr/post/lief-release/</link><pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/lief-release/</guid><description>We are open-sourcing LIEF, a library to parse and manipulate ELF, PE and Mach-O binary formats. This blog post explains the purpose of this project and some parts of its architecture.</description><content:encoded><![CDATA[<div class="col-12 col-md-12 mb-4 mb-lg-4 mt-4">
  <div class="p-4 rounded col-12 alert alert-info" style="background-color: #FAFCFF">
    <div class="d-flex px-3"><div>
        <div class="icon icon-sm icon-secondary">
          <span class="fa-duotone fa-link-horizontal" style="color: #084298" ></span>
        </div>
      </div>
      <div class="ps-4">
        <span class="h6 m-0 mb-1"  style="color: #084298">
        This post has been originally posted on the <a href=https://blog.quarkslab.com/lief-library-to-instrument-executable-formats.html>Quarkslab&rsquo;s blog</a>
        </span>
      </div>
    </div>
  </div>
</div>
<h1 id="executable-file-formats-in-a-nutshell">Executable File Formats in a Nutshell</h1>
<p>When dealing with executable files, the first layer of information is the format in which the code is wrapped. We can see an executable file format
as an envelope. It contains information so that the postman (i.e. Operating System) can handle and deliver (i.e. execute) it.
The message wrapped by this envelope would be the machine code.</p>
<p>There are mainly three mainstream formats, one per OS:</p>
<ul>
<li><strong>P</strong>ortable <strong>E</strong>xecutable (<strong>PE</strong>) for Windows systems</li>
<li><strong>E</strong>xecutable and <strong>L</strong>inkable <strong>F</strong>ormat (<strong>ELF</strong>) for UN*X systems (Linux, Android&hellip;).</li>
<li>Mach-O for OS-X, iOS&hellip;</li>
</ul>
<p>Other executable file formats, such as <code>COFF</code>, exist  but they are less relevant.</p>
<p>Usually each format has a header which describes at least the target architecture, the program&rsquo;s entry point and the type of the wrapped object (executable, library&hellip;)
Then we have blocks of data that will be mapped by the OS&rsquo;s loader. These blocks of data could hold machine code (<code>.text</code>), read-only data (<code>.rodata</code>) or other OS specific information.</p>
<p>For PE there is only one kind of such block: <strong>Section</strong>. For ELF and Mach-O formats, a section has a different meaning. In these formats,
sections are used by the <strong>linker</strong> at the <strong>compilation</strong> step, whereas <strong>segments</strong> (second type of block) are used by the OS&rsquo;s loader at <strong>execution</strong> step. Thus
sections are not mandatory for ELF and Mach-O formats and can be removed without affecting the execution.</p>
<h1 id="purpose-of-lief">Purpose of LIEF</h1>
<p>It turns out that many projects need to parse executable file formats but don&rsquo;t use a <em>standard</em> library and re-implement their own parser (and the wheel).
Moreover, these parsers are usually bound to one language.</p>
<p>On Unix system one can find the <code>objdump</code> and <code>objcopy</code> utilities but they are limited to Unix and the API is not user-friendly.</p>
<p>The purpose of LIEF is to fill this void:</p>
<ul>
<li>Providing a cross platform library which can parse and modify (in a certain extent) ELF, PE and Mach-O formats using a common abstraction</li>
<li>Providing an API for different languages (Python, C++, C&hellip;)</li>
<li>Abstract common features from the different formats (Section, header, entry point, symbols&hellip;)</li>
</ul>
<p>The following snippets show how to obtain information about an executable using different API of LIEF:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">import</span> <span style="color:#00f;font-weight:bold">lief</span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic"># ELF</span>
</span></span><span style="display:flex;"><span>  binary <span style="color:#666">=</span> lief<span style="color:#666">.</span>parse(<span style="color:#ba2121">&#34;/usr/bin/ls&#34;</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#008000">print</span>(binary)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic"># PE</span>
</span></span><span style="display:flex;"><span>  binary <span style="color:#666">=</span> lief<span style="color:#666">.</span>parse(<span style="color:#ba2121">&#34;C:</span><span style="color:#b62;font-weight:bold">\\</span><span style="color:#ba2121">Windows</span><span style="color:#b62;font-weight:bold">\\</span><span style="color:#ba2121">explorer.exe&#34;</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#008000">print</span>(binary)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic"># Mach-O</span>
</span></span><span style="display:flex;"><span>  binary <span style="color:#666">=</span> lief<span style="color:#666">.</span>parse(<span style="color:#ba2121">&#34;/usr/bin/ls&#34;</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#008000">print</span>(binary)
</span></span></code></pre></div><p>With the <code>C++</code> API:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#bc7a00">#include</span> <span style="color:#bc7a00">&lt;LIEF/LIEF.hpp&gt;</span><span style="color:#bc7a00">
</span></span></span><span style="display:flex;"><span><span style="color:#bc7a00"></span>  <span style="color:#b00040">int</span> <span style="color:#00f">main</span>(<span style="color:#b00040">int</span> argc, <span style="color:#008000;font-weight:bold">const</span> <span style="color:#b00040">char</span><span style="color:#666">**</span> argv) {
</span></span><span style="display:flex;"><span>    LIEF<span style="color:#666">::</span>ELF<span style="color:#666">::</span>Binary<span style="color:#666">*</span>   elf   <span style="color:#666">=</span> LIEF<span style="color:#666">::</span>ELF<span style="color:#666">::</span>Parser<span style="color:#666">::</span>parse(<span style="color:#ba2121">&#34;/usr/bin/ls&#34;</span>);
</span></span><span style="display:flex;"><span>    LIEF<span style="color:#666">::</span>PE<span style="color:#666">::</span>Binary<span style="color:#666">*</span>    pe    <span style="color:#666">=</span> LIEF<span style="color:#666">::</span>PE<span style="color:#666">::</span>Parser<span style="color:#666">::</span>parse(<span style="color:#ba2121">&#34;C:</span><span style="color:#b62;font-weight:bold">\\</span><span style="color:#ba2121">Windows</span><span style="color:#b62;font-weight:bold">\\</span><span style="color:#ba2121">explorer.exe&#34;</span>);
</span></span><span style="display:flex;"><span>    LIEF<span style="color:#666">::</span>MachO<span style="color:#666">::</span>Binary<span style="color:#666">*</span> macho <span style="color:#666">=</span> LIEF<span style="color:#666">::</span>MachO<span style="color:#666">::</span>Parser<span style="color:#666">::</span>parse(<span style="color:#ba2121">&#34;/usr/bin/ls&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    std<span style="color:#666">::</span>cout <span style="color:#666">&lt;&lt;</span> <span style="color:#666">*</span>elf   <span style="color:#666">&lt;&lt;</span> std<span style="color:#666">::</span>endl;
</span></span><span style="display:flex;"><span>    std<span style="color:#666">::</span>cout <span style="color:#666">&lt;&lt;</span> <span style="color:#666">*</span>pe    <span style="color:#666">&lt;&lt;</span> std<span style="color:#666">::</span>endl;
</span></span><span style="display:flex;"><span>    std<span style="color:#666">::</span>cout <span style="color:#666">&lt;&lt;</span> <span style="color:#666">*</span>macho <span style="color:#666">&lt;&lt;</span> std<span style="color:#666">::</span>endl;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">delete</span> elf;
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">delete</span> pe;
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">delete</span> macho;
</span></span><span style="display:flex;"><span>  }
</span></span></code></pre></div><p>And finally with the <code>C</code> API:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#bc7a00">#include</span> <span style="color:#bc7a00">&lt;LIEF/LIEF.h&gt;</span><span style="color:#bc7a00">
</span></span></span><span style="display:flex;"><span><span style="color:#bc7a00"></span>  <span style="color:#b00040">int</span> <span style="color:#00f">main</span>(<span style="color:#b00040">int</span> argc, <span style="color:#008000;font-weight:bold">const</span> <span style="color:#b00040">char</span><span style="color:#666">**</span> argv) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    Elf_Binary_t<span style="color:#666">*</span>    elf_binary     <span style="color:#666">=</span> elf_parse(<span style="color:#ba2121">&#34;/usr/bin/ls&#34;</span>);
</span></span><span style="display:flex;"><span>    Pe_Binary_t<span style="color:#666">*</span>     pe_binary      <span style="color:#666">=</span> pe_parse(<span style="color:#ba2121">&#34;C:</span><span style="color:#b62;font-weight:bold">\\</span><span style="color:#ba2121">Windows</span><span style="color:#b62;font-weight:bold">\\</span><span style="color:#ba2121">explorer.exe&#34;</span>);
</span></span><span style="display:flex;"><span>    Macho_Binary_t<span style="color:#666">**</span> macho_binaries <span style="color:#666">=</span> macho_parse(<span style="color:#ba2121">&#34;/usr/bin/ls&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    Pe_Section_t<span style="color:#666">**</span>    pe_sections    <span style="color:#666">=</span> pe_binary<span style="color:#666">-&gt;</span>sections;
</span></span><span style="display:flex;"><span>    Elf_Section_t<span style="color:#666">**</span>   elf_sections   <span style="color:#666">=</span> elf_binary<span style="color:#666">-&gt;</span>sections;
</span></span><span style="display:flex;"><span>    Macho_Section_t<span style="color:#666">**</span> macho_sections <span style="color:#666">=</span> macho_binaries[<span style="color:#666">0</span>]<span style="color:#666">-&gt;</span>sections;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">for</span> (size_t i <span style="color:#666">=</span> <span style="color:#666">0</span>; pe_sections[i] <span style="color:#666">!=</span> <span style="color:#008000">NULL</span>; <span style="color:#666">++</span>i) {
</span></span><span style="display:flex;"><span>      printf(<span style="color:#ba2121">&#34;%s</span><span style="color:#b62;font-weight:bold">\n</span><span style="color:#ba2121">&#34;</span>, pe_sections[i]<span style="color:#666">-&gt;</span>name)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">for</span> (size_t i <span style="color:#666">=</span> <span style="color:#666">0</span>; elf_sections[i] <span style="color:#666">!=</span> <span style="color:#008000">NULL</span>; <span style="color:#666">++</span>i) {
</span></span><span style="display:flex;"><span>      printf(<span style="color:#ba2121">&#34;%s</span><span style="color:#b62;font-weight:bold">\n</span><span style="color:#ba2121">&#34;</span>, elf_sections[i]<span style="color:#666">-&gt;</span>name)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">for</span> (size_t i <span style="color:#666">=</span> <span style="color:#666">0</span>; macho_sections[i] <span style="color:#666">!=</span> <span style="color:#008000">NULL</span>; <span style="color:#666">++</span>i) {
</span></span><span style="display:flex;"><span>      printf(<span style="color:#ba2121">&#34;%s</span><span style="color:#b62;font-weight:bold">\n</span><span style="color:#ba2121">&#34;</span>, macho_sections[i]<span style="color:#666">-&gt;</span>name)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    elf_binary_destroy(elf_binary);
</span></span><span style="display:flex;"><span>    pe_binary_destroy(pe_binary);
</span></span><span style="display:flex;"><span>    macho_binaries_destroy(macho_binaries);
</span></span><span style="display:flex;"><span>  }
</span></span></code></pre></div><p>LIEF supports FAT-MachO and one can iterate over binaries as follows:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">import</span> <span style="color:#00f;font-weight:bold">lief</span>
</span></span><span style="display:flex;"><span>  binaries <span style="color:#666">=</span> lief<span style="color:#666">.</span>MachO<span style="color:#666">.</span>parse(<span style="color:#ba2121">&#34;/usr/lib/libc++abi.dylib&#34;</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">for</span> binary <span style="color:#a2f;font-weight:bold">in</span> binaries:
</span></span><span style="display:flex;"><span>    <span style="color:#008000">print</span>(binary)
</span></span></code></pre></div><div class="col-12 col-md-12 mb-4 mb-lg-4 mt-4">
  <div class="p-4 rounded col-12 alert alert-info" style="border: none !important; background-color: #FAFCFF">
  <div class="d-flex px-3"><div>
    <div class="icon icon-sm icon-secondary">
      <span class="fas fa-circle-info" style="color: #084298" ></span>
    </div>
  </div>
  <div class="ps-4" style="color: #084298">
    <h3 class="h5 m-0 mb-1" style="color: #084298">Note</h3>
    The above script uses the <code>lief.MachO.parse</code> function instead of the <code>lief.parse</code> function because <code>lief.parse</code> returns a <strong>single</strong> <code>lief.MachO.binary</code> object
whereas <code>lief.MachO.parse</code> returns a <strong>list</strong> of <code>lief.MachO.binary</code> (according to the FAT-MachO format).
  </div>
  </div>
  </div>
</div>
<p>Along with standard format components like headers, sections, import table, load commands, symbols, etc. LIEF is also able to parse PE Authenticode:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">import</span> <span style="color:#00f;font-weight:bold">lief</span>
</span></span><span style="display:flex;"><span>  driver <span style="color:#666">=</span> lief<span style="color:#666">.</span>parse(<span style="color:#ba2121">&#34;driver.sys&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">for</span> crt <span style="color:#a2f;font-weight:bold">in</span> driver<span style="color:#666">.</span>signature<span style="color:#666">.</span>certificates:
</span></span><span style="display:flex;"><span>    <span style="color:#008000">print</span>(crt)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="">
</span></span></span><span style="display:flex;"><span><span style=""></span><span style="color:#888">  Version:             3
</span></span></span><span style="display:flex;"><span><span style="color:#888">  Serial Number:       61:07:02:dc:00:00:00:00:00:0b
</span></span></span><span style="display:flex;"><span><span style="color:#888">  Signature Algorithm: SHA1_WITH_RSA_ENCRYPTION
</span></span></span><span style="display:flex;"><span><span style="color:#888">  Valid from:          2005-9-15 21:55:41
</span></span></span><span style="display:flex;"><span><span style="color:#888">  Valid to:            2016-3-15 22:5:41
</span></span></span><span style="display:flex;"><span><span style="color:#888">  Issuer:              DC=com, DC=microsoft, CN=Microsoft Root Certificate Authority
</span></span></span><span style="display:flex;"><span><span style="color:#888">  Subject:             C=US, ST=Washington, L=Redmond, O=Microsoft Corporation, CN=Microsoft Windows Verification PCA
</span></span></span><span style="display:flex;"><span><span style="color:#888">  ...
</span></span></span></code></pre></div><p>Full API documentation is available here</p>
<ul>
<li><a href="https://lief-project.github.io/doc/latest/api/python/index.html">Python API</a></li>
<li><a href="https://lief-project.github.io/doc/latest/api/cpp/index.html">C++ API</a></li>
<li><a href="https://lief-project.github.io/doc/latest/api/c/index.html">C API</a></li>
</ul>
<h1 id="architecture">Architecture</h1>
<p>In the <code>LIEF</code> architecture, each format implements at least the following classes:</p>
<ul>
<li>Parser: Parse the format and decompose it into a <code>Binary</code> class</li>
<li>Binary: Modelize the format and provide an API to modify and explore it.</li>
<li>Builder: Transform the binary object into a valid file.</li>
</ul>
<figure><img src="archi.png"/>
</figure>

<p>To factor common characteristics in formats we have an inheritance relationship between these characteristics.</p>
<p>For symbols it gives the following diagram:</p>
<figure><img src="symbol_inheritance.png"/>
</figure>

<p>It enables to write cross-format utility like <code>nm</code>. <code>nm</code> is a Unix utility to list symbols in an executable. The source code is available here: <a href="https://github.com/gittup/binutils/blob/0af702d47a443acea853b84157c2e81f6c131e77/binutils/nm.c">binutils</a></p>
<p>With the given inheritance relationship one can write this utility for the three formats in a single script:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">import</span> <span style="color:#00f;font-weight:bold">lief</span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">import</span> <span style="color:#00f;font-weight:bold">sys</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">def</span> <span style="color:#00f">nm</span>(binary):
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">for</span> symbol <span style="color:#a2f;font-weight:bold">in</span> binary<span style="color:#666">.</span>symbols:
</span></span><span style="display:flex;"><span>      <span style="color:#008000">print</span>(symbol)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">return</span> <span style="color:#666">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">if</span> __name__ <span style="color:#666">==</span> <span style="color:#ba2121">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    r <span style="color:#666">=</span> nm(sys<span style="color:#666">.</span>argv[<span style="color:#666">1</span>])
</span></span><span style="display:flex;"><span>    sys<span style="color:#666">.</span>exit(r)
</span></span></code></pre></div><h1 id="conclusion">Conclusion</h1>
<p>As LIEF is still a young project we hope to have feedback, ideas, suggestions and pull requests.</p>
<p>The source code is available here: <a href="https://github.com/lief-project">https://github.com/lief-project</a> (under Apache 2.0 license) and the associated website: <a href="http://lief.quarkslab.com">http://lief.quarkslab.com</a></p>
<p>If you are interested in use cases, you can take a look at these tutorials:</p>
<ul>
<li><a href="https://lief-project.github.io/doc/latest/tutorials/01_play_with_formats.html">Parse and manipulate formats</a></li>
<li><a href="https://lief-project.github.io/doc/latest/tutorials/02_pe_from_scratch.html">Create a PE from scratch</a></li>
<li><a href="https://lief-project.github.io/doc/latest/tutorials/03_elf_change_symbols.html">Play with ELF symbols</a></li>
<li><a href="https://lief-project.github.io/doc/latest/tutorials/04_elf_hooking.html">Hooking</a></li>
<li><a href="https://lief-project.github.io/doc/latest/tutorials/05_elf_infect_plt_got.html">Infecting the PLT/GOT</a></li>
</ul>
<p>The project will be presented at the <a href="http://cyber.science-japon.org/">Third French Japanese Meeting on Cybersecurity</a></p>
<h1 id="contact">Contact</h1>
<ul>
<li>lief [at] quarkslab [dot] com</li>
<li>Gitter: <a href="https://gitter.im/lief-project">lief-project</a></li>
</ul>
<h1 id="thanks">Thanks</h1>
<p>Thanks to Serge Guelton and Adrien Guinet for their advice about the design and their code review. Thanks to Quarkslab for making this project open-source.</p>
]]></content:encoded><media:content medium="image" width="918" height="517" url="https://www.romainthomas.fr/post/lief-release/featured.png"/></item><item><title>HITB 2015 Write-up - Crypto 300</title><dc:creator>Romain Thomas</dc:creator><link>https://www.romainthomas.fr/post/15-11-hitb2015-crypto300/</link><pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/15-11-hitb2015-crypto300/</guid><description>Write-up for the Crypto 300 challenge</description><content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>The crypto 300 challenge was about RSA with a special generation of the prime numbers $p$ and $q$.
We were given a mail <a href="mail.msg">mail.msg</a> which has been encrypted with RSA and whose the public key is in the <a href="hitbctf.crt">hitbctf.crt</a> certificate.</p>
<h2 id="rsas-parameters-construction">RSA&rsquo;s Parameters Construction</h2>
<p>The modulus $N$ is built by choosing randomly a first prime number $p$, the second prime number $q$ is constructed in the following way:</p>
<p>$$\alpha \cdot (p - 1) \equiv 1 \pmod{e}$$</p>
<p>$$q = (p\alpha \bmod e) + k\cdot e$$</p>
<p>$k$ is a positive integer such as $q$ is a prime number and $e$ is the public exponent which is also a random prime number.</p>
<p>The following code is the implementation in Python:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">def</span> <span style="color:#00f">gen_rsa_parameters</span>():
</span></span><span style="display:flex;"><span>    r <span style="color:#666">=</span> os<span style="color:#666">.</span>urandom(<span style="color:#666">63</span>)
</span></span><span style="display:flex;"><span>    e <span style="color:#666">=</span> <span style="color:#008000">int</span>(r<span style="color:#666">.</span>encode(<span style="color:#ba2121">&#39;hex&#39;</span>), <span style="color:#666">16</span>)
</span></span><span style="display:flex;"><span>    e <span style="color:#666">=</span> next_prime(e)
</span></span><span style="display:flex;"><span>    r <span style="color:#666">=</span> os<span style="color:#666">.</span>urandom(<span style="color:#666">64</span>)
</span></span><span style="display:flex;"><span>    p <span style="color:#666">=</span> <span style="color:#008000">int</span>(r<span style="color:#666">.</span>encode(<span style="color:#ba2121">&#39;hex&#39;</span>), <span style="color:#666">16</span>)
</span></span><span style="display:flex;"><span>    p <span style="color:#666">=</span> next_prime(p)
</span></span><span style="display:flex;"><span>    q <span style="color:#666">=</span> (p<span style="color:#666">*</span>modinv(p<span style="color:#666">-</span><span style="color:#666">1</span>, e)<span style="color:#666">%</span>e)
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">while</span> <span style="color:#a2f;font-weight:bold">not</span> is_prime(q):
</span></span><span style="display:flex;"><span>        q <span style="color:#666">+=</span> e
</span></span><span style="display:flex;"><span>    N <span style="color:#666">=</span> p<span style="color:#666">*</span>q
</span></span><span style="display:flex;"><span>    phi <span style="color:#666">=</span> (p<span style="color:#666">-</span><span style="color:#666">1</span>)<span style="color:#666">*</span>(q<span style="color:#666">-</span><span style="color:#666">1</span>)
</span></span><span style="display:flex;"><span>    d <span style="color:#666">=</span> modinv(e,phi)
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">return</span> N,e,d,p,q
</span></span></code></pre></div><h2 id="theoretical-attack">Theoretical attack</h2>
<p>Let&rsquo;s $N^{\prime} = N \bmod{e}$. So we have</p>
<p>\begin{align}
N^{\prime} &amp; \equiv &amp; p \cdot q \pmod{e} \\\
&amp; \equiv &amp; p \cdot ((p\alpha \bmod e) + k\cdot e) \pmod{e} \\\
&amp; \equiv &amp; p^2\alpha \pmod{e} \\\
\end{align}</p>
<p>We have $\alpha$ in the equation so we can introduce $p - 1$ to remove $\alpha$</p>
<p>\begin{align}
N^{\prime} &amp; \equiv &amp; (p - 1 + 1)^2\alpha \pmod{e} \\\
&amp; \equiv &amp; (p - 1)^2\alpha + 2(p - 1)\alpha + \alpha \pmod{e} \\\
&amp; \equiv &amp; (p - 1) + 2 + \alpha \pmod{e} \\\
(p - 1)N^{\prime} &amp; \equiv &amp; (p - 1)^2 + 2(p - 1) + 1 \pmod{e}
\end{align}</p>
<p>$$\boxed{(p - 1)^2 - (N^{\prime} - 2)(p - 1) + 1 \equiv 0 \pmod{e}}$$</p>
<p>Now we have a quadratic equation which only depends on $p$.</p>
<p>Let&rsquo;s $X = p - 1$ and suppose that $N^{\prime} - 2$ is even and $N^{\prime} - 2 = 2b$.</p>
<p>\begin{align}
X^2 - 2bX + 1 &amp; \equiv &amp; 0 &amp; \pmod{e} \\\
(X - b)^2 - b^2 + 1 &amp; \equiv &amp; 0 &amp; \pmod{e}\\\
(X - b)^2 &amp; \equiv &amp; b^2 - 1 &amp; \pmod{e}
\end{align}</p>
<p>by using <a href="https://en.wikipedia.org/wiki/Quadratic_residue">quadratic residue</a> we can find a solution. We can also use <em>SAGE</em> and the <code>sqrt()</code> function:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>Np <span style="color:#666">=</span> N <span style="color:#666">%</span> e
</span></span><span style="display:flex;"><span>b <span style="color:#666">=</span> (Np <span style="color:#666">-</span> <span style="color:#666">2</span>) <span style="color:#666">/</span> <span style="color:#666">2</span>
</span></span><span style="display:flex;"><span>p <span style="color:#666">=</span> Mod(<span style="color:#008000">pow</span>(b, <span style="color:#666">2</span>) <span style="color:#666">-</span> <span style="color:#666">1</span>, e)<span style="color:#666">.</span>sqrt() <span style="color:#666">+</span> b <span style="color:#666">+</span> <span style="color:#666">1</span>
</span></span></code></pre></div><p>At this point, we find $p \bmod{e}$ but not $p$ !</p>
<p>I tried to find $p$ by adding some $e$ but the <em>distance</em> between $p$ and $p \bmod{e}$ is huge. So I had to find another way.</p>
<p>By knowing $p \bmod{e}$ we can compute $\alpha$. Remember $$\alpha \cdot (p - 1) \equiv 1 \pmod{e}$$ and by having $\alpha$ and $p \bmod{e}$ we can brute force $q$ by adding $e$ until $(p\alpha \bmod e) + k\cdot e$ is prime and it divide $N$.</p>
<p>We did the assumption that $N^{\prime} - 2$ has to be even (so $N^{\prime}$ must be even) and in the certificate $N^{\prime}$ is even so everything is right.</p>
<h2 id="pratical-attack">Pratical Attack</h2>
<p>First we have to extract the modulus $N$ and the public key $e$ from the certificate:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">$</span> openssl x509 -in hitbctf.crt -text -noout
</span></span><span style="display:flex;"><span><span style="">
</span></span></span><span style="display:flex;"><span><span style=""></span><span style="color:#888">Certificate:
</span></span></span><span style="display:flex;"><span><span style="color:#888">    Data:
</span></span></span><span style="display:flex;"><span><span style="color:#888">        Version: 1 (0x0)
</span></span></span><span style="display:flex;"><span><span style="color:#888">        Serial Number: 18379438180976429416 (0xff10e1a5ac5a0968)
</span></span></span><span style="display:flex;"><span><span style="color:#888">    Signature Algorithm: sha1WithRSAEncryption
</span></span></span><span style="display:flex;"><span><span style="color:#888">        Issuer: C=NL, ST=Noord-Holland, L=Amsterdam, O=HITB, OU=CTF
</span></span></span><span style="display:flex;"><span><span style="color:#888">        Validity
</span></span></span><span style="display:flex;"><span><span style="color:#888">            Not Before: May 24 09:58:26 2015 GMT
</span></span></span><span style="display:flex;"><span><span style="color:#888">            Not After : May 23 09:58:26 2016 GMT
</span></span></span><span style="display:flex;"><span><span style="color:#888">        Subject: C=NL, ST=Noord-Holland, L=Amsterdam, O=HITB, OU=CTF
</span></span></span><span style="display:flex;"><span><span style="color:#888">        Subject Public Key Info:
</span></span></span><span style="display:flex;"><span><span style="color:#888">            Public Key Algorithm: rsaEncryption
</span></span></span><span style="display:flex;"><span><span style="color:#888">                Public-Key: (1024 bit)
</span></span></span><span style="display:flex;"><span><span style="color:#888">                Modulus:
</span></span></span><span style="display:flex;"><span><span style="color:#888">                    00:e6:eb:89:c1:8d:49:c9:a2:02:2b:e0:b4:65:14:
</span></span></span><span style="display:flex;"><span><span style="color:#888">                    6e:0f:90:45:1e:a3:4c:6b:60:56:00:4e:bd:15:59:
</span></span></span><span style="display:flex;"><span><span style="color:#888">                    55:b1:35:96:c2:d6:83:ad:2f:23:6b:0b:2c:0e:0b:
</span></span></span><span style="display:flex;"><span><span style="color:#888">                    88:83:b5:d6:cb:8a:0b:4f:f9:b7:eb:64:8c:95:2b:
</span></span></span><span style="display:flex;"><span><span style="color:#888">                    6b:ef:5a:6f:04:f5:64:17:f5:1c:a9:14:d9:ea:73:
</span></span></span><span style="display:flex;"><span><span style="color:#888">                    e7:dd:c5:f2:0d:ce:c3:9c:e8:4b:72:2a:0c:f3:d8:
</span></span></span><span style="display:flex;"><span><span style="color:#888">                    5e:80:ce:78:64:63:e1:44:f6:1d:b5:9c:cf:45:ff:
</span></span></span><span style="display:flex;"><span><span style="color:#888">                    0e:d3:7f:d0:ce:bd:37:a5:8d:8a:4b:08:33:9e:a3:
</span></span></span><span style="display:flex;"><span><span style="color:#888">                    2c:bc:ab:61:64:03:fd:2c:c5
</span></span></span><span style="display:flex;"><span><span style="color:#888">                Exponent:
</span></span></span><span style="display:flex;"><span><span style="color:#888">                    69:60:2d:93:8a:81:5f:14:cf:9f:b8:36:c2:e0:4d:
</span></span></span><span style="display:flex;"><span><span style="color:#888">                    4d:De:82:ba:fc:8d:56:c2:6d:8c:89:ef:3c:40:69:
</span></span></span><span style="display:flex;"><span><span style="color:#888">                    5d:d5:d4:ef:a7:36:36:43:15:14:95:f3:8c:bf:24:
</span></span></span><span style="display:flex;"><span><span style="color:#888">                    ae:94:30:92:40:79:12:00:1b:17:f5:53:33:9e:92:
</span></span></span><span style="display:flex;"><span><span style="color:#888">                    70:70:49
</span></span></span><span style="display:flex;"><span><span style="color:#888">    Signature Algorithm: sha1WithRSAEncryption
</span></span></span><span style="display:flex;"><span><span style="color:#888">         17:2b:ea:be:90:ad:98:f2:2b:ff:f5:61:d3:ea:af:fb:35:3a:
</span></span></span><span style="display:flex;"><span><span style="color:#888">         67:10:91:13:db:60:55:d9:09:8b:c2:1a:cf:6b:c6:1f:f2:10:
</span></span></span><span style="display:flex;"><span><span style="color:#888">         7a:d1:7b:9d:ff:10:f2:f2:c0:a9:f5:aa:2e:09:93:40:88:92:
</span></span></span><span style="display:flex;"><span><span style="color:#888">         7d:98:ff:e1:cb:dc:db:35:8d:e0:4b:21:99:76:bf:db:04:a2:
</span></span></span><span style="display:flex;"><span><span style="color:#888">         62:a4:18:4e:fc:bb:a7:53:be:6a:a1:ef:ec:15:86:c1:f1:1e:
</span></span></span><span style="display:flex;"><span><span style="color:#888">         87:6a:e9:af:fe:d1:08:eb:de:22:28:c4:5e:be:f1:41:0a:ca:
</span></span></span><span style="display:flex;"><span><span style="color:#888">         cf:cf:da:63:b1:c1:56:e8:0c:8e:56:7f:08:94:0d:2b:2a:08:
</span></span></span></code></pre></div><p><code>N = 1621575882314321757502664197090844942567381491984167028188381926885851</code>
<code>995558397927547394115469298694885747314992315746872071523931715177680193273</code>
<code>386465775883129725436206653605910592810579794603402792446164893148622893121</code>
<code>957048204358672599654432857497196823273138934901636721473789115585263150131</code>
<code>66594183212229</code></p>
<p><code>e = 21558488234539889837938770635971330903489839146766895224490179041465516</code>
<code>1931455822669631548838317075220811407344210520390992334648372016602816069805</code>
<code>30249</code></p>
<p>With SAGE:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sage: Np <span style="color:#666">=</span> N <span style="color:#666">%</span> e
</span></span><span style="display:flex;"><span>sage: b <span style="color:#666">=</span> (Np <span style="color:#666">-</span> <span style="color:#666">2</span>) <span style="color:#666">/</span> <span style="color:#666">2</span>
</span></span><span style="display:flex;"><span>sage: pp <span style="color:#666">=</span> <span style="color:#008000">int</span>(Mod(<span style="color:#008000">pow</span>(b, <span style="color:#666">2</span>) <span style="color:#666">-</span> <span style="color:#666">1</span>, e)<span style="color:#666">.</span>sqrt()) <span style="color:#666">+</span> b <span style="color:#666">+</span> <span style="color:#666">1</span>
</span></span><span style="display:flex;"><span>sage: alpha <span style="color:#666">=</span> inverse_mod(<span style="color:#008000">int</span>(X), <span style="color:#008000">int</span>(e))
</span></span><span style="display:flex;"><span>sage: q <span style="color:#666">=</span> (pp <span style="color:#666">*</span> alpha) <span style="color:#666">%</span> e
</span></span><span style="display:flex;"><span>sage: <span style="color:#008000;font-weight:bold">while</span> <span style="color:#a2f;font-weight:bold">not</span> is_prime(q) <span style="color:#a2f;font-weight:bold">and</span> N <span style="color:#666">%</span> q <span style="color:#666">!=</span> <span style="color:#666">0</span>:
</span></span><span style="display:flex;"><span><span style="color:#666">....</span>:         q <span style="color:#666">+=</span> e
</span></span><span style="display:flex;"><span>sage: p <span style="color:#666">=</span> N <span style="color:#666">/</span> q
</span></span><span style="display:flex;"><span>sage: p
</span></span><span style="display:flex;"><span><span style="color:#666">13317713478157317654574552532079837937895228108820477140030796245493222349714497856652987583926206280627498615972491072112647669795345566943409669535038641</span>
</span></span><span style="display:flex;"><span>sage: q
</span></span><span style="display:flex;"><span><span style="color:#666">12176083266650126897170100375931110708350668494730113414987801764299563774952801449439933220072280766145748279998832962142839152786620322097065894585706069</span>
</span></span></code></pre></div><p>We can now generate the private key by using <a href="rsatool.py">rsatool</a>:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ./rsatools.py -o private.pem <span style="color:#b62;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#b62;font-weight:bold"></span>-e <span style="color:#666">21558488234539889837938770635971330903489839146766895224490179041465516193145582266963154883831707522081140734421052039099233464837201660281606980530249</span> <span style="color:#b62;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#b62;font-weight:bold"></span>-p <span style="color:#666">13317713478157317654574552532079837937895228108820477140030796245493222349714497856652987583926206280627498615972491072112647669795345566943409669535038641</span> <span style="color:#b62;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#b62;font-weight:bold"></span>-q <span style="color:#666">12176083266650126897170100375931110708350668494730113414987801764299563774952801449439933220072280766145748279998832962142839152786620322097065894585706069</span>
</span></span></code></pre></div><p>Finally, we can decrypt the message:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>openssl smime -decrypt -in mail.msg -inkey private.pem
</span></span><span style="display:flex;"><span>hitb<span style="color:#666">{</span>0b21cc2025534dbd2965390d2bcef45d<span style="color:#666">}</span>
</span></span></code></pre></div><p>The sources are available <a href="hitb2015-crypto300.tar.gz">here</a></p>
]]></content:encoded><media:content medium="image" width="918" height="517" url="https://www.romainthomas.fr/post/15-11-hitb2015-crypto300/featured.png"/></item><item><title>HITB 2015 Write-up - Crypto 400</title><dc:creator>Romain Thomas</dc:creator><link>https://www.romainthomas.fr/post/15-11-hitb2015-crypto400/</link><pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/15-11-hitb2015-crypto400/</guid><description>Write up</description><content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>The crypto 400 challenge deals with the Even Mansour cryptosystem. To validate this challenge we have to send the flag to a server.
The server checks if the answer matches the flag by encrypting the flag and the given message with a <strong>random</strong> key.
If both are equal the flag is correct otherwise it fails and the encrypted message is printed.</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>key <span style="color:#666">=</span> os<span style="color:#666">.</span>urandom(<span style="color:#666">32</span>)
</span></span><span style="display:flex;"><span>enc_flag <span style="color:#666">=</span> encrypt(flag, key)
</span></span><span style="display:flex;"><span>enc <span style="color:#666">=</span> encrypt(answer, key)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">if</span> enc <span style="color:#666">==</span> enc_flag:
</span></span><span style="display:flex;"><span>  response <span style="color:#666">=</span> <span style="color:#ba2121">&#34;You lucky bastard, </span><span style="color:#b68;font-weight:bold">%s</span><span style="color:#ba2121"> is indeed the correct flag!</span><span style="color:#b62;font-weight:bold">\n</span><span style="color:#ba2121">&#34;</span> <span style="color:#666">%</span> flag
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">else</span>:
</span></span><span style="display:flex;"><span>  response <span style="color:#666">=</span> <span style="color:#ba2121">&#34;Unfortunately that is not our flag :(</span><span style="color:#b62;font-weight:bold">\n</span><span style="color:#ba2121">&#34;</span>
</span></span><span style="display:flex;"><span>  response <span style="color:#666">+=</span> <span style="color:#ba2121">&#34;Your guess encrypts as</span><span style="color:#b62;font-weight:bold">\n</span><span style="color:#b68;font-weight:bold">%s</span><span style="color:#ba2121">&#34;</span> <span style="color:#666">%</span> enc
</span></span><span style="display:flex;"><span>  response <span style="color:#666">+=</span> <span style="color:#ba2121">&#34;whereas our flag encrypts as</span><span style="color:#b62;font-weight:bold">\n</span><span style="color:#b68;font-weight:bold">%s</span><span style="color:#ba2121">&#34;</span> <span style="color:#666">%</span> enc_flag
</span></span></code></pre></div><h2 id="even-mansour-scheme">Even Mansour scheme</h2>
<p>In this Even-Masour scheme the size of a block is 16-bytes and the key &mdash; on 32-bytes &mdash; is split in two: $k_1$ and $k_2$ each one on 16-bytes.
At first, the message $M$ is xor-ed with $k_1$ then $M \oplus k_1$ is going through a $F$ function which
will be discussed later. Finally the output is xor-ed with $k_2$.</p>
<p><img src="evenmansour.png" alt=""></p>
<p>So we have:</p>
<p>$$C = F(M \oplus k_1) \oplus k_2$$</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">def</span> <span style="color:#00f">EvenMansour</span>(block, key):
</span></span><span style="display:flex;"><span>  block <span style="color:#666">=</span> xor(block, key[:<span style="color:#666">16</span>])
</span></span><span style="display:flex;"><span>  block <span style="color:#666">=</span> F(block)
</span></span><span style="display:flex;"><span>  block <span style="color:#666">=</span> xor(block, key[<span style="color:#666">16</span>:])
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span> block
</span></span></code></pre></div><p>In this challenge, the weakness comes from the $F$ function.</p>
<h2 id="f-function">$F$ function</h2>
<p>The $F$ function is composed of 64-rounds that perform the <code>step(...)</code> transformation:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">def</span> <span style="color:#00f">F</span>(block):
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">for</span> i <span style="color:#a2f;font-weight:bold">in</span> <span style="color:#008000">range</span>(<span style="color:#666">64</span>):
</span></span><span style="display:flex;"><span>    block <span style="color:#666">=</span> step(block)
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span> block
</span></span></code></pre></div><p><code>step</code> uses a S-Box to transform the block in this way:</p>
<p><img src="/img/step.png" alt=""></p>
<p>$\begin{cases}
\text{block}^{n+1}_0 = \text{SBox}(\text{block}^{n}_{10} \oplus \text{block}^{n}_{12} \oplus \text{block}^{n}_{13} \oplus \text{block}^{n+1}_{15}) &amp; k = 0 \\\
\text{block}^{n+1}_k = \text{block}^{n}_{k - 1} &amp; k &gt; 0
\end{cases}$</p>
<p>$\text{block}^{n}_k$ is the byte $k$ of the <em>block</em> at round $n$ ($0 \leq k &lt; 16$ and $0 \leq n &lt; 64$)</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">def</span> <span style="color:#00f">step</span>(block):
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span> <span style="color:#008000">chr</span>( S[ <span style="color:#008000">ord</span>(block[<span style="color:#666">10</span>]) <span style="color:#666">^</span> <span style="color:#008000">ord</span>(block[<span style="color:#666">12</span>]) <span style="color:#666">^</span> <span style="color:#008000">ord</span>(block[<span style="color:#666">13</span>]) <span style="color:#666">^</span> <span style="color:#008000">ord</span>(block[<span style="color:#666">15</span>]) ] ) <span style="color:#666">+</span> block[:<span style="color:#666">15</span>]
</span></span></code></pre></div><p>By ploting $y = \text{S-Box}(x)$ we can notice that the S-Box has a special construction:</p>
<p><img src="/img/figure_1-1.png" alt=""></p>
<p>I thought about computing the differential characteristics which is the probability that given the input difference
$\Delta = x \oplus y$ we get the output delta: $\delta = S(x) \oplus S(y)$.
We will call this probability $P(\Delta | \delta)$ and with
following function, we can compute this probability:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">def</span> <span style="color:#00f">P</span>(dx ,dy):
</span></span><span style="display:flex;"><span>    count <span style="color:#666">=</span> <span style="color:#666">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">for</span> x <span style="color:#a2f;font-weight:bold">in</span> <span style="color:#008000">range</span>(<span style="color:#008000">len</span>(SBox)):
</span></span><span style="display:flex;"><span>        dY <span style="color:#666">=</span> SBox[x] <span style="color:#666">^</span> SBox[x <span style="color:#666">^</span> dx]
</span></span><span style="display:flex;"><span>        <span style="color:#008000;font-weight:bold">if</span> dY <span style="color:#666">==</span> dy:
</span></span><span style="display:flex;"><span>            count <span style="color:#666">+=</span> <span style="color:#666">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">return</span> <span style="color:#008000">float</span>(count) <span style="color:#666">/</span> <span style="color:#008000">float</span>(<span style="color:#666">256</span>)
</span></span></code></pre></div><p>For all $\Delta$ and $\delta$, we notice that this probability is either 0 or 1. Consequently if we know $\delta$ we are sure to find $\Delta$. This will be useful for the differential attack.</p>
<h2 id="differential-attack">Differential Attack</h2>
<p>To find the flag, we will perform a differential attack. We have a message $M_1$ that we know and we have an unknown second message $M_2$
that is the flag. We also know $C_1$ and $C_2$ such as:</p>
<p>$$\begin{align}
C_1 &amp; = &amp; F(M_1 \oplus k_1) \oplus k_2 \\\
C_2 &amp; = &amp; F(M_2 \oplus k_1) \oplus k_2
\end{align}$$</p>
<p><img src="diff.png" alt=""></p>
<p>By xor-ing $C_1$ and $C_2$ we can get $\Delta W = W_1 \oplus W_2 = C_1 \oplus C_2$. If somehow we can resolve $\Delta V$:</p>
<p>$$\begin{align}
\Delta V &amp; = &amp; V_1 \oplus V_2 \\\
&amp; = &amp; M_1 \oplus k_1 \oplus M_2 \oplus k_1\\\
&amp; = &amp; M_1 \oplus M_2.
\end{align}$$</p>
<p>We can extract $M_2$ with:</p>
<p>$$M_2 = \Delta V \oplus M_1$$</p>
<h2 id="recovering-delta-v">Recovering $\Delta V$</h2>
<p>Now, let&rsquo;s see how to resolve $\Delta V$ from $\Delta W$.</p>
<p>From the <code>step</code> function, we know that $\text{block}^{n+1}_k = \text{block}^{n}_{k - 1}$ therefore:</p>
<p>$$\Delta W^{n-1}_k = \Delta W^{n}_{k + 1} \forall k &lt; 15$$</p>
<p>We know also $\Delta W^{n-1}_{0,1,2 \ldots 14}$ but not $\Delta W^{n-1}_{15}$</p>
<p>To find $\Delta W^{n-1}_{15}$ we will use the fact that $P(\Delta X | \Delta W^{n-1}_{15}) = 1$  for a given $\Delta X$.
Concretely, I built a table <em>diffTable</em> which maps $\delta$ to $\Delta$.</p>
<p>\begin{align}
\text{diffTable}(\Delta W^{n}_{0}) &amp; = &amp; \Delta W^{n-1}_{10} \oplus \Delta W^{n-1}_{12} \oplus \Delta W^{n-1}_{13} \oplus \Delta W^{n-1}_{15} \\\
&amp; = &amp; \Delta W^{n}_{11} \oplus \Delta W^{n}_{13} \oplus \Delta W^{n}_{14} \oplus \Delta W^{n-1}_{15}\\\
\Delta W^{n-1}_{15}                &amp; = &amp; \text{diffTable}(\Delta W^{n}_{0}) \oplus \Delta W^{n}_{11} \oplus \Delta W^{n}_{13} \oplus \Delta W^{n}_{14}
\end{align}</p>
<p>Which enables to recover $\Delta W^{n - 1}$ from $\Delta W^{n}$.
Then, with recursion we can compute $\Delta W^{0} = \Delta V$</p>
<h2 id="implementation">Implementation</h2>
<p>The following script is the implementation of the attack:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#408080;font-style:italic">#!/usr/bin/python2.7</span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"># -*- coding: utf-8 -*-</span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">import</span> <span style="color:#00f;font-weight:bold">os</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>S <span style="color:#666">=</span> [
</span></span><span style="display:flex;"><span>  <span style="color:#666">0xa5</span>,<span style="color:#666">0xc6</span>,<span style="color:#666">0x62</span>,<span style="color:#666">0x01</span>,<span style="color:#666">0x49</span>,<span style="color:#666">0x2a</span>,<span style="color:#666">0x8e</span>,<span style="color:#666">0xed</span>,<span style="color:#666">0x1f</span>,<span style="color:#666">0x7c</span>,<span style="color:#666">0xd8</span>,<span style="color:#666">0xbb</span>,<span style="color:#666">0xf3</span>,<span style="color:#666">0x90</span>,<span style="color:#666">0x34</span>,<span style="color:#666">0x57</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#666">0xb3</span>,<span style="color:#666">0xd0</span>,<span style="color:#666">0x74</span>,<span style="color:#666">0x17</span>,<span style="color:#666">0x5f</span>,<span style="color:#666">0x3c</span>,<span style="color:#666">0x98</span>,<span style="color:#666">0xfb</span>,<span style="color:#666">0x09</span>,<span style="color:#666">0x6a</span>,<span style="color:#666">0xce</span>,<span style="color:#666">0xad</span>,<span style="color:#666">0xe5</span>,<span style="color:#666">0x86</span>,<span style="color:#666">0x22</span>,<span style="color:#666">0x41</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#666">0x89</span>,<span style="color:#666">0xea</span>,<span style="color:#666">0x4e</span>,<span style="color:#666">0x2d</span>,<span style="color:#666">0x65</span>,<span style="color:#666">0x06</span>,<span style="color:#666">0xa2</span>,<span style="color:#666">0xc1</span>,<span style="color:#666">0x33</span>,<span style="color:#666">0x50</span>,<span style="color:#666">0xf4</span>,<span style="color:#666">0x97</span>,<span style="color:#666">0xdf</span>,<span style="color:#666">0xbc</span>,<span style="color:#666">0x18</span>,<span style="color:#666">0x7b</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#666">0x9f</span>,<span style="color:#666">0xfc</span>,<span style="color:#666">0x58</span>,<span style="color:#666">0x3b</span>,<span style="color:#666">0x73</span>,<span style="color:#666">0x10</span>,<span style="color:#666">0xb4</span>,<span style="color:#666">0xd7</span>,<span style="color:#666">0x25</span>,<span style="color:#666">0x46</span>,<span style="color:#666">0xe2</span>,<span style="color:#666">0x81</span>,<span style="color:#666">0xc9</span>,<span style="color:#666">0xaa</span>,<span style="color:#666">0x0e</span>,<span style="color:#666">0x6d</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#666">0xfd</span>,<span style="color:#666">0x9e</span>,<span style="color:#666">0x3a</span>,<span style="color:#666">0x59</span>,<span style="color:#666">0x11</span>,<span style="color:#666">0x72</span>,<span style="color:#666">0xd6</span>,<span style="color:#666">0xb5</span>,<span style="color:#666">0x47</span>,<span style="color:#666">0x24</span>,<span style="color:#666">0x80</span>,<span style="color:#666">0xe3</span>,<span style="color:#666">0xab</span>,<span style="color:#666">0xc8</span>,<span style="color:#666">0x6c</span>,<span style="color:#666">0x0f</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#666">0xeb</span>,<span style="color:#666">0x88</span>,<span style="color:#666">0x2c</span>,<span style="color:#666">0x4f</span>,<span style="color:#666">0x07</span>,<span style="color:#666">0x64</span>,<span style="color:#666">0xc0</span>,<span style="color:#666">0xa3</span>,<span style="color:#666">0x51</span>,<span style="color:#666">0x32</span>,<span style="color:#666">0x96</span>,<span style="color:#666">0xf5</span>,<span style="color:#666">0xbd</span>,<span style="color:#666">0xde</span>,<span style="color:#666">0x7a</span>,<span style="color:#666">0x19</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#666">0xd1</span>,<span style="color:#666">0xb2</span>,<span style="color:#666">0x16</span>,<span style="color:#666">0x75</span>,<span style="color:#666">0x3d</span>,<span style="color:#666">0x5e</span>,<span style="color:#666">0xfa</span>,<span style="color:#666">0x99</span>,<span style="color:#666">0x6b</span>,<span style="color:#666">0x08</span>,<span style="color:#666">0xac</span>,<span style="color:#666">0xcf</span>,<span style="color:#666">0x87</span>,<span style="color:#666">0xe4</span>,<span style="color:#666">0x40</span>,<span style="color:#666">0x23</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#666">0xc7</span>,<span style="color:#666">0xa4</span>,<span style="color:#666">0x00</span>,<span style="color:#666">0x63</span>,<span style="color:#666">0x2b</span>,<span style="color:#666">0x48</span>,<span style="color:#666">0xec</span>,<span style="color:#666">0x8f</span>,<span style="color:#666">0x7d</span>,<span style="color:#666">0x1e</span>,<span style="color:#666">0xba</span>,<span style="color:#666">0xd9</span>,<span style="color:#666">0x91</span>,<span style="color:#666">0xf2</span>,<span style="color:#666">0x56</span>,<span style="color:#666">0x35</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#666">0x14</span>,<span style="color:#666">0x77</span>,<span style="color:#666">0xd3</span>,<span style="color:#666">0xb0</span>,<span style="color:#666">0xf8</span>,<span style="color:#666">0x9b</span>,<span style="color:#666">0x3f</span>,<span style="color:#666">0x5c</span>,<span style="color:#666">0xae</span>,<span style="color:#666">0xcd</span>,<span style="color:#666">0x69</span>,<span style="color:#666">0x0a</span>,<span style="color:#666">0x42</span>,<span style="color:#666">0x21</span>,<span style="color:#666">0x85</span>,<span style="color:#666">0xe6</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#666">0x02</span>,<span style="color:#666">0x61</span>,<span style="color:#666">0xc5</span>,<span style="color:#666">0xa6</span>,<span style="color:#666">0xee</span>,<span style="color:#666">0x8d</span>,<span style="color:#666">0x29</span>,<span style="color:#666">0x4a</span>,<span style="color:#666">0xb8</span>,<span style="color:#666">0xdb</span>,<span style="color:#666">0x7f</span>,<span style="color:#666">0x1c</span>,<span style="color:#666">0x54</span>,<span style="color:#666">0x37</span>,<span style="color:#666">0x93</span>,<span style="color:#666">0xf0</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#666">0x38</span>,<span style="color:#666">0x5b</span>,<span style="color:#666">0xff</span>,<span style="color:#666">0x9c</span>,<span style="color:#666">0xd4</span>,<span style="color:#666">0xb7</span>,<span style="color:#666">0x13</span>,<span style="color:#666">0x70</span>,<span style="color:#666">0x82</span>,<span style="color:#666">0xe1</span>,<span style="color:#666">0x45</span>,<span style="color:#666">0x26</span>,<span style="color:#666">0x6e</span>,<span style="color:#666">0x0d</span>,<span style="color:#666">0xa9</span>,<span style="color:#666">0xca</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#666">0x2e</span>,<span style="color:#666">0x4d</span>,<span style="color:#666">0xe9</span>,<span style="color:#666">0x8a</span>,<span style="color:#666">0xc2</span>,<span style="color:#666">0xa1</span>,<span style="color:#666">0x05</span>,<span style="color:#666">0x66</span>,<span style="color:#666">0x94</span>,<span style="color:#666">0xf7</span>,<span style="color:#666">0x53</span>,<span style="color:#666">0x30</span>,<span style="color:#666">0x78</span>,<span style="color:#666">0x1b</span>,<span style="color:#666">0xbf</span>,<span style="color:#666">0xdc</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#666">0x4c</span>,<span style="color:#666">0x2f</span>,<span style="color:#666">0x8b</span>,<span style="color:#666">0xe8</span>,<span style="color:#666">0xa0</span>,<span style="color:#666">0xc3</span>,<span style="color:#666">0x67</span>,<span style="color:#666">0x04</span>,<span style="color:#666">0xf6</span>,<span style="color:#666">0x95</span>,<span style="color:#666">0x31</span>,<span style="color:#666">0x52</span>,<span style="color:#666">0x1a</span>,<span style="color:#666">0x79</span>,<span style="color:#666">0xdd</span>,<span style="color:#666">0xbe</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#666">0x5a</span>,<span style="color:#666">0x39</span>,<span style="color:#666">0x9d</span>,<span style="color:#666">0xfe</span>,<span style="color:#666">0xb6</span>,<span style="color:#666">0xd5</span>,<span style="color:#666">0x71</span>,<span style="color:#666">0x12</span>,<span style="color:#666">0xe0</span>,<span style="color:#666">0x83</span>,<span style="color:#666">0x27</span>,<span style="color:#666">0x44</span>,<span style="color:#666">0x0c</span>,<span style="color:#666">0x6f</span>,<span style="color:#666">0xcb</span>,<span style="color:#666">0xa8</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#666">0x60</span>,<span style="color:#666">0x03</span>,<span style="color:#666">0xa7</span>,<span style="color:#666">0xc4</span>,<span style="color:#666">0x8c</span>,<span style="color:#666">0xef</span>,<span style="color:#666">0x4b</span>,<span style="color:#666">0x28</span>,<span style="color:#666">0xda</span>,<span style="color:#666">0xb9</span>,<span style="color:#666">0x1d</span>,<span style="color:#666">0x7e</span>,<span style="color:#666">0x36</span>,<span style="color:#666">0x55</span>,<span style="color:#666">0xf1</span>,<span style="color:#666">0x92</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#666">0x76</span>,<span style="color:#666">0x15</span>,<span style="color:#666">0xb1</span>,<span style="color:#666">0xd2</span>,<span style="color:#666">0x9a</span>,<span style="color:#666">0xf9</span>,<span style="color:#666">0x5d</span>,<span style="color:#666">0x3e</span>,<span style="color:#666">0xcc</span>,<span style="color:#666">0xaf</span>,<span style="color:#666">0x0b</span>,<span style="color:#666">0x68</span>,<span style="color:#666">0x20</span>,<span style="color:#666">0x43</span>,<span style="color:#666">0xe7</span>,<span style="color:#666">0x84</span>
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">def</span> <span style="color:#00f">xor</span>(block1, block2):
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span> <span style="color:#ba2121">&#34;&#34;</span><span style="color:#666">.</span>join( <span style="color:#008000">chr</span>(<span style="color:#008000">ord</span>(a) <span style="color:#666">^</span> <span style="color:#008000">ord</span>(b)) <span style="color:#008000;font-weight:bold">for</span> (a,b) <span style="color:#a2f;font-weight:bold">in</span> <span style="color:#008000">zip</span>(block1, block2))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">def</span> <span style="color:#00f">step</span>(block):
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span> <span style="color:#008000">chr</span>(S[<span style="color:#008000">ord</span>(block[<span style="color:#666">10</span>]) <span style="color:#666">^</span> <span style="color:#008000">ord</span>(block[<span style="color:#666">12</span>]) <span style="color:#666">^</span> <span style="color:#008000">ord</span>(block[<span style="color:#666">13</span>]) <span style="color:#666">^</span> <span style="color:#008000">ord</span>(block[<span style="color:#666">15</span>])]) <span style="color:#666">+</span> block[:<span style="color:#666">15</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">def</span> <span style="color:#00f">F</span>(block):
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">for</span> i <span style="color:#a2f;font-weight:bold">in</span> xrange(<span style="color:#666">64</span>):
</span></span><span style="display:flex;"><span>    block <span style="color:#666">=</span> step(block)
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span> block
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">def</span> <span style="color:#00f">EvenMansour</span>(block, key):
</span></span><span style="display:flex;"><span>  block <span style="color:#666">=</span> xor(block, key[:<span style="color:#666">16</span>])
</span></span><span style="display:flex;"><span>  block <span style="color:#666">=</span> F(block)
</span></span><span style="display:flex;"><span>  block <span style="color:#666">=</span> xor(block, key[<span style="color:#666">16</span>:])
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span> block
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">def</span> <span style="color:#00f">encrypt</span>(data, key):
</span></span><span style="display:flex;"><span>  data, num_blocks <span style="color:#666">=</span> pad(data)
</span></span><span style="display:flex;"><span>  res <span style="color:#666">=</span> <span style="color:#ba2121">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">for</span> i <span style="color:#a2f;font-weight:bold">in</span> xrange(num_blocks):
</span></span><span style="display:flex;"><span>            block <span style="color:#666">=</span> EvenMansour(data[<span style="color:#666">16</span><span style="color:#666">*</span>i:<span style="color:#666">16</span><span style="color:#666">*</span>i<span style="color:#666">+</span><span style="color:#666">16</span>], key)
</span></span><span style="display:flex;"><span>      res <span style="color:#666">+=</span> block
</span></span><span style="display:flex;"><span>        <span style="color:#008000;font-weight:bold">return</span> res
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">def</span> <span style="color:#00f">pad</span>(data):
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">while</span> <span style="color:#008000;font-weight:bold">True</span>:
</span></span><span style="display:flex;"><span>        data <span style="color:#666">+=</span> <span style="color:#ba2121">&#39;</span><span style="color:#b62;font-weight:bold">\x00</span><span style="color:#ba2121">&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">if</span> <span style="color:#008000">len</span>(data) <span style="color:#666">%</span> <span style="color:#666">16</span> <span style="color:#666">==</span> <span style="color:#666">0</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#008000;font-weight:bold">return</span> data, <span style="color:#008000">len</span>(data) <span style="color:#666">/</span> <span style="color:#666">16</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">#</span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"># Table T[a] = b such as</span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic"># S[x] ^ S[y] = a and b = x ^ y</span>
</span></span><span style="display:flex;"><span><span style="color:#408080;font-style:italic">#</span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">def</span> <span style="color:#00f">DiffTable</span>(S):
</span></span><span style="display:flex;"><span>    table <span style="color:#666">=</span> [<span style="color:#666">0</span> <span style="color:#008000;font-weight:bold">for</span> i <span style="color:#a2f;font-weight:bold">in</span> <span style="color:#008000">range</span>(<span style="color:#008000">len</span>(S))]
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">for</span> delta <span style="color:#a2f;font-weight:bold">in</span> <span style="color:#008000">range</span>(<span style="color:#008000">len</span>(S)):
</span></span><span style="display:flex;"><span>        <span style="color:#008000;font-weight:bold">for</span> x <span style="color:#a2f;font-weight:bold">in</span> <span style="color:#008000">range</span>(<span style="color:#008000">len</span>(S)):
</span></span><span style="display:flex;"><span>            dY <span style="color:#666">=</span> S[x] <span style="color:#666">^</span> S[x <span style="color:#666">^</span> delta]
</span></span><span style="display:flex;"><span>            table[dY] <span style="color:#666">=</span> delta
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">return</span> table
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">def</span> <span style="color:#00f">main</span>():
</span></span><span style="display:flex;"><span>    key <span style="color:#666">=</span> os<span style="color:#666">.</span>urandom(<span style="color:#666">32</span>)
</span></span><span style="display:flex;"><span>    M1 <span style="color:#666">=</span> <span style="color:#ba2121">&#34;hitb</span><span style="color:#b68;font-weight:bold">{0123456789abcdef}</span><span style="color:#ba2121">&#34;</span>
</span></span><span style="display:flex;"><span>    M2 <span style="color:#666">=</span> <span style="color:#ba2121">&#34;aaaaaaaaaaaaaaaaaaaaaa&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    C1 <span style="color:#666">=</span> encrypt(M1, key)
</span></span><span style="display:flex;"><span>    C2 <span style="color:#666">=</span> encrypt(M2, key)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    numberOfBlocks <span style="color:#666">=</span> <span style="color:#008000">len</span>(C2) <span style="color:#666">/</span> <span style="color:#666">16</span>
</span></span><span style="display:flex;"><span>    diffTable <span style="color:#666">=</span> DiffTable(S)
</span></span><span style="display:flex;"><span>    clearText <span style="color:#666">=</span> <span style="color:#ba2121">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">for</span> block <span style="color:#a2f;font-weight:bold">in</span> <span style="color:#008000">range</span>(numberOfBlocks):
</span></span><span style="display:flex;"><span>        dW <span style="color:#666">=</span> xor(C1,C2)[<span style="color:#666">16</span> <span style="color:#666">*</span> block : <span style="color:#666">16</span> <span style="color:#666">*</span> (block <span style="color:#666">+</span> <span style="color:#666">1</span>)]
</span></span><span style="display:flex;"><span>        <span style="color:#008000;font-weight:bold">for</span> i <span style="color:#a2f;font-weight:bold">in</span> <span style="color:#008000">range</span>(<span style="color:#666">64</span>):
</span></span><span style="display:flex;"><span>            dWtemp <span style="color:#666">=</span> [dW[i <span style="color:#666">+</span> <span style="color:#666">1</span>] <span style="color:#008000;font-weight:bold">for</span> i <span style="color:#a2f;font-weight:bold">in</span> <span style="color:#008000">range</span>(<span style="color:#666">15</span>)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            delta <span style="color:#666">=</span> diffTable[<span style="color:#008000">ord</span>(dW[<span style="color:#666">0</span>])]
</span></span><span style="display:flex;"><span>            dW15 <span style="color:#666">=</span> <span style="color:#008000">chr</span>(<span style="color:#008000">ord</span>(dW[<span style="color:#666">11</span>]) <span style="color:#666">^</span> <span style="color:#008000">ord</span>(dW[<span style="color:#666">13</span>]) <span style="color:#666">^</span> <span style="color:#008000">ord</span>(dW[<span style="color:#666">14</span>]) <span style="color:#666">^</span> delta)
</span></span><span style="display:flex;"><span>            dWtemp<span style="color:#666">.</span>append(dW15)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            dW <span style="color:#666">=</span> <span style="color:#ba2121">&#34;&#34;</span><span style="color:#666">.</span>join(dWtemp)
</span></span><span style="display:flex;"><span>        M <span style="color:#666">=</span> xor(dW, M2[<span style="color:#666">16</span> <span style="color:#666">*</span> block : <span style="color:#666">16</span> <span style="color:#666">*</span> (block <span style="color:#666">+</span> <span style="color:#666">1</span>)])
</span></span><span style="display:flex;"><span>        clearText <span style="color:#666">+=</span> M
</span></span><span style="display:flex;"><span>    <span style="color:#008000">print</span> clearText
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">if</span> __name__ <span style="color:#666">==</span> <span style="color:#ba2121">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>In fact by noticing that</p>
<p>$$F(x \oplus y) = F(x) \oplus F(y) \oplus C^{te}$$</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">for</span> b <span style="color:#a2f;font-weight:bold">in</span> xrange(<span style="color:#666">10</span>):
</span></span><span style="display:flex;"><span>        u <span style="color:#666">=</span> os<span style="color:#666">.</span>urandom(<span style="color:#666">16</span>);
</span></span><span style="display:flex;"><span>        v <span style="color:#666">=</span> os<span style="color:#666">.</span>urandom(<span style="color:#666">16</span>);
</span></span><span style="display:flex;"><span>        d <span style="color:#666">=</span> xor(F(xor(u,v)), xor(F(u), F(v)))
</span></span><span style="display:flex;"><span>        <span style="color:#008000">print</span> d<span style="color:#666">.</span>encode(<span style="color:#ba2121">&#34;hex&#34;</span>)
</span></span></code></pre></div><p>We have:</p>
<p>\begin{align}
F(M_1 \oplus k_1) \oplus F(M_2 \oplus k_1) &amp; = &amp; F(M_1) \oplus F(M_2)\
M_2 &amp; = &amp; F^{-1}(F(M_1) \oplus C_1 \oplus C_2)
\end{align}</p>
<p>Which is far more easier to resolve.</p>
<p>Thanks to <strong>jb^</strong> who help me and who find the previous technique.</p>
<p>Sources are available <a href="hitb2015-crypto400.tar.gz">here</a></p>
]]></content:encoded><media:content medium="image" width="918" height="517" url="https://www.romainthomas.fr/post/15-11-hitb2015-crypto400/featured.png"/></item><item><title>Code coverage using a dynamic symbolic execution</title><dc:creator>Romain Thomas</dc:creator><link>https://www.romainthomas.fr/post/15-10-triton-code-coverage/</link><pubDate>Mon, 12 Oct 2015 00:00:00 +0000</pubDate><guid>https://www.romainthomas.fr/post/15-10-triton-code-coverage/</guid><description>This blog post introduces code coverage with Triton</description><content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Code coverage is mainly used in the vulnerability research area.
The goal is to generate inputs which will reach different parts of the program&rsquo;s code.
Then, if an input makes the program crash, we check if the crash can be exploited or not.
A lot of methods exist to perform code coverage - like random testing or mutation generation - but in
this short blog post, we will focus on code coverage using a dynamic symbolic execution (DSE)
and explain why it&rsquo;s not a trivial task. Please, note that covering up the code doesn&rsquo;t
mean finding every possible bugs. Some bugs do not make the program crash and this <a href="https://shell-storm.org/talks/StHack2015_Dynamic_Behavior_Analysis_using_Binary_Instrumentation_Jonathan_Salwan.pdf">talk</a>
from slides 35 to 38 explains why. However, if we perform model checking associated
with code coverage, it starts to get interesting =).</p>
<h2 id="code-coverage-and-dse">Code coverage and DSE</h2>
<p>Note that unlike a SSE (static symbolic execution), a DSE is applied on a trace and
can discover new branches only if these ones are reached during the execution.
To go through another path, we must solve one of the last branch constraints discovered from the last trace.
Then, we repeat this operation until all branches are taken.</p>
<p>For example, let&rsquo;s assume a program $P$ which takes an input called $I$,
where I may be a model $M$ or a random seed $R$. An execution is denoted $P(I)$ and returns a set of
constraints $PC$. All $\varphi_{i}$ represent basic blocks and $\pi_i$ represent the branches constraint.
A model $M_i$ is (at least) one valid solution of a constraint $\pi_i$. For example, $M_1 = Solution(\neg\pi_1 \land \pi_2)$.
To discover all paths, we maintain a worklist denoted $W$ which is a set of $M$.</p>
<p>At the first iteration, $I = R, W = \emptyset$ and $P(I) \rightarrow PC$. Then,
$\forall \pi \in PC, W = W \cup { Solution(\pi) }$
and we execute once again the program such that $\forall M \in W, P(M)$.
When a model $M$ is injected in the program&rsquo;s input, it is deleted from the worklist $W$.
Then, we repeat this operation until $W$ is empty.</p>
<p><img src="dse_coverage.png" alt="DSE Code Coverage"></p>
<p>Symbolic code coverage implies some pros and cons. For us, it is really useful when we work on a obfuscated
binary. Indeed, applying symbolic coverage can detect opaque predicates or unreachable code but also repair
a flattened graph (we will release soon another blog post about Triton and o-llvm). The worst con about the
symbolic execution is when your expressions are too complexes which implies a timeout from the SMT solver or
an impressive memory consumption (in the past, our bigger symbolic expression has consumed ~450 Go of
RAM before timeout). This scenario mainly occurs when we analyse real large binaries or obfuscated binaries
which contain polynomial functions. Some of these cons may partially be fixed by optimizing symbolic
expressions but this subject will be another story to come later :).</p>
<h2 id="performing-code-coverage-using-triton">Performing code coverage using Triton</h2>
<p>Since the version <code>v0.1 build 633</code> (commit <a href="https://github.com/JonathanSalwan/Triton/commit/474fe240e66ff6ab3e3501f8d7fc88ce1fcb3ef6">474fe2</a>),
Triton integrates everything we need to perform code coverage. These new features allow us to deal and compute
the SMT2-Lib representation over an AST. In the rest of the blog post, we will focus on the design and the
algorithm used to perform code coverage.</p>
<h3 id="algorithm">Algorithm</h3>
<p>As an introduction (and to not turn our brain upside down), let assume this following sample of code which
comes from the samples directory.</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#b00040">char</span> <span style="color:#666">*</span>serial <span style="color:#666">=</span> <span style="color:#ba2121">&#34;</span><span style="color:#b62;font-weight:bold">\x31\x3e\x3d\x26\x31</span><span style="color:#ba2121">&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#b00040">int</span> <span style="color:#00f">check</span>(<span style="color:#b00040">char</span> <span style="color:#666">*</span>ptr)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#b00040">int</span> i <span style="color:#666">=</span> <span style="color:#666">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">while</span> (i <span style="color:#666">&lt;</span> <span style="color:#666">5</span>){
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">if</span> (((ptr[i] <span style="color:#666">-</span> <span style="color:#666">1</span>) <span style="color:#666">^</span> <span style="color:#666">0x55</span>) <span style="color:#666">!=</span> serial[i])
</span></span><span style="display:flex;"><span>      <span style="color:#008000;font-weight:bold">return</span> <span style="color:#666">1</span>;
</span></span><span style="display:flex;"><span>    i<span style="color:#666">++</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span> <span style="color:#666">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Basically, this function checks if the input is equal to <code>elite</code>, and returns <code>0</code> if it is true, otherwise
it returns <code>1</code>. The control flow graph of this function is described below. It&rsquo;s an interesting first example,
because to cover all basic blocks we need to find the good input.</p>
<p><img src="check_bbs.png" alt=""></p>
<p>We can see that only one variable can be controlled, the one located at the address <code>rbp+var_18</code> which refers
to the <code>argv[1]</code> &rsquo;s pointer. The goal is to reach all the basic blocks in the function check by computing the
constraints and using the snapshot engine until that every basic blocks are reached. For instance, the
constraint to reach the basic block located at the address <code>0x4005C3</code> is <code>[rbp+var_4] &gt; 4</code> but we do not control
this variable directly. In the other hand, the jump at the address <code>0x4005B0</code> depends on the user input and
this constraint can be solved by performing a symbolic execution.</p>
<p>The algorithm which generalizes the previous idea is based on the Microsoft&rsquo;s fuzzer algorithm (<a href="http://research.microsoft.com/en-us/um/people/pg/public_psfiles/ndss2008.pdf">SAGE</a>) and the
next diagram represents our check function with its constraints. The start and end nodes represent
respectively the function&rsquo;s prologue (<code>0x40056D</code>) and the function&rsquo;s epilogue (<code>0x4005C8</code>).</p>
<p><img src="cc1.png" alt=""></p>
<p>Before the first execution, we know nothing about branches&rsquo; constraints. So, as explained in the previous
chapter, we inject some random seeds to collect the first $PC$ and build our set $W$. The trace of the first
execution $P(I)$ is represented by the basic blocks in blue.</p>
<p>This execution gives us our first path constraint $P(I) \rightarrow (\pi_0 \land \neg \pi_1)$.</p>
<p><img src="cc2.png" alt=""></p>
<p>Based on our first trace, we know that there are two branches ($\pi_0 \land \neg \pi_1$) discovered and so 2 others
undiscovered. To reach the basic bloc $\varphi_3$, we compute the negation of the first branch constraint. If and
only if the solution $Solution(\neg \pi_0)$ is SAT, we add the model to the worklist W.</p>
<p>Same for $\varphi_4$ such that $W = W \cup {Solution(\pi_0 \land \neg(\neg \pi_1))}$. Once all solutions have been generated and models added
to the worklist, we execute every models from the worklist.</p>
<p><img src="cc3.png" alt=""></p>
<h3 id="implementation">Implementation</h3>
<p>One condition to perform code coverage, is to predict the next instruction address when we are on a jump
instruction. This condition is necessary to build the path constraint.</p>
<p>We can not put a callback after a branch instruction because the <code>RIP</code> register has already changed. As Triton
creates semantics expressions for all registers, the idea is to evaluate <code>RIP</code> when we are on a branch instruction.</p>
<p>In a first time, we have developed a SMT evaluator to compute the <code>RIP</code> but we saw a little bit later that
Pin provides <code>IARG_BRANCH_TARGET_ADDR</code> and <code>IARG_BRANCH_TAKEN</code> which can be used to know the next <code>RIP</code> values.
With Pin, computing the next address is very easy, nevertheless the SMT evaluator was useful to <a href="https://github.com/JonathanSalwan/Triton/blob/c9648bb1b1f7d8a2afef0941ab267dc9387fd91c/tests/test_semantics.py">check
instruction&rsquo;s semantics</a>.</p>
<p>To perform the evaluation, we implemented the <a href="https://en.wikipedia.org/wiki/Visitor_pattern">visitor pattern</a>
to transform the SMT abstract syntax tree (AST) to a Z3 AST. This design can be used to transform our SMT AST
into any others representations.</p>
<p>The Z3 AST is easier to handle and can be evaluated or simplified with Z3 API. The transformation is performed
by <a href="https://github.com/JonathanSalwan/Triton/blob/c9648bb1b1f7d8a2afef0941ab267dc9387fd91c/src/includes/Z3ast.h">src/smt2lib/z3AST.h</a> and
<a href="https://github.com/JonathanSalwan/Triton/blob/c9648bb1b1f7d8a2afef0941ab267dc9387fd91c/src/smt2lib/z3AST.cpp">src/smt2lib/z3AST.cpp</a>.</p>
<hr>
<p>We will now explain how the code coverage&rsquo;s tool works. Let&rsquo;s assume that inputs come from command&rsquo;s line.
Firstly, we have:</p>
<div class="highlight"><div style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">199
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">200
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">201
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">202
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">203
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">def</span> <span style="color:#00f">run</span>(inputSeed, entryPoint, exitPoint, whitelist <span style="color:#666">=</span> []):
</span></span><span style="display:flex;"><span>  <span style="color:#666">...</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">if</span> __name__<span style="color:#666">==</span><span style="color:#ba2121">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>  TritonExecution<span style="color:#666">.</span>run(<span style="color:#ba2121">&#34;bad !&#34;</span>, <span style="color:#666">0x400480</span>, <span style="color:#666">0x40061B</span>, [<span style="color:#ba2121">&#34;main&#34;</span>, <span style="color:#ba2121">&#34;check&#34;</span>]) <span style="color:#408080;font-style:italic"># crackme_xor</span></span></span></code></pre></td></tr></table>
</div>
</div>
<p>At line 176, we define the input seed <code>bad !</code> which is the first program&rsquo;s argument (<code>argv[1]</code>). Then, we give
the address from the beginning of the code coverage (<strong>start block</strong>) - it&rsquo;s at this address that we will take
a snapshot. The third argument matches with the <strong>end block</strong> - it&rsquo;s at this address that we will restore the
snapshot. Finally, we can set a whitelist to avoid specific functions like library&rsquo;s functions,
cryptographic&rsquo;s function and so on.</p>
<div class="highlight"><div style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">134
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">135
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">136
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">137
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">138
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">139
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">140
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">141
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">142
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">143
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">144
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">145
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">146
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">147
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">148
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">149
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">150
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">151
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">152
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">153
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">154
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">155
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">def</span> <span style="color:#00f">mainAnalysis</span>(threadId):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000">print</span> <span style="color:#ba2121">&#34;[+] In main&#34;</span>
</span></span><span style="display:flex;"><span>  rdi <span style="color:#666">=</span> getRegValue(IDREF<span style="color:#666">.</span>REG<span style="color:#666">.</span>RDI) <span style="color:#408080;font-style:italic"># argc</span>
</span></span><span style="display:flex;"><span>  rsi <span style="color:#666">=</span> getRegValue(IDREF<span style="color:#666">.</span>REG<span style="color:#666">.</span>RSI) <span style="color:#408080;font-style:italic"># argv</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  argv0_addr <span style="color:#666">=</span> getMemValue(rsi, IDREF<span style="color:#666">.</span>CPUSIZE<span style="color:#666">.</span>QWORD)      <span style="color:#408080;font-style:italic"># argv[0] pointer</span>
</span></span><span style="display:flex;"><span>  argv1_addr <span style="color:#666">=</span> getMemValue(rsi <span style="color:#666">+</span> <span style="color:#666">8</span>, IDREF<span style="color:#666">.</span>CPUSIZE<span style="color:#666">.</span>QWORD)  <span style="color:#408080;font-style:italic"># argv[1] pointer</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000">print</span> <span style="color:#ba2121">&#34;[+] In main() we set :&#34;</span>
</span></span><span style="display:flex;"><span>  od <span style="color:#666">=</span> OrderedDict(<span style="color:#008000">sorted</span>(TritonExecution<span style="color:#666">.</span>input<span style="color:#666">.</span>dataAddr<span style="color:#666">.</span>items()))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">for</span> k,v <span style="color:#a2f;font-weight:bold">in</span> od<span style="color:#666">.</span>iteritems():
</span></span><span style="display:flex;"><span>      <span style="color:#008000">print</span> <span style="color:#ba2121">&#34;</span><span style="color:#b62;font-weight:bold">\t</span><span style="color:#ba2121">[0x</span><span style="color:#b68;font-weight:bold">%x</span><span style="color:#ba2121">] = </span><span style="color:#b68;font-weight:bold">%x</span><span style="color:#ba2121"> </span><span style="color:#b68;font-weight:bold">%c</span><span style="color:#ba2121">&#34;</span> <span style="color:#666">%</span> (k, v, v)
</span></span><span style="display:flex;"><span>      setMemValue(k, IDREF<span style="color:#666">.</span>CPUSIZE<span style="color:#666">.</span>BYTE, v)
</span></span><span style="display:flex;"><span>      convertMemToSymVar(k, IDREF<span style="color:#666">.</span>CPUSIZE<span style="color:#666">.</span>BYTE, <span style="color:#ba2121">&#34;addr_</span><span style="color:#b68;font-weight:bold">%d</span><span style="color:#ba2121">&#34;</span> <span style="color:#666">%</span> k)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">for</span> idx, byte <span style="color:#a2f;font-weight:bold">in</span> <span style="color:#008000">enumerate</span>(TritonExecution<span style="color:#666">.</span>input<span style="color:#666">.</span>data):
</span></span><span style="display:flex;"><span>      <span style="color:#008000;font-weight:bold">if</span> argv1_addr <span style="color:#666">+</span> idx <span style="color:#a2f;font-weight:bold">not</span> <span style="color:#a2f;font-weight:bold">in</span> TritonExecution<span style="color:#666">.</span>input<span style="color:#666">.</span>dataAddr: <span style="color:#408080;font-style:italic"># Not overwrite the previous setting</span>
</span></span><span style="display:flex;"><span>          <span style="color:#008000">print</span> <span style="color:#ba2121">&#34;</span><span style="color:#b62;font-weight:bold">\t</span><span style="color:#ba2121">[0x</span><span style="color:#b68;font-weight:bold">%x</span><span style="color:#ba2121">] = </span><span style="color:#b68;font-weight:bold">%x</span><span style="color:#ba2121"> </span><span style="color:#b68;font-weight:bold">%c</span><span style="color:#ba2121">&#34;</span> <span style="color:#666">%</span> (argv1_addr <span style="color:#666">+</span> idx, <span style="color:#008000">ord</span>(byte), <span style="color:#008000">ord</span>(byte))
</span></span><span style="display:flex;"><span>          setMemValue(argv1_addr <span style="color:#666">+</span> idx, IDREF<span style="color:#666">.</span>CPUSIZE<span style="color:#666">.</span>BYTE, <span style="color:#008000">ord</span>(byte))
</span></span><span style="display:flex;"><span>          convertMemToSymVar(argv1_addr <span style="color:#666">+</span> idx, IDREF<span style="color:#666">.</span>CPUSIZE<span style="color:#666">.</span>BYTE, <span style="color:#ba2121">&#34;addr_</span><span style="color:#b68;font-weight:bold">%d</span><span style="color:#ba2121">&#34;</span> <span style="color:#666">%</span> idx)</span></span></code></pre></td></tr></table>
</div>
</div>
<p>The next code being executed is the mainAnalysis callback, we inject values to the inputs selected
(line 148, 154) and we convert these inputs as symbolic variables (line 149, 155).</p>
<p>All inputs selected are stored in a global variable called <code>TritonExecution.input</code>. Then, we can begin the code
exploration.</p>
<div class="highlight"><div style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">if</span> instruction<span style="color:#666">.</span>getAddress() <span style="color:#666">==</span> TritonExecution<span style="color:#666">.</span>entryPoint <span style="color:#a2f;font-weight:bold">and</span> <span style="color:#a2f;font-weight:bold">not</span> isSnapshotEnabled():
</span></span><span style="display:flex;"><span>  <span style="color:#008000">print</span> <span style="color:#ba2121">&#34;[+] Take Snapshot&#34;</span>
</span></span><span style="display:flex;"><span>  takeSnapshot()
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span></span></span></code></pre></td></tr></table>
</div>
</div>
<p>When we are at the entry point, we take a snapshot in order to replay code exploration with a new input.</p>
<div class="highlight"><div style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">if</span> instruction<span style="color:#666">.</span>isBranch() <span style="color:#a2f;font-weight:bold">and</span> instruction<span style="color:#666">.</span>getRoutineName() <span style="color:#a2f;font-weight:bold">in</span> TritonExecution<span style="color:#666">.</span>whitelist:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  addr1 <span style="color:#666">=</span> instruction<span style="color:#666">.</span>getAddress() <span style="color:#666">+</span> <span style="color:#666">2</span>                <span style="color:#408080;font-style:italic"># Address next to this one</span>
</span></span><span style="display:flex;"><span>  addr2 <span style="color:#666">=</span> instruction<span style="color:#666">.</span>getOperands()[<span style="color:#666">0</span>]<span style="color:#666">.</span>getValue()     <span style="color:#408080;font-style:italic"># Address in the instruction condition</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic"># [PC id, address taken, address not taken]</span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">if</span> instruction<span style="color:#666">.</span>isBranchTaken():
</span></span><span style="display:flex;"><span>    TritonExecution<span style="color:#666">.</span>myPC<span style="color:#666">.</span>append([ripId, addr2, addr1])
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">else</span>:
</span></span><span style="display:flex;"><span>    TritonExecution<span style="color:#666">.</span>myPC<span style="color:#666">.</span>append([ripId, addr1, addr2])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span></span></span></code></pre></td></tr></table>
</div>
</div>
<p>This test above checks if we are on a branch instruction like (<code>jnz, jle</code> &hellip;) and if we are in a function which
is into the <em>white list</em>. If so, we get the two possible addresses (<code>addr1</code> and <code>addr2</code>) and the effective address
is computed by <code>isBranchTaken()</code> (line 69).</p>
<p>Then, we store into the path constraint the <code>RIP</code> expression, the address taken and the address not taken
(line 73-76).</p>
<div class="highlight"><div style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 81
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 82
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 83
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 84
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 85
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 86
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 87
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 88
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 89
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 90
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 91
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 92
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 93
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 94
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 95
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 96
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 97
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 98
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 99
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">100
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">101
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">102
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">103
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">104
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">105
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">106
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">107
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">108
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">109
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">110
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">111
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">112
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">113
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">114
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">115
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">116
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">117
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">118
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">119
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">120
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">121
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">122
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">123
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">124
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">125
</span><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">126
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">if</span> instruction<span style="color:#666">.</span>getAddress() <span style="color:#666">==</span> TritonExecution<span style="color:#666">.</span>exitPoint:
</span></span><span style="display:flex;"><span>  <span style="color:#008000">print</span> <span style="color:#ba2121">&#34;[+] Exit point&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic"># SAGE algorithm</span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic"># http://research.microsoft.com/en-us/um/people/pg/public_psfiles/ndss2008.pdf</span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">for</span> j <span style="color:#a2f;font-weight:bold">in</span> <span style="color:#008000">range</span>(TritonExecution<span style="color:#666">.</span>input<span style="color:#666">.</span>bound, <span style="color:#008000">len</span>(TritonExecution<span style="color:#666">.</span>myPC)):
</span></span><span style="display:flex;"><span>    expr <span style="color:#666">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">for</span> i <span style="color:#a2f;font-weight:bold">in</span> <span style="color:#008000">range</span>(<span style="color:#666">0</span>,j):
</span></span><span style="display:flex;"><span>        ripId <span style="color:#666">=</span> TritonExecution<span style="color:#666">.</span>myPC[i][<span style="color:#666">0</span>]
</span></span><span style="display:flex;"><span>        symExp <span style="color:#666">=</span> getFullExpression(getSymExpr(ripId)<span style="color:#666">.</span>getAst())
</span></span><span style="display:flex;"><span>        addr <span style="color:#666">=</span> TritonExecution<span style="color:#666">.</span>myPC[i][<span style="color:#666">1</span>]
</span></span><span style="display:flex;"><span>        expr<span style="color:#666">.</span>append(smt2lib<span style="color:#666">.</span>smtAssert(smt2lib<span style="color:#666">.</span>equal(symExp, smt2lib<span style="color:#666">.</span>bv(addr,  <span style="color:#666">64</span>))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    ripId <span style="color:#666">=</span> TritonExecution<span style="color:#666">.</span>myPC[j][<span style="color:#666">0</span>]
</span></span><span style="display:flex;"><span>    symExp <span style="color:#666">=</span> getFullExpression(getSymExpr(ripId)<span style="color:#666">.</span>getAst())
</span></span><span style="display:flex;"><span>    addr <span style="color:#666">=</span> TritonExecution<span style="color:#666">.</span>myPC[j][<span style="color:#666">2</span>]
</span></span><span style="display:flex;"><span>    expr<span style="color:#666">.</span>append(smt2lib<span style="color:#666">.</span>smtAssert(smt2lib<span style="color:#666">.</span>equal(symExp, smt2lib<span style="color:#666">.</span>bv(addr,  <span style="color:#666">64</span>))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    expr <span style="color:#666">=</span> smt2lib<span style="color:#666">.</span>compound(expr)
</span></span><span style="display:flex;"><span>    model <span style="color:#666">=</span> getModel(expr)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#008000;font-weight:bold">if</span> <span style="color:#008000">len</span>(model) <span style="color:#666">&gt;</span> <span style="color:#666">0</span>:
</span></span><span style="display:flex;"><span>        newInput <span style="color:#666">=</span> TritonExecution<span style="color:#666">.</span>input
</span></span><span style="display:flex;"><span>        newInput<span style="color:#666">.</span>setBound(j <span style="color:#666">+</span> <span style="color:#666">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#008000;font-weight:bold">for</span> k,v <span style="color:#a2f;font-weight:bold">in</span> model<span style="color:#666">.</span>items():
</span></span><span style="display:flex;"><span>            symVar <span style="color:#666">=</span> getSymVar(k)
</span></span><span style="display:flex;"><span>            newInput<span style="color:#666">.</span>addDataAddress(symVar<span style="color:#666">.</span>getKindValue(), v)
</span></span><span style="display:flex;"><span>        <span style="color:#008000">print</span> newInput<span style="color:#666">.</span>dataAddr
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        isPresent <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">False</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#008000;font-weight:bold">for</span> inp <span style="color:#a2f;font-weight:bold">in</span> TritonExecution<span style="color:#666">.</span>worklist:
</span></span><span style="display:flex;"><span>            <span style="color:#008000;font-weight:bold">if</span> inp<span style="color:#666">.</span>dataAddr <span style="color:#666">==</span> newInput<span style="color:#666">.</span>dataAddr:
</span></span><span style="display:flex;"><span>                isPresent <span style="color:#666">=</span> <span style="color:#008000;font-weight:bold">True</span>
</span></span><span style="display:flex;"><span>                <span style="color:#008000;font-weight:bold">break</span>
</span></span><span style="display:flex;"><span>        <span style="color:#008000;font-weight:bold">if</span> <span style="color:#a2f;font-weight:bold">not</span> isPresent:
</span></span><span style="display:flex;"><span>            TritonExecution<span style="color:#666">.</span>worklist<span style="color:#666">.</span>append(newInput)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#408080;font-style:italic"># If there is input to test in the worklist, we restore the snapshot</span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">if</span> <span style="color:#008000">len</span>(TritonExecution<span style="color:#666">.</span>worklist) <span style="color:#666">&gt;</span> <span style="color:#666">0</span> <span style="color:#a2f;font-weight:bold">and</span> isSnapshotEnabled():
</span></span><span style="display:flex;"><span>      <span style="color:#008000">print</span> <span style="color:#ba2121">&#34;[+] Restore snapshot&#34;</span>
</span></span><span style="display:flex;"><span>      restoreSnapshot()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#008000;font-weight:bold">return</span></span></span></code></pre></td></tr></table>
</div>
</div>
<p>The last step happens when we are on the <strong>exit point</strong>. Lines 84 to 120 are the SAGE implementation.
In few words, we browse the path constraints&rsquo; list and for each <strong>PC</strong>, we try to get the model which satisfies
the negation. If there is a valid model to reach the new target basic block, we add the model into the worklist.</p>
<p>Once all models are inserted into the worklist, we restore the snapshot and we re-inject each model as input seed.</p>
<p>The full code can be found <a href="https://github.com/JonathanSalwan/Triton/blob/c9648bb1b1f7d8a2afef0941ab267dc9387fd91c/tools/code_coverage.py">here</a> and its execution on our example looks like this:</p>
<div class="highlight"><pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ./triton ./tools/code_coverage.py ./samples/crackmes/crackme_xor abc
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> Take Snapshot
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> In main
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> In main<span style="color:#666">()</span> we <span style="color:#008000">set</span> :
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef8254d<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">62</span> b
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef8254e<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">61</span> a
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef8254f<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">64</span> d
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef82550<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">20</span>
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef82551<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">21</span> !
</span></span><span style="display:flex;"><span>loose
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> Exit point
</span></span><span style="display:flex;"><span><span style="color:#666">{</span>140726196774221: 101<span style="color:#666">}</span>
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> Restore snapshot
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> In main
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> In main<span style="color:#666">()</span> we <span style="color:#008000">set</span> :
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef8254d<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">65</span> e
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef8254e<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">61</span> a
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef8254f<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">64</span> d
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef82550<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">20</span>
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef82551<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">21</span> !
</span></span><span style="display:flex;"><span>loose
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> Exit point
</span></span><span style="display:flex;"><span><span style="color:#666">{</span>140726196774221: 101, 140726196774222: 108<span style="color:#666">}</span>
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> Restore snapshot
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> In main
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> In main<span style="color:#666">()</span> we <span style="color:#008000">set</span> :
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef8254d<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">65</span> e
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef8254e<span style="color:#666">]</span> <span style="color:#666">=</span> 6c l
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef8254f<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">64</span> d
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef82550<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">20</span>
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef82551<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">21</span> !
</span></span><span style="display:flex;"><span>loose
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> Exit point
</span></span><span style="display:flex;"><span><span style="color:#666">{</span>140726196774221: 101, 140726196774222: 108, 140726196774223: 105<span style="color:#666">}</span>
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> Restore snapshot
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> In main
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> In main<span style="color:#666">()</span> we <span style="color:#008000">set</span> :
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef8254d<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">65</span> e
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef8254e<span style="color:#666">]</span> <span style="color:#666">=</span> 6c l
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef8254f<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">69</span> i
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef82550<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">20</span>
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef82551<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">21</span> !
</span></span><span style="display:flex;"><span>loose
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> Exit point
</span></span><span style="display:flex;"><span><span style="color:#666">{</span>140726196774224: 116, 140726196774221: 101, 140726196774222: 108, 140726196774223: 105<span style="color:#666">}</span>
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> Restore snapshot
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> In main
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> In main<span style="color:#666">()</span> we <span style="color:#008000">set</span> :
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef8254d<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">65</span> e
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef8254e<span style="color:#666">]</span> <span style="color:#666">=</span> 6c l
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef8254f<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">69</span> i
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef82550<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">74</span> t
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef82551<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">21</span> !
</span></span><span style="display:flex;"><span>loose
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> Exit point
</span></span><span style="display:flex;"><span><span style="color:#666">{</span>140726196774224: 116, 140726196774225: 101, 140726196774221: 101, 140726196774222: 108, 140726196774223: 105<span style="color:#666">}</span>
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> Restore snapshot
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> In main
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> In main<span style="color:#666">()</span> we <span style="color:#008000">set</span> :
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef8254d<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">65</span> e
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef8254e<span style="color:#666">]</span> <span style="color:#666">=</span> 6c l
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef8254f<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">69</span> i
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef82550<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">74</span> t
</span></span><span style="display:flex;"><span>        <span style="color:#666">[</span>0x7ffd5ef82551<span style="color:#666">]</span> <span style="color:#666">=</span> <span style="color:#666">65</span> e
</span></span><span style="display:flex;"><span>Win
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> Exit point
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>+<span style="color:#666">]</span> Done !</span></span></code></pre></div>
<h3 id="further-improvement">Further improvement</h3>
<p>Currently, the evaluator is quite slow and we loose a lot of time to evaluate expressions. One feature that
should improve the evaluator speed is a SMT simplifier. We plan to develop a passes system (like LLVM) to
simplify the SMT tree.</p>
<p>The goal is to register some expressions transformation rules before sending expressions to the evaluator or
the solver. For example, that&rsquo;s what <a href="https://github.com/cea-sec/miasm/tree/7ee593d00488e75dadb6edad7ffe5a7dcf6b155d/miasm/expression">miasm2 already does</a>.</p>
<p><img src="./chain.svg" alt=""></p>
<p>There are a lot of mini tricks to lighten symbolic expressions which are easy to implement and really beneficial.
For example, the transformation of the expression
<code>rax1 = (bvxor rax0 rax0) -&gt; rax1 = (_ bv64 0)</code>
will break the <code>rax</code>&rsquo;s symbolic expression chain.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Although the code coverage using a symbolic resolution is a nice way to cover a code without guessing the
inputs, it&rsquo;s clearly not a trivial task. The paths explosion implies the memory consumption and in several
cases the expressions are too complex to be computed but this method remains truly effective on short parts
of code.</p>
<div class="col-12 col-md-12 mb-4 mb-lg-4 mt-4">
  <div class="p-4 rounded col-12 alert alert-info" style="border: none !important; background-color: #FAFCFF">
  <div class="d-flex px-3"><div>
    <div class="icon icon-sm icon-secondary">
      <span class="fas fa-circle-info" style="color: #084298" ></span>
    </div>
  </div>
  <div class="ps-4" style="color: #084298">
    <h3 class="h5 m-0 mb-1" style="color: #084298">Note</h3>
    To improve the symbolic coverage, it could be interesting to deal with bits-flip/random seeds when
expressions are too complex or to deal with symbolic execution and abstract domains.
  </div>
  </div>
  </div>
</div>
]]></content:encoded><media:content medium="image" width="918" height="517" url="https://www.romainthomas.fr/post/15-10-triton-code-coverage/featured.png"/></item></channel></rss>